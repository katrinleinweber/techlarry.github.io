<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[techlarry]]></title>
  <link href="http://larryim.cc/atom.xml" rel="self"/>
  <link href="http://larryim.cc/"/>
  <updated>2017-11-08T14:49:01+08:00</updated>
  <id>http://larryim.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Introduction to big data]]></title>
    <link href="http://larryim.cc/introdution_to_big_data.html"/>
    <updated>2017-10-31T19:52:26+08:00</updated>
    <id>http://larryim.cc/introdution_to_big_data.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Characteristics of Big data</h2>

<p>3 V: Volume, Variety, Velocity</p>

<p>Most now agree with the characterization of big data using the 3 V’s coined by Doug Laney of Gartner:</p>

<p>·<code>Volume</code>: This refers to the vast amounts of data that is generated every second/minute/hour/day in our digitized world.</p>

<p>· <code>Velocity</code>: This refers to the speed at which data is being generated and the pace at which data moves from one point to the next.</p>

<p>· <code>Variety</code>: This refers to the ever-increasing different forms that data can come in, e.g., text, images, voice, geospatial.</p>

<p>A fourth V is now also sometimes added:</p>

<p>· <code>Veracity</code>: This refers to the quality of the data, which can vary greatly.</p>

<p>There are many other V&#39;s that gets added to these depending on the context. For our specialization, we will add:</p>

<p>· <code>Valence</code>: This refers to how big data can bond with each other, forming connections between otherwise disparate datasets.</p>

<p>The above V’s are the dimensions that characterize big data, and also embody its challenges: We have huge amounts of data, in different formats and varying quality, that must be processed quickly.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spark]]></title>
    <link href="http://larryim.cc/Spark_introduction.html"/>
    <updated>2017-10-29T10:53:40+08:00</updated>
    <id>http://larryim.cc/Spark_introduction.html</id>
    <content type="html"><![CDATA[
<p><code>Spark</code>是一个用来实现快速而通用的集群计算的平台。<code>Spark</code>扩展了广泛使用的<code>MapReduce</code>计算模型，而且高效地支持更多计算模式，包括交互式查询和流处理。</p>

<h2 id="toc_0">Reference</h2>

<ul>
<li>Holden Karau, Andy Konwinski, Patrick Wendell, et al. 2015. Learning Spark: Lightning-Fast Big Data Analysis. O&#39;Reilly Media</li>
<li></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hardware/Software Interface]]></title>
    <link href="http://larryim.cc/hardware/software_interface.html"/>
    <updated>2017-10-26T18:49:41+08:00</updated>
    <id>http://larryim.cc/hardware/software_interface.html</id>
    <content type="html"><![CDATA[
<p><code>Hardware/Software Interface</code>是由华盛顿大学在Coursera上开设的课程，与华盛顿大学CSE351课程保持一致。虽然目前这门课已经在Coursera下线，但完整视频、作业、实验仍旧在华盛顿大学<a href="https://courses.cs.washington.edu/courses/cse351/17sp/videos.html">CSE351课程主页</a>上可以观看和下载。</p>

<p>完成课程实验需要用到特定的环境，不然配置起来及其繁琐。幸好，可以下载已经配置好的虚拟机进行实验。虚拟机的地址目前仍旧有效，点击<a href="https://spark-public.s3.amazonaws.com/hardware/VM.7z">这里</a>下载(<code>MD5: 9A2A35B58FF716A84F17610FDEC972EC</code>)。</p>

<p>课程所用教科书是<code>CSAPP</code>(Computer System: A programmer&#39;s Perspective)第二版。非常幸运，教科书、作业和实验内容以及答案已经有人专门整理，并放在Github上了，可以直接<a href="https://github.com/ldfaiztt/CSE351">点击</a>下载。</p>

<p>下载完所有资料后，尽情的学习吧！</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux 内存布局]]></title>
    <link href="http://larryim.cc/15089188725996.html"/>
    <updated>2017-10-25T16:07:52+08:00</updated>
    <id>http://larryim.cc/15089188725996.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15089188725996/15089292733459.png" alt=""/></p>

<p>典型内存空间布局<br/>
一个典型的Linux C程序内存空间由如下几部分组成：</p>

<ul>
<li>代码段（<code>.text</code>）。这里存放的是CPU要执行的指令。代码段是可共享的，相同的代码在内存中只会有一个拷贝，同时这个段是只读的，防止程序由于错误而修改自身的指令。</li>
<li>初始化数据段（<code>.data</code>）。这里存放的是程序中需要明确赋初始值的变量，例如位于所有函数之外的全局变量：<code>int val=&quot;100</code>。需要强调的是，以上两段都是位于程序的可执行文件中，内核在调用exec函数启动该程序时从源程序文件中读入。</li>
<li>未初始化数据段（<code>.bss</code>）。位于这一段中的数据，内核在执行该程序前，将其初始化为0或者null。例如出现在任何函数之外的全局变量：int sum;</li>
<li>栈（<code>Stack</code>）。函数中的局部变量以及在函数调用过程中产生的临时变量都保存在此段中。</li>
<li>堆（<code>Heap</code>）。这个段用于在程序中进行动态内存申请，例如经常用到的malloc，new系列函数就是从这个段中申请内存。</li>
</ul>

<pre><code class="language-C"> #include&lt;stdio.h&gt;    
 #include &lt;malloc.h&gt;    
     
 void print(char *,int);    
 int main()    
{    
      char *s1 = &quot;abcde&quot;;  //&quot;abcde&quot;作为字符串常量存储在常量区 s1、s2、s5拥有相同的地址  
      char *s2 = &quot;abcde&quot;;    
      char s3[] = &quot;abcd&quot;;    
      long int *s4[100];    
      char *s5 = &quot;abcde&quot;;    
      int a = 5;    
      int b =6;//a,b在栈上，&amp;a&gt;&amp;b地址反向增长    
     
     printf(&quot;variables address in main function: s1=%p  s2=%p s3=%p s4=%p s5=%p a=%p b=%p \n&quot;,     
             s1,s2,s3,s4,s5,&amp;a,&amp;b);   
     printf(&quot;variables address in processcall:n&quot;);    
        print(&quot;ddddddddd&quot;,5);//参数入栈从右至左进行,p先进栈,str后进 &amp;p&gt;&amp;str    
     printf(&quot;main=%p print=%p \n&quot;,main,print);    
     //打印代码段中主函数和子函数的地址，编译时先编译的地址低，后编译的地址高main&lt;print    
 }    
  
 void print(char *str,int p)    
{    
     char *s1 = &quot;abcde&quot;;  //abcde在常量区，s1在栈上    
     char *s2 = &quot;abcde&quot;;  //abcde在常量区，s2在栈上 s2-s1=6可能等于0，编译器优化了相同的常量，只在内存保存一份    
     //而&amp;s1&gt;&amp;s2    
     char s3[] = &quot;abcdeee&quot;;//abcdeee在常量区，s3在栈上，数组保存的内容为abcdeee的一份拷贝    
     long int *s4[100];    
     char *s5 = &quot;abcde&quot;;    
     int a = 5;    
     int b =6;    
     int c;    
     int d;           //a,b,c,d均在栈上，&amp;a&gt;&amp;b&gt;&amp;c&gt;&amp;d地址反向增长    
     char *q=str;   
     int m=p;           
     char *r=(char *)malloc(1);    
     char *w=(char *)malloc(1) ;  // r&lt;w 堆正向增长    
    
     printf(&quot;s1=%p s2=%p s3=%p s4=%p s5=%p a=%p b=%p c=%p d=%p str=%p q=%p p=%p m=%p r=%p w=%p \n&quot;,    
            s1,s2,s3,s4,s5,&amp;a,&amp;b,&amp;c,&amp;d,&amp;str,q,&amp;p,&amp;m,r,w);   
     /* 栈和堆是在程序运行时候动态分配的，局部变量均在栈上分配。 
        栈是反向增长的，地址递减；malloc等分配的内存空间在堆空间。堆是正向增长的，地址递增。   
        r,w变量在栈上(则&amp;r&gt;&amp;w)，r,w所指内容在堆中(即r&lt;w)。*/   
 }    
   
</code></pre>

<h2 id="toc_0">堆和栈区别</h2>

<p><img src="media/15089188725996/15089298484521.jpg" alt=""/></p>

<h2 id="toc_1">参考</h2>

<p><a href="http://blog.csdn.net/zhangzhebjut/article/details/39060253">http://blog.csdn.net/zhangzhebjut/article/details/39060253</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Valgrind]]></title>
    <link href="http://larryim.cc/Valgrind.html"/>
    <updated>2017-10-25T16:03:46+08:00</updated>
    <id>http://larryim.cc/Valgrind.html</id>
    <content type="html"><![CDATA[
<p><code>Valgrind</code> is an instrumentation framework for building dynamic analysis tools. There are Valgrind tools that can automatically detect many memory management and threading bugs, and profile your programs in detail. You can also use Valgrind to build new tools.</p>

<p>The Valgrind distribution currently includes six production-quality tools: </p>

<ul>
<li>a memory error detector</li>
<li>two thread error detectors </li>
<li>a cache and branch-prediction profiler</li>
<li>a call-graph generating cache and branch-prediction profiler</li>
<li>a heap profiler.</li>
</ul>

<p>It also includes three experimental tools: </p>

<ul>
<li>a stack/global array overrun detector,</li>
<li>a second heap profiler that examines how heap blocks are used</li>
<li>a SimPoint basic block vector generator.</li>
</ul>

<h2 id="toc_0">Installing on Mac</h2>

<p>The simplest way to install <code>valgrind</code> is using <code>brew</code>:</p>

<pre><code>brew install --HEAD valgrind
</code></pre>

<h2 id="toc_1">Demo</h2>

<p>Writing a C program named &#39;arrays.c&#39; without freeing the memory after allocating it dynamically using <code>malloc</code>, for example,</p>

<pre><code>int* heap_array = (int*) malloc(sizeof(int) * 5);
free(heap_array); ## deleting the statement...
</code></pre>

<p>After running by command</p>

<pre><code>valgrind ./arrays
</code></pre>

<p>you will see &quot;<strong>definitely lost: 20 bytes in 1 blocks</strong>!!&quot;</p>

<p><img src="media/15089186263565/Screen%20Shot%202017-10-25%20at%204.35.47%20PM.png" alt="Screen Shot 2017-10-25 at 4.35.47 P"/></p>

<h2 id="toc_2">Reference</h2>

<ul>
<li><a href="https://stackoverflow.com/questions/26564125/yosemite-and-valgrind">Yosemite and Valgrind</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Techniques: Support Vector Machine (SVM)]]></title>
    <link href="http://larryim.cc/machine_learning_techniques_SVM.html"/>
    <updated>2017-10-24T19:43:35+08:00</updated>
    <id>http://larryim.cc/machine_learning_techniques_SVM.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Linear SVM</a>
<ul>
<li>
<a href="#toc_1">Standard Large-Margin Problem</a>
</li>
<li>
<a href="#toc_2">Support Vector Machine</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">Dual Support Vector Machine</a>
<ul>
<li>
<a href="#toc_4">Lagrange Dual Problem</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">Linear SVM</h2>

<p><img src="media/15088454152744/large_margin.png" alt="large_margin"/></p>

<p>Our goal is to find <code>largest-margin</code> separating hyperplane.</p>

<p><strong>Distance to Hyperplane</strong>: distance(\(x,b,w) = \frac{1}{\lVert w\rVert}|w^Tx+b|\)</p>

<h3 id="toc_1">Standard Large-Margin Problem</h3>

<p>Now the problem becomes:<br/>
<img src="media/15088454152744/hyperplane%20distance.png" alt="hyperplane distance"/></p>

<p><img src="media/15088454152744/standard%20problem.png" alt="standard proble"/></p>

<h3 id="toc_2">Support Vector Machine</h3>

<p><img src="media/15088454152744/svm%20with%20qp%20solver.png" alt="svm with qp solve"/></p>

<h2 id="toc_3">Dual Support Vector Machine</h2>

<p>\[\text{SVM} \equiv \min\limits_{b,w} (\max\limits_{\text{all}\,\alpha_n \ge 0} \mathcal{L}(b,w,\alpha))\]</p>

<h3 id="toc_4">Lagrange Dual Problem</h3>

<p>for any fixed \(\alpha&#39;\)  with all \(\alpha&#39;_n\ge\) 0,<br/>
\[\min\limits_{b,w} (\max\limits_{\text{all}\,\alpha_n \ge 0} \mathcal{L}(b,w,\alpha)) \ge \min\limits_{b,w}\mathcal{L}(b,w,\alpha&#39;)\]</p>

<p>for best \(\alpha&#39;\ge 0\) on RHS,</p>

<p>\[\min\limits_{b,w} (\max\limits_{\text{all}\,\alpha_n \ge 0} \mathcal{L}(b,w,\alpha)) \ge \max\limits_{\text{all}\,\alpha_n \ge 0}(\min\limits_{b,w}  \mathcal{L}(b,w,\alpha))\]</p>

<p>Strong duality of Quadratic Programming<br/>
\[\min\limits_{b,w} (\max\limits_{\text{all}\,\alpha_n \ge 0} \mathcal{L}(b,w,\alpha)) \ge \max\limits_{\text{all}\,\alpha_n \ge 0}(\min\limits_{b,w}  \mathcal{L}(b,w,\alpha))\]</p>

<ul>
<li>&#39;&gt;=&#39;: weak duality</li>
<li>&#39;=&#39;: strong duality, true for QP if

<ul>
<li>convex primal</li>
<li>feasible primal</li>
<li>linear constraints</li>
</ul></li>
</ul>

<p>Dual Formulation of Support Vector Machine:</p>

<p><img src="media/15088454152744/Screen%20Shot%202017-10-25%20at%201.43.46%20PM.png" alt="Screen Shot 2017-10-25 at 1.43.46 P"/></p>

<p><img src="media/15088454152744/Screen%20Shot%202017-10-25%20at%201.46.05%20PM.png" alt="Screen Shot 2017-10-25 at 1.46.05 P"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations - Mathematical Foundations]]></title>
    <link href="http://larryim.cc/15088244818278.html"/>
    <updated>2017-10-24T13:54:41+08:00</updated>
    <id>http://larryim.cc/15088244818278.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">(1) The Learning Problem</a>
<ul>
<li>
<a href="#toc_1">Key Essence of Machine Learning</a>
</li>
<li>
<a href="#toc_2">Formalize the Learning Problem</a>
</li>
<li>
<a href="#toc_3">Machine Learning and other Fields</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">(2) Learning to answer Yes or No</a>
<ul>
<li>
<a href="#toc_5">Perceptron Hypothesis Set</a>
</li>
</ul>
</li>
<li>
<a href="#toc_6">(3) Types of Learning</a>
<ul>
<li>
<a href="#toc_7">Learning with Different Output Space</a>
</li>
<li>
<a href="#toc_8">Learning with Different Data Label</a>
</li>
<li>
<a href="#toc_9">Learning with Different Protocol</a>
</li>
<li>
<a href="#toc_10">Learning with Different Input Space</a>
</li>
</ul>
</li>
<li>
<a href="#toc_11">(4) Feasibility of Learning</a>
<ul>
<li>
<a href="#toc_12">Learning outside training examples</a>
</li>
<li>
<a href="#toc_13">In and out of sample error</a>
</li>
<li>
<a href="#toc_14">Connection to Real Learning</a>
<ul>
<li>
<a href="#toc_15">Bound of BAD data</a>
</li>
<li>
<a href="#toc_16">The Statistical Learning Flow</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_17">(5) Training versus Testing</a>
<ul>
<li>
<a href="#toc_18">Dichotomy</a>
</li>
<li>
<a href="#toc_19">Growth function</a>
</li>
<li>
<a href="#toc_20">Shatter and Break point</a>
</li>
</ul>
</li>
<li>
<a href="#toc_21">(6) Theory of generalization</a>
<ul>
<li>
<a href="#toc_22">Bounding Function</a>
</li>
<li>
<a href="#toc_23">VC Bound</a>
</li>
</ul>
</li>
<li>
<a href="#toc_24">(7) VC dimension</a>
<ul>
<li>
<a href="#toc_25">Interpreting VC Dimension</a>
</li>
</ul>
</li>
<li>
<a href="#toc_26">(8): Noise and error</a>
<ul>
<li>
<a href="#toc_27">Error Measure</a>
</li>
</ul>
</li>
</ul>


<p>The course, Machine Learning Foundations - Mathematical Foundations(机器学习基石), is taught by Hsuan-Tien Lin on Coursera (<a href="https://www.coursera.org/learn/ntumlone-mathematicalfoundations/home/info">course info page</a>).</p>

<p>As the name of the course indicates, the course teaches the most fundamental algorithmic, theoretical, mathematical background of machine learning.</p>

<p>The article summaries the key concepts and conclusions in the course. Each section in the article corresponding to one chapter in the course.</p>

<h2 id="toc_0">(1) The Learning Problem</h2>

<h3 id="toc_1">Key Essence of Machine Learning</h3>

<p>Machine Learning: improving some <strong>performance measure</strong> with experience <strong>computed</strong> from <strong>data</strong></p>

<ul>
<li>exists some &#39;underlying pattern&#39; to be learned — so &#39;performance measure&#39; can be improved</li>
<li>but no programmable (easy) definition — so &#39;ML&#39; is needed</li>
<li>somehow there is data about the pattern — so ML has some &#39;inputs&#39; to learn from</li>
</ul>

<h3 id="toc_2">Formalize the Learning Problem</h3>

<p><strong>Basic Notations</strong>:</p>

<ul>
<li>input: \(x\in\mathcal{X}\)</li>
<li>output: \(y\in\mathcal{Y}\)</li>
<li>unknown pattern to be learned \(\Leftrightarrow\) target function:
\(f:\mathcal{X}\rightarrow\mathcal{Y}\) </li>
<li>data \(\Leftrightarrow\) training examples: \(\mathcal{D}={(x_1,y_1),(x_2,y_2),...,(x_N,y_N)}\)</li>
<li>hypothesis \(\Leftrightarrow\) skill with hopefully good performance: \(g: \mathcal{X}\rightarrow \mathcal{Y}\)</li>
<li>final hypothesis: \(\mathcal{g}\approx f\)</li>
</ul>

<p><strong>Machine Learning: use data \(\mathcal{D}\) to compute hypothesis \(g\) that approximates target \(f\).</strong></p>

<p><img src="media/15088244818278/Screen%20Shot%202017-11-07%20at%2012.35.17%20PM.png" alt="Screen Shot 2017-11-07 at 12.35.17 P"/></p>

<h3 id="toc_3">Machine Learning and other Fields</h3>

<ul>
<li>Machine Learning: use data to compute hypothesis \(g\) that approximates target \(f\)</li>
<li>Data Mining: Use (huge) data to find property that is interesting</li>
</ul>

<p>\(\Longleftrightarrow\)If &#39;interesting property&#39; same as &#39;hypothesis that approximate target&#39;, Machine Learning = Data Mining<br/>
\(\Longleftrightarrow\) If &#39;interesting property&#39; related to &#39;hypothesis that approximate target&#39;, data mining can help machine learning.<br/>
\(\Longleftrightarrow\) traditional data mining also focuses on efficient computation in large database.</p>

<h2 id="toc_4">(2) Learning to answer Yes or No</h2>

<h3 id="toc_5">Perceptron Hypothesis Set</h3>

<p>Vector Form of Perceptron Hypothesis:</p>

<p>\[h(x) = \text{sign}(\sum\limits_{i=0}^dw_ix_i)=\text{sign}(W^Tx)\]</p>

<p><strong>Perceptron Learning Algorithm</strong>(PLA):</p>

<p><img src="media/15088244818278/PLA.png" alt="PLA"/></p>

<p><strong>Pocket Algorithm</strong>: modify <code>PLA</code> algorithm by keeping best weights in pocket</p>

<p><img src="media/15088244818278/pocket.png" alt="pocket"/></p>

<h2 id="toc_6">(3) Types of Learning</h2>

<h3 id="toc_7">Learning with Different Output Space</h3>

<ul>
<li>binary classification: \(\mathcal{Y}=\{-1,+1\}\)</li>
<li>multiclass classification: \(\mathcal{Y}=\{1, 2,..., K\}\)</li>
<li>regression: \(\mathcal {Y} =\mathbb{R}\)</li>
<li>structured learning: \(\mathcal{Y}=\) structures</li>
</ul>

<h3 id="toc_8">Learning with Different Data Label</h3>

<ul>
<li>supervised: all \(y_n\)</li>
<li>unsupervised: no \(y_n\)</li>
<li>semi-supervised: some \(y_n\)</li>
<li>reinforcement: implicit \(y_n\) by goodness (\(\hat y_n\))</li>
</ul>

<h3 id="toc_9">Learning with Different Protocol</h3>

<p>Protocol \(\Longleftrightarrow\) Learning Philosophy.</p>

<ul>
<li>batch: all known data</li>
<li>online: sequential (passive) data</li>
<li>active: strategically-observed data</li>
</ul>

<h3 id="toc_10">Learning with Different Input Space</h3>

<ul>
<li>concrete: sophisticated (and related) physical meaning e.g. user features(age, sex, education level)</li>
<li>raw: simple physical meaning e.g. image features</li>
<li>abstract: no (or little) physical meaning e.g. user/image IDs</li>
</ul>

<h2 id="toc_11">(4) Feasibility of Learning</h2>

<h3 id="toc_12">Learning outside training examples</h3>

<p><strong>No Free Lunch</strong>: Learning from \(D\) (\(D\): training examples) (to infer something outside \(D\)) is doomed to fail if any unknown \(f\) can happen.</p>

<ul>
<li>\(g\approx f\) inside \(D\): Possible!</li>
<li>\(g\approx f\) outside \(D\): Impossible!</li>
</ul>

<h3 id="toc_13">In and out of sample error</h3>

<p>For any fixed \(h\), in &#39;big&#39; data (N large), <code>in-sample error</code> \(E_{in}(h)\) is probably close to <code>out-of-sample error</code> \(E_{out}(h)\) (within \(\epsilon\)):</p>

<p>\(P(|E_{in}(h)-E_{out}(h)|&gt; \epsilon) \le 2\exp(-2\epsilon^2N)\)</p>

<p>The equation above is called <code>Hoeffding&#39;s Inequality</code>. The statement \(E_{in}(h)=E_{out}(h)\) is <code>probably approximately correct</code> (<strong>PAC</strong>, 大概近似正确).</p>

<p>If large \(N\), we can <strong>probably</strong> infer unknown \(E_{out}(h)\) by known \(E_{in}(h)\).</p>

<p><code>in-sample error</code> \(E_{in}(h)\) denotes orange fraction in sample, <code>out-of-sample error</code> \(E_{out}(h)\) denotes orange probability in bin, When we want to infer the orange probability in bin.</p>

<p><img src="media/15088244818278/Ein_Eout.png" alt="Ein_Eout"/></p>

<p><img src="media/15088244818278/Connection%20to%20Learning.png" alt="Connection to Learning"/></p>

<h3 id="toc_14">Connection to Real Learning</h3>

<p><strong>Bad data for One \(h\)</strong>: </p>

<p>\(E_{out}(h)\) and \(E_{in}(h)\) far away: e.g. \(E_{out}\) big (far from \(f\)), but \(E_{in}\) small (correct on most examples).</p>

<p><strong>Bad data for many \(h\)</strong>:</p>

<p>\(\Leftrightarrow\) no &#39;freedom of choices&#39; by learning algorithm \(\mathcal{A}\)<br/>
\(\Leftrightarrow\) there exists some \(h\) such that \(E_{out}(h)\) and \(E_{in}(h)\) far away</p>

<h4 id="toc_15">Bound of BAD data</h4>

<p>Form \(M\) hypotheses, what is the bound of \(\mathbb{P}_{\mathcal{D}} [\text{BAD} \; \mathcal{D}]\)</p>

<p><img src="media/15088244818278/bound_of_bad_data.png" alt="bound of bad data"/></p>

<p>The <code>union bound</code> <a href="https://en.wikipedia.org/wiki/Boole%27s_inequality">WIKI</a> (布尔不等式), also known as <code>Boole&#39;s inequality</code>, says that for any finite or countable set of events, the probability that at least one of the events happens is no greater than the sum of the probabilities of the individual events.</p>

<h4 id="toc_16">The Statistical Learning Flow</h4>

<p>If \(|\mathcal{H}|=M\) finite, \(N\) large enough, for whatever \(g\) picked by \(\mathcal{A}\), \(E_{out}(g)\approx E_{in}(g)\)</p>

<p>if \(\mathcal{A}\) finds one \(g\) with \(E_{in}(g)\approx 0\),<br/>
PAC gaurantee for \(E_{out}(g)\approx 0\) \(\rightarrow\) learning possilbe!</p>

<h2 id="toc_17">(5) Training versus Testing</h2>

<p>For batch and supervised binary classification, \(g\approx f\Longleftrightarrow E_{out}(g)\approx 0\) achieved through \(E_{out}(g)\approx E_{in}(g)\) and \(E_{in}(g)\approx 0\).</p>

<p>In order to achieve two conditions above, learning split to two central questions:</p>

<ul>
<li>Can we make sure that \(E_{out}(g)\) is close enough to \(E_{in}(g)\)?</li>
<li>Can we make \(E_{in}(g)\) small enough?</li>
</ul>

<p>In order to understand trade-off for &#39;right&#39; \(\mathcal{H}\), we establish a finite quantity that replace \(M\),</p>

<p>\[\mathbb{P}[|E_{in}9g)-E_{out}(g)|&gt;\epsilon] \le 2\cdot m_\mathcal{H} \cdot \exp(-2\epsilon^2 N)\]</p>

<h3 id="toc_18">Dichotomy</h3>

<p>Define hypothesis set \(\mathcal{H}\):</p>

<p>\(\mathcal{H}=\{\text{hypothesis}\quad h: \mathcal{X}\rightarrow{\text{x,o}}\}\)</p>

<p>And we call hypothesis &#39;limited&#39; to the eyes of \(x_1, x_2,..., x_N\) a dichotomy:</p>

<p>\[\mathcal{H}(x_1,x_2,...,x_N)=\{(h(x_1),h(x_2),...,h(x_N)) \quad | \quad h \in \mathcal{H} \}\]</p>

<p>One can think of the dichotomies \(\mathcal{H}(x_1,x_2,...,x_N)\) as a set of hypotheses just like \(\mathcal{H}\)  is, except that the hypotheses are seen through the eyes of \(N\) points only.</p>

<p><strong>Note</strong>: hypotheses \(\mathcal{H}\) and dichotomy \(\mathcal{H}(x_1,x_2,...,x_N)\) are different!</p>

<h3 id="toc_19">Growth function</h3>

<p>Growth function is <strong>the maximum number of dichotomies</strong> that can be generated by \(\mathcal{H}\) on <strong>any</strong> \(N\) points: </p>

<p>\[m_\mathcal{H}(N) = \max\limits_{x_1,x_2,...,x_N\in\mathcal{X}}|\mathcal{H}(x_1,x_2,...,x_N)|\]</p>

<p>Growth function is finite, its upper-bound is \(2^N\).</p>

<p>Growth functions in different situation:</p>

<ul>
<li>positive rays: \(m_\mathcal{H}(N)=N+1\)</li>
<li>positive intervals: \(m_\mathcal{H}(N)=\frac{1}{2}N^2+\frac{1}{2}N+1\)</li>
<li>convex sets: \(m_\mathcal{H}(N)=2^N \)</li>
<li>2D perceptrons: \(m_\mathcal{H}(N)=2^N \text{in some cases}\)</li>
</ul>

<h3 id="toc_20">Shatter and Break point</h3>

<p><strong>If no \(k\) inputs can be shattered by \(\mathcal{H}\) , call \(k\) a break point for \(\mathcal{H}\).</strong></p>

<p>if \(m_H(K) &lt; 2^k\), call k a <strong>break point</strong> for \(\mathcal{H}\).</p>

<ul>
<li>since \(k\) is a break point, \(k+1, k+2, k+3,...,\) also break points</li>
</ul>

<p>minimum break points for different \(\mathcal{H}\):</p>

<ul>
<li>positive rays: k=2</li>
<li>positive intervals: k=3</li>
<li>convex sets: none</li>
<li>2D perceptrons: k=4</li>
</ul>

<h2 id="toc_21">(6) Theory of generalization</h2>

<h3 id="toc_22">Bounding Function</h3>

<p>Bounding Function \(B(N,k)\) is maximum possible \(m_\mathcal{H}(N)\) when break point \(=k\).</p>

<p>\[B(N,k) \le \sum\limits_{i=0}^{k-1} C^N_i\]</p>

<p>For fixed \(k, B(N,k)\) upper bounded by \(ploy(N)\), \(\rightarrow m_{\mathcal{H}}(N)\) is \(poly(N)\) if break point exists.</p>

<h3 id="toc_23">VC Bound</h3>

<p>When N large enough, </p>

<p>\[P[\exists h\in \mathcal{H} \quad s.t.\quad  |E_{in}(h)-E_{out}(h)|&gt; \epsilon]\le 4 m_\mathcal{H}(2N)\exp(-\frac{1}{8}\epsilon^2N)\]</p>

<p>The above equation called <strong>Vapnik-Chervonenkis (VC) bound</strong>.</p>

<h2 id="toc_24">(7) VC dimension</h2>

<p>VC dimension, the formal name of <strong>maximum non-break point</strong>, denoted \(d_{VC}(\mathcal{H})\), is </p>

<p>\[\text{largest N for which } m_{\mathcal{H}}(N)=2^N\]</p>

<ul>
<li>positive rays: \(d_{VC}=1\)</li>
<li>positive intervals: \(d_{VC}=2\)</li>
<li>convex sets: \(d_{VC}= \infty \)</li>
<li>2D perceptrons: \(d_{VC}=3\)</li>
<li>d dimension Perceptrons: \(d_{VC}=d+1\)</li>
</ul>

<h3 id="toc_25">Interpreting VC Dimension</h3>

<p><img src="media/15088244818278/the%20vc%20message.png" alt="the vc message"/><br/>
<img src="media/15088244818278/the%20vc%20message2.png" alt="the vc message2"/></p>

<h2 id="toc_26">(8): Noise and error</h2>

<p><strong>Noise</strong> in \(x\) and \(y\):</p>

<p><img src="media/15088244818278/Noises.png" alt="Noises"/></p>

<p>NOTE: <strong>VC holds for \(x \stackrel{i.i.d}{\backsim} P(x), y \stackrel{i.i.d}{\backsim} P(y|x)\)</strong></p>

<p><img src="media/15088244818278/New%20Learning%20Law.png" alt="New Learning Law"/></p>

<h3 id="toc_27">Error Measure</h3>

<p>Two Important Pointwise Error Measures</p>

<p><strong>0/1 error</strong>(often for classification): err(\(\tilde y,y)=[\tilde y\ne y]\) <br/>
<strong>squared error</strong>(often for regression): err(\(\tilde y,y)=(\tilde y\ne y)^2\)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主动学习]]></title>
    <link href="http://larryim.cc/active_learning_intro.html"/>
    <updated>2017-10-23T17:11:38+08:00</updated>
    <id>http://larryim.cc/active_learning_intro.html</id>
    <content type="html"><![CDATA[
<p>主动学习算法通过迭代抽样，主动寻找有利于提升效果的样本，从而减少了训练集的大小。</p>

<p>获取训练样本不仅费时、费力，而且训练集包含大量的冗余样本。</p>

<p>主动学习算法主要分为两阶段：第一阶段为<strong>初始化阶段</strong>，随机从未标注样本中选取小部分，由督导者\(\mathcal{S}\)标注，作为训练集建立初始分类器模型；第二阶段为<strong>循环查询阶段</strong>，督导者\(\mathcal{S}\)从未标注样本集\(U\)中，按照某种查询标准\(Q\)，选取一定的未标注样本进行标注，并加到训练样本集\(L\)中，重新训练分类器，直至达到训练停止标准为止。</p>

<h1 id="toc_0">Reference</h1>

<ul>
<li>LIU Kang, QIAN Xu, WANG Ziqiang. Survey on active learning algorithms. Computer Engineering and Applications, 2012, 48（34）：1-4.</li>
<li>Zongwei Zhou1, Jae Shin1, Lei Zhang, et al. 2017. Fine-tuning Convolutional Neural Networks for Biomedical Image Analysis: Actively and Incrementally. CVPR. <a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Zhou_Fine-Tuning_Convolutional_Neural_CVPR_2017_paper.pdf">pdf</a> </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON/BSON]]></title>
    <link href="http://larryim.cc/15086547919641.html"/>
    <updated>2017-10-22T14:46:31+08:00</updated>
    <id>http://larryim.cc/15086547919641.html</id>
    <content type="html"><![CDATA[
<p><code>JSON</code> stands for <code>Javascript Object Notation</code>. It is a lightweight data interchange format, similar to <code>XML</code>, <code>SOAP</code> and <code>YAML</code>.</p>

<p><code>JSON</code> syntax is based around three simple data types:</p>

<ul>
<li>Name-value pair</li>
<li>JSON Object: a collection of name-value pairs or Arrays encased in curly brackets.</li>
<li>JSON Array: a lift of values encased in square brackets.</li>
</ul>

<p>E.g. a student in an university with basic information: name, id number, GPA etc:</p>

<pre><code class="language-python">
{
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}
</code></pre>

<h2 id="toc_0">Python之<code>json</code>模块</h2>

<p>Python的<code>json</code>模块可以用来编码和解码JSON数据。其最主要的两个函数是<code>json.dumps()</code>(encoding,编码)和<code>json.loads()</code>(decoding, 解码).</p>

<pre><code class="language-python">import json

student_info = {
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}

student_info_json = json.dumps(student_info)

print(student_info_json)
</code></pre>

<pre><code>{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}
</code></pre>

<p>如果你要处理的是文件而不是字符串，你可以使用<code>json.dump()</code> 和 <code>json.load()</code> 来编码和解码<code>JSON</code>数据。例如：</p>

<pre><code class="language-python"># Writing JSON data
with open(&#39;student_info.json&#39;, &#39;w&#39;) as f:
    json.dump(student_info_json, f)
 
# Reading data back
with open(&#39;student_info.json&#39;, &#39;r&#39;) as f:
    data = json.load(f)
data
</code></pre>

<pre><code>&#39;{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}&#39;
</code></pre>

<h2 id="toc_1">Binary JSON - BSON</h2>

<p><code>BSON</code> /ˈbiːsən/, standing for <code>Binary JSON</code>, is a computer data interchange format used mainly as a data storage and network transfer format in the <code>MongoDB</code> database.</p>

<pre><code class="language-python">import bson      #installed with the pymongo package
data = bson.decode_file_iter(open(&#39;example.bson&#39;, &#39;rb&#39;))
</code></pre>

<h2 id="toc_2">Reference</h2>

<ul>
<li>Brad Miller, David Ranum. 2013. Problem Solving with Algorithms and Data Structures.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cdiscount’s Image Classification Challenge]]></title>
    <link href="http://larryim.cc/cdiscount_challenge.html"/>
    <updated>2017-10-22T14:07:43+08:00</updated>
    <id>http://larryim.cc/cdiscount_challenge.html</id>
    <content type="html"><![CDATA[
<p><a href="https://www.kaggle.com/c/cdiscount-image-classification-challenge">Link</a></p>

<p><code>Cdiscount.com</code> generated nearly 3 billion euros last year, making it France’s largest non-food e-commerce company. While the company already sells everything from TVs to trampolines, the list of products is still rapidly growing. By the end of this year, Cdiscount.com will have over 30 million products up for sale. This is up from 10 million products only 2 years ago. Ensuring that so many products are well classified is a challenging task.</p>

<p>Currently, <code>Cdiscount.com</code> applies machine learning algorithms to the text description of the products in order to automatically predict their category. As these methods now seem close to their maximum potential, Cdiscount.com believes that the next quantitative improvement will be driven by the application of data science techniques to images.</p>

<p><strong>In this challenge you will be building a model that automatically classifies the products based on their images</strong>. As a quick tour of Cdiscount.com&#39;s website can confirm, one product can have one or several images. The data set Cdiscount.com is making available is unique and characterized by superlative numbers in several ways:</p>

<ul>
<li>Almost 9 million products: half of the current catalogue</li>
<li>More than 15 million images at 180x180 resolution</li>
<li>More than 5000 categories: yes this is quite an extreme multi-class classification!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards Accurate Multi-person Pose Estimation in the Wild]]></title>
    <link href="http://larryim.cc/15066169438683.html"/>
    <updated>2017-09-29T00:42:23+08:00</updated>
    <id>http://larryim.cc/15066169438683.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++面试经典100题]]></title>
    <link href="http://larryim.cc/15066079292359.html"/>
    <updated>2017-09-28T22:12:09+08:00</updated>
    <id>http://larryim.cc/15066079292359.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1. 请填写BOOL , float, 指针变量与“零值”比较的 if 语句</h2>

<p>提示：这里“零值”可以是0, 0.0 , <code>FALSE</code> 或者“空指针”。例如 <code>int</code> 变量 \(n\) 与“零值”<br/>
比较的<code>if</code>语句为：</p>

<pre><code>if ( n == 0 )
if ( n != 0 )
</code></pre>

<p>以此类推。</p>

<p>(1)请写出 BOOL flag 与“零值”比较的 if 语句：<br/>
标准答案：</p>

<pre><code>if ( flag )
if ( !flag )
``

如下写法均属不良风格，不得分。

</code></pre>

<p>if (flag == TRUE)<br/>
if (flag == 1 )<br/>
if (flag == FALSE)<br/>
if (flag == 0)<br/>
```</p>

<p>(2)请写出 <code>float x</code> 与“零值”比较的<code>if</code>语句：<br/>
标准答案示例：</p>

<pre><code>const float EPSINON = 0.00001;
if ((x &gt;= - EPSINON) &amp;&amp; (x &lt;= EPSINON)
</code></pre>

<p>不可将浮点变量用<code>==</code>或<code>！=</code>与数字比较，应该设法转化成<code>&gt;=</code>或<code>&lt;=</code>此<br/>
类形式。<br/>
如下是错误的写法，不得分。</p>

<pre><code>if (x == 0.0)
if (x != 0.0)
</code></pre>

<p>(3)请写出 <code>char *p</code> 与“零值”比较的 <code>if</code> 语句：<br/>
标准答案：对于空指针值，用<code>#NULL</code> 表示</p>

<pre><code>if (p == NULL)
if (p != NULL)
</code></pre>

<p>如下写法均属不良风格，不得分。</p>

<pre><code>if (p == 0)
if (p != 0)
if (p)
if (!)
</code></pre>

<h2 id="toc_1">2.32位C++程序，计算sizeof的值</h2>

<p><img src="media/15066079292359/15066082580402.jpg" alt=""/></p>

<p><code>sizeof(str) = 6</code>; //字符串数组，大小是六个字节(加上&#39;\0&#39;共六个)。<br/>
<code>sizeof(p) = 4</code>; // 指针的内容就是一个指向目标地址的整数，所以不管指向<code>char</code>、<code>int</code>还是其他，32位机指针一律是4个字节。</p>

<p><code>sizeof(n) = 4</code>; // <code>int</code>型变量是4个字节。<br/>
右侧：<br/>
<code>sizeof(str) = 4</code>; // 这里的str不再是100字节。当数组作为函数的参数进行传递时，也就是作为参数入栈，那么该数组自动退化成同类型的指针。<br/>
<code>sizeof(p) = 4</code>; // 同样，指针类型一律4个字节。</p>

<h2 id="toc_2">3. long a=0x801010; a+5=?</h2>

<p>0x801010 用二进制表示 为：“ 1000 0000 0001 0000 0001 0000” ，十进制的值为 8392720 ，再加 上 5 就是 8392725 。</p>

<h2 id="toc_3">4. 用变量 <code>a</code> 给出下面的定义</h2>

<ul>
<li>一个有 10 个指针的数组，该指针是指向一个整型数的;</li>
<li>一个指向有 10 个整型数数组的指针 ;</li>
<li>一个指向函数的指针，该函数有一个整型参数并返 回一个整型数 ;</li>
<li><p>一个有 10 个指针的数组，该指针指向一个函数，该 函数有一个整型参数并返回一个整型数 ;</p></li>
<li><p>int * a[10]; </p></li>
<li><p>int (*a)[10]</p></li>
<li><p>int (*a)(int); </p></li>
<li><p>int (*a[10])(int)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GAN]]></title>
    <link href="http://larryim.cc/15058297239665.html"/>
    <updated>2017-09-19T22:02:03+08:00</updated>
    <id>http://larryim.cc/15058297239665.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Maximum Likelihood Estimation</a>
<ul>
<li>
<a href="#toc_1">$P_G(x;theta)$ is a NN</a>
</li>
</ul>
</li>
<li>
<a href="#toc_2">Basic Idea of GAN</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Maximum Likelihood Estimation</h2>

<p>Given a data distribution \(P_{data}(x)\). We want to find \(\theta\) such that \(P_G(x;\theta)\) close to \(P_{data}(x)\). Here, \(P_G(x;\theta)\)  is a distribution (e.g. Gaussian Mixture Model) parameterized by \(\theta\) (e.g. means and variances of the Gaussians).</p>

<p>Likelihood of generating the samples can be expressed by</p>

<p>\[\begin{equation}<br/>
L=\prod\limits_{i=1}^mP_G(x^i;\theta)<br/>
\end{equation}<br/>
\]</p>

<p>The problem can be restated that finding \(\theta^*\) maximizing the likelihood:</p>

<p>\[\begin{equation}<br/>
\theta^* = arg \max\limits_\theta \prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \log\prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \prod\limits_{i=1}^m \log P_G(x^i;\theta)\\<br/>
\approx arg \max\limits_\theta E_{x\sim P_{data}}^m [\log P_G(x;\theta)]\\<br/>
= arg \max\limits_\theta\int_xP_{data}(x)\log P_G(x;\theta)dx - \int_xP_{data}(x)\log P_{data}(x) dx \\<br/>
= arg \min\limits_\theta KL(P_{data}(x)||P_G(x;\theta))<br/>
\end{equation}<br/>
\]</p>

<p><strong>KL Divergence</strong>:  <code>KL Divergence</code> is  a measure of how one probability distribution diverges from a second expected probability distribution. For distributions \(P\) and \(Q\) of a continuous random variable, the Kullback-Leibler divergence is defined to be the intergral:</p>

<p>\[\begin{equation}<br/>
 D_{KL}(P|Q)=\int_{-\infty}^{\infty}p(x)\log\frac{p(x)}{q(x)}dx<br/>
 \end{equation}<br/>
 \]</p>

<p>Where \(p\) and \(q\) denote the densities of \(P\) and \(Q\).</p>

<h3 id="toc_1">\(P_G(x;\theta)\) is a NN</h3>

<p>It is hard to use Gaussian Mixture Model as \(P_G(x;\theta)\) to approximate \(P_{data}(x;\theta)\), because of the complicity of the data. A very good natural idea is trying to using neural network which is very powerful.</p>

<p><img src="media/15058297239665/Screen%20Shot%202017-09-19%20at%2010.36.46%20PM.png" alt="NN"/></p>

<p>However, it is Hard to learn by <code>maximum likelihood</code>.  <code>GAN</code> solves the problem.</p>

<h2 id="toc_2">Basic Idea of GAN</h2>

<ul>
<li>Generator G

<ul>
<li>G is a function, input \(z\), output \(x\)</li>
<li>Given a prior distribution \(P_{prior}(z)\), a probability distribution \(P_G (x)\) is defined by function G</li>
</ul></li>
<li>Discriminator D

<ul>
<li>D is a function, input \(x\), output scalar</li>
<li>Evaluate the “difference” between \(P_G(x)\) and \(P_{data}(x)\)</li>
</ul></li>
</ul>

<p>Objective: Given function \(V(G, D)\), to find \(G^* = arg \min \limits_G\max\limits_DV(G,D)\)</p>

<p>\[\begin{equation}<br/>
V = E_{x\sim P_{data}}[\log D(x)] + E_{x\sim P_G}[\log (1-D(x)]<br/>
\end{equation}<br/>
\]</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence">KL Divergence WEKIPEDIA</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient Methods and Hardware for Deep Learning]]></title>
    <link href="http://larryim.cc/15057176549019.html"/>
    <updated>2017-09-18T14:54:14+08:00</updated>
    <id>http://larryim.cc/15057176549019.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Challenges</h2>

<ul>
<li>Model Size</li>
<li>Speed</li>
<li>Energy Efficiency</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习路线]]></title>
    <link href="http://larryim.cc/machine_learning_route.html"/>
    <updated>2017-09-18T10:12:47+08:00</updated>
    <id>http://larryim.cc/machine_learning_route.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15057007673036/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" alt="机器学习"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SqueezeNet]]></title>
    <link href="http://larryim.cc/SqueezeNet.html"/>
    <updated>2017-09-17T13:30:15+08:00</updated>
    <id>http://larryim.cc/SqueezeNet.html</id>
    <content type="html"><![CDATA[
<p><code>SqueezeNet</code> achieves <code>AlexNet</code>-level accuracy on ImageNet with 50x fewer parameters, offering at least three advantages:</p>

<ul>
<li>Less communications across servers</li>
<li>less bandwidth to export model</li>
<li>more feasible to deploy</li>
</ul>

<p>The <code>SqueezeNet</code>architecture is available for download <a href="https://github.com/DeepScale/SqueezeNet">here</a></p>

<h2 id="toc_0">Strategy</h2>

<ul>
<li>Replace \(3\times3\) filters with \(1\times1\) filters: 9X fewer parameters needed</li>
<li>Decrease the number of input channels to \(3\times3\) filters</li>
<li>Downsample late: large activation maps lead to higher accuracy.</li>
</ul>

<h3 id="toc_1">The Fire module</h3>

<p>A Fire module is comprised of a <code>squeeze layer</code> (which has only 1x1 filters), feeding into an <code>expand layer</code> that has a mix of 1x1 and 3x3 convolution filters.</p>

<p><img src="media/15056262155227/fire%20module.png" alt="fire module"/></p>

<p>The following function defines <code>Fire Module</code> by TensorFlow in Python</p>

<pre><code class="language-python">def fire_module(x,inp,sp,e11p,e33p):
    with tf.variable_scope(&quot;fire&quot;):
        with tf.variable_scope(&quot;squeeze&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,inp,sp])
            b = tf.get_variable(&quot;bias&quot;,shape=[sp])
            s = tf.nn.conv2d(x,W,[1,1,1,1],&quot;VALID&quot;)+b
            s = tf.nn.relu(s)
        with tf.variable_scope(&quot;e11&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,sp,e11p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e11p])
            e11 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;VALID&quot;)+b
            e11 = tf.nn.relu(e11)
        with tf.variable_scope(&quot;e33&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[3,3,sp,e33p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e33p])
            e33 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;SAME&quot;)+b
            e33 = tf.nn.relu(e33)
        return tf.concat([e11,e33],3)
</code></pre>

<h3 id="toc_2">The SqueezeNet Architecture</h3>

<p><code>SqueezeNet</code> begins with a standalone convolution layer (conv1), followed by 8 <code>Fire modules</code> (ﬁre2-9), ending with a final conv layer (conv10).</p>

<p><img src="media/15056262155227/Squeezenet_Architecture.png" alt="Squeezenet_Architecture"/></p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Iandola F N, Han S, Moskewicz M W, et al. 2016. SqueezeNet- AlexNet-level accuracy with 50x fewer parameters and &lt; 0.5 MB model size</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing and Understanding CNN]]></title>
    <link href="http://larryim.cc/Visualizing_and_understaning_CNN.html"/>
    <updated>2017-09-17T18:42:40+08:00</updated>
    <id>http://larryim.cc/Visualizing_and_understaning_CNN.html</id>
    <content type="html"><![CDATA[
<ol>
<li><strong>Saliency Maps</strong>: Saliency maps are a quick way to tell which part of the image influenced the classification decision made by the network.</li>
<li><strong>Fooling Images</strong>: We can perturb an input image so that it appears the same to humans, but will be misclassified by the pretrained network.</li>
<li><strong>Class Visualization</strong>: We can synthesize an image to maximize the classification score of a particular class; this can give us some sense of what the network is looking for when it classifies images of that class.</li>
</ol>

<h2 id="toc_0">Saliency Map</h2>

<p>A <strong>saliency map</strong> tells us the degree to which each pixel in the image affects the classification score for that image. To obtain <code>saliency map</code>, first compute the gradient of the unnormalized score corresponding to the correct class (which is a scalar) with respect to the pixels of the image. If the image has shape <code>(H, W, 3)</code> then this gradient will also have shape <code>(H, W, 3)</code>; for each pixel in the image, this gradient tells us the amount by which the classification score will change if the pixel changes by a small amount. Second, In the case of the multi-channel (e.g. RGB) image, take the absolute value of this gradient, then take the maximum value over the 3 input channels; the final saliency map thus has shape <code>(H, W)</code> and all entries are nonnegative.</p>

<h5 id="toc_1">The <code>Saliency Map</code> learnt by <code>SqueezeNet</code>, trained on the data of ImageNet ILSVRC 2012 Classification dataset are as follows:</h5>

<p><img src="media/15056449604256/saliency_map.png" alt="saliency_map"/></p>

<h2 id="toc_2">Fooling images</h2>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman. &quot;Deep Inside Convolutional Networks- Visualising Image Classification Models and Saliency Maps</li>
<li>Szegedy et al, &quot;Intriguing properties of neural networks&quot;, ICLR 2014</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recurrent Neural Network]]></title>
    <link href="http://larryim.cc/15050418178399.html"/>
    <updated>2017-09-10T19:10:17+08:00</updated>
    <id>http://larryim.cc/15050418178399.html</id>
    <content type="html"><![CDATA[
<p>Recurrent Neural Network (循环神经网络)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Captioning]]></title>
    <link href="http://larryim.cc/15050120680855.html"/>
    <updated>2017-09-10T10:54:28+08:00</updated>
    <id>http://larryim.cc/15050120680855.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Vanilla RNN</a>
</li>
<li>
<a href="#toc_1">LSTM</a>
</li>
<li>
<a href="#toc_2">COCO</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Vanilla RNN</h2>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.08%20PM.png" alt="Vanilla RNN gradient flow"/></p>

<h2 id="toc_1">LSTM</h2>

<p>Long Short Term Memory (LSTM)</p>

<p>Backward flow of gradients in RNN can explode or vanish.</p>

<p>Exploding is controlled with gradient clipping. Vanishing is controlled with additive interactions (LSTM)</p>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.27%20PM.png" alt="LSTM"/></p>

<h2 id="toc_2">COCO</h2>

<p><code>COCO</code>（Common Objects in Context） is a large-scale <code>object detection</code>(物体检测), <code>semantic segmentation</code>(语义分割), and captioning dataset. <code>COCO</code> has several main features: <code>Object segmentation</code>, <code>Recognition in context</code>.</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Tsung Y L, Michael M, Serge B, et al. Microsoft COCO: Common Objects in Context.  arXiv:<a href="https://arxiv.org/abs/1405.0312">1405.0312</a></li>
<li>Karpathy et al. Deep Visual-Semantic Alignments for Generating Image Descriptions, CVPR 2015</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning (10): Large Scale Machine Learning]]></title>
    <link href="http://larryim.cc/large_scale_machine_learning.html"/>
    <updated>2017-09-09T14:57:27+08:00</updated>
    <id>http://larryim.cc/large_scale_machine_learning.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Learning with Large Datasets</a>
</li>
<li>
<a href="#toc_1">Stochastic Gradient Descent</a>
<ul>
<li>
<a href="#toc_2">Mini-Batch Gradient Descent</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">Stochastic Gradient Descent Convergence</a>
</li>
<li>
<a href="#toc_4">Online Learning</a>
</li>
<li>
<a href="#toc_5">Map Reduce and Data Parallelism</a>
</li>
</ul>


<h2 id="toc_0">Learning with Large Datasets</h2>

<p>We mainly benefit from a very large dataset when our algorithm has high variance when m is small. Recall that if our algorithm has high bias, more data will not have any benefit.</p>

<p>Datasets can often approach such sizes as m = 100,000,000. In this case, our gradient descent step will have to make a summation over all one hundred million examples. We will want to try to avoid this -- the approaches for doing so are described below.</p>

<h2 id="toc_1">Stochastic Gradient Descent</h2>

<p>Stochastic gradient descent is an alternative to classic (or batch) gradient descent and is more efficient and scalable to large data sets.</p>

<p>Stochastic gradient descent is written out in a different but similar way:</p>

<p>\(cost(\theta,(x^{(i)}, y^{(i)})) = \dfrac{1}{2}(h_{\theta}(x^{(i)}) - y^{(i)})^2\)</p>

<p>The only difference in the above cost function is the elimination of the m constant within \(\dfrac{1}{2}\).</p>

<p>\(J_{train}(\theta) = \dfrac{1}{m} \displaystyle \sum_{i=1}^m cost(\theta, (x^{(i)}, y^{(i)}))\)</p>

<p>\(J_{train}\) is now just the average of the cost applied to all of our training examples.</p>

<p>The algorithm is as follows</p>

<ol>
<li><p>Randomly &#39;shuffle&#39; the dataset</p></li>
<li><p>For \(i = 1\dots m\)</p></li>
</ol>

<p>\(\Theta_j := \Theta_j - \alpha (h_{\Theta}(x^{(i)}) - y^{(i)}) \cdot x^{(i)}_j\)</p>

<p>This algorithm will only try to fit one training example at a time. This way we can make progress in gradient descent without having to scan all m training examples first. Stochastic gradient descent will be unlikely to converge at the global minimum and will instead wander around it randomly, but usually yields a result that is close enough. Stochastic gradient descent will usually take 1-10 passes through your data set to get near the global minimum.</p>

<h3 id="toc_2">Mini-Batch Gradient Descent</h3>

<p>Mini-batch gradient descent can sometimes be even faster than stochastic gradient descent. Instead of using all m examples as in batch gradient descent, and instead of using only 1 example as in stochastic gradient descent, we will use some in-between number of examples b.</p>

<p>Typical values for b range from 2-100 or so.</p>

<p>For example, with b=10 and m=1000:</p>

<p>Repeat:</p>

<p>For \(i = 1,11,21,31,\dots,991\)</p>

<p>\(\theta_j := \theta_j - \alpha \dfrac{1}{10} \displaystyle \sum_{k=i}^{i+9} (h_\theta(x^{(k)}) - y^{(k)})x_j^{(k)}\)</p>

<p>We&#39;re simply summing over ten examples at a time. The advantage of computing more than one example at a time is that we can use vectorized implementations over the b examples.</p>

<h2 id="toc_3">Stochastic Gradient Descent Convergence</h2>

<p>How do we choose the learning rate α for stochastic gradient descent? Also, how do we debug stochastic gradient descent to make sure it is getting as close as possible to the global optimum?</p>

<p>One strategy is to plot the average cost of the hypothesis applied to every 1000 or so training examples. We can compute and save these costs during the gradient descent iterations.</p>

<p>With a smaller learning rate, it is <strong>possible</strong> that you may get a slightly better solution with stochastic gradient descent. That is because stochastic gradient descent will oscillate and jump around the global minimum, and it will make smaller random jumps with a smaller learning rate.</p>

<p>If you increase the number of examples you average over to plot the performance of your algorithm, the plot&#39;s line will become smoother.</p>

<p>With a very small number of examples for the average, the line will be too noisy and it will be difficult to find the trend.</p>

<p>One strategy for trying to actually converge at the global minimum is to <strong>slowly decrease α over time</strong> . For example \(\alpha = \dfrac{\text{const1}}{\text{iterationNumber + const2}}\)</p>

<p>However, this is not often done because people don&#39;t want to have to fiddle with even more parameters.</p>

<h2 id="toc_4">Online Learning</h2>

<p>With a continuous stream of users to a website, we can run an endless loop that gets (x,y), where we collect some user actions for the features in x to predict some behavior y.</p>

<p>You can update θ for each individual (x,y) pair as you collect them. This way, you can adapt to new pools of users, since you are continuously updating theta.</p>

<h2 id="toc_5">Map Reduce and Data Parallelism</h2>

<p>We can divide up batch gradient descent and dispatch the cost function for a subset of the data to many different machines so that we can train our algorithm in parallel.</p>

<p>You can split your training set into z subsets corresponding to the number of machines you have. On each of those machines calculate \(\displaystyle \sum_{i=p}^{q}(h_{\theta}(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)}\), where we&#39;ve split the data starting at p and ending at q.</p>

<p>MapReduce will take all these dispatched (or &#39;mapped&#39;) jobs and &#39;reduce&#39; them by calculating:</p>

<p>\(\Theta_j := \Theta_j - \alpha \dfrac{1}{z}(temp_j^{(1)} + temp_j^{(2)} + \cdots + temp_j^{(z)})\)</p>

<p>For all \(j = 0, \dots, n\).</p>

<p>This is simply taking the computed cost from all the machines, calculating their average, multiplying by the learning rate, and updating theta.</p>

<p>Your learning algorithm is MapReduceable if it can be <u>expressed as computing sums of functions over the training set</u> . Linear regression and logistic regression are easily parallelizable.</p>

<p>For neural networks, you can compute forward propagation and back propagation on subsets of your data on many machines. Those machines can report their derivatives back to a &#39;master&#39; server that will combine them.</p>

]]></content>
  </entry>
  
</feed>
