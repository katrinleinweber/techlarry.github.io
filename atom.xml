<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[techlarry]]></title>
  <link href="http://larryim.cc/atom.xml" rel="self"/>
  <link href="http://larryim.cc/"/>
  <updated>2017-10-25T10:54:43+08:00</updated>
  <id>http://larryim.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Techniques: Support Vector Machine (SVM)]]></title>
    <link href="http://larryim.cc/machine_learning_techniques_SVM.html"/>
    <updated>2017-10-24T19:43:35+08:00</updated>
    <id>http://larryim.cc/machine_learning_techniques_SVM.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Linear SVM</h2>

<p><img src="media/15088454152744/large_margin.png" alt="large_margin"/></p>

<p>Our goal is to find <code>largest-margin</code> separating hyperplane.</p>

<p><strong>Distance to Hyperplane</strong>: distance(\(x,b,w) = \frac{1}{\lVert w\rVert}|w^Tx+b|\)</p>

<h3 id="toc_1">Standard Large-Margin Problem</h3>

<p>Now the problem becomes:<br/>
<img src="media/15088454152744/hyperplane%20distance.png" alt="hyperplane distance"/></p>

<p><img src="media/15088454152744/standard%20problem.png" alt="standard proble"/></p>

<h3 id="toc_2">Support Vector Machine</h3>

<p><img src="media/15088454152744/svm%20with%20qp%20solver.png" alt="svm with qp solve"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations - Mathematical Foundations]]></title>
    <link href="http://larryim.cc/15088244818278.html"/>
    <updated>2017-10-24T13:54:41+08:00</updated>
    <id>http://larryim.cc/15088244818278.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">(1) The Learning Problem</a>
<ul>
<li>
<a href="#toc_1">Formalize the Learning Problem</a>
</li>
<li>
<a href="#toc_2">Machine Learning and other Fields</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">(2) Learning to answer Yes or No</a>
<ul>
<li>
<a href="#toc_4">Perceptron Hypothesis Set</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">(3) Types of Learning</a>
<ul>
<li>
<a href="#toc_6">Learning with Different Output Space</a>
</li>
<li>
<a href="#toc_7">Learning with Different Data Label</a>
</li>
<li>
<a href="#toc_8">Learning with Different Protocol</a>
</li>
<li>
<a href="#toc_9">Learning with Different Input Space</a>
</li>
</ul>
</li>
<li>
<a href="#toc_10">(4) Feasibility of Learning</a>
<ul>
<li>
<a href="#toc_11">Learning outside training examples</a>
</li>
<li>
<a href="#toc_12">In and out of sample error</a>
</li>
<li>
<a href="#toc_13">Connection to Real Learning</a>
<ul>
<li>
<a href="#toc_14">Bound of BAD data</a>
</li>
<li>
<a href="#toc_15">The Statistical Learning Flow</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_16">(5) Training versus Testing</a>
<ul>
<li>
<a href="#toc_17">Dichotomy</a>
</li>
<li>
<a href="#toc_18">Growth function</a>
</li>
<li>
<a href="#toc_19">Shatter and Break point</a>
</li>
</ul>
</li>
<li>
<a href="#toc_20">(6) Theory of generalization</a>
</li>
<li>
<a href="#toc_21">Bounding Function</a>
</li>
<li>
<a href="#toc_22">(7) VC dimension</a>
<ul>
<li>
<a href="#toc_23">Interpreting VC Dimension</a>
</li>
</ul>
</li>
</ul>


<p>The course, called Machine Learning Foundations - Mathematical Foundations, is taught by Hsuan-Tien Lin on Cousera <a href="https://www.coursera.org/learn/ntumlone-mathematicalfoundations/home/info">course info page</a>.</p>

<p>As the name of the course indicates, the course teaches the most fundamental algorithmic, theoretical, mathematical background of machine learning.</p>

<p>The article summaries the key concepts and conclusions in the course. Each section in the article corresponding to one chapter in the course.</p>

<h2 id="toc_0">(1) The Learning Problem</h2>

<h3 id="toc_1">Formalize the Learning Problem</h3>

<p><strong>Basic Notations</strong>:</p>

<ul>
<li>input: \(x\in\mathcal{X}\)</li>
<li>output: \(y\in\mathcal{Y}\)</li>
<li>unknown pattern to be learned \(\Leftrightarrow\) target function:
\(f:\mathcal{X}\rightarrow\mathcal{Y}\) </li>
<li>data \(\Leftrightarrow\) training examples: \(\mathcal{D}={(x_1,y_1),(x_2,y_2),...,(x_N,y_N)}\)</li>
<li>hypothesis \(\Leftrightarrow\) skill with hopefully good performance: \(g: \mathcal{X}\rightarrow \mathcal{Y}\)</li>
</ul>

<p><strong>Machine Learning: use data \(\mathcal{D}\) to compute hypothesis \(g\) that approximates target \(f\).</strong></p>

<p><img src="media/15087235092833/learing%20demo.png" alt="learing demo"/></p>

<h3 id="toc_2">Machine Learning and other Fields</h3>

<ul>
<li>Machine Learning: use data to compute hypothesis \(g\) that approximates target \(f\)</li>
<li>Data Mining: Use (huge) data to find property that is interesting</li>
</ul>

<p>\(\Longleftrightarrow\)If &#39;interesting property&#39; same as &#39;hypothesis that approximate target&#39;, Machine Learning = Data Mining<br/>
\(\Longleftrightarrow\) If &#39;interesting property&#39; related to &#39;hypothesis that approximate target&#39;, data mining can help machine learning.<br/>
\(\Longleftrightarrow\) traditional data mining also focuses on efficient computation in large database.</p>

<h2 id="toc_3">(2) Learning to answer Yes or No</h2>

<h3 id="toc_4">Perceptron Hypothesis Set</h3>

<p>Vector Form of Perceptron Hypothesis:</p>

<p>\[h(x) = \text{sign}(\sum\limits_{i=0}^dw_ix_i)=\text{sign}(W^Tx)\]</p>

<h2 id="toc_5">(3) Types of Learning</h2>

<h3 id="toc_6">Learning with Different Output Space</h3>

<ul>
<li>binary classification: \(\mathcal{Y}=\{-1,+1\}\)</li>
<li>multiclass classification: \(\mathcal{Y}=\{1, 2,..., K\}\)</li>
<li>regression: \(\mathcal {Y} =\mathbb{R}\)</li>
<li>structured learning: \(\mathcal{Y}=\) structures</li>
</ul>

<h3 id="toc_7">Learning with Different Data Label</h3>

<ul>
<li>supervised: all \(y_n\)</li>
<li>unsupervised: no \(y_n\)</li>
<li>semi-supervised: some \(y_n\)</li>
<li>reinforcement: implicit \(y_n\) by goodness (\(\hat y_n\))</li>
</ul>

<h3 id="toc_8">Learning with Different Protocol</h3>

<p>Protocol \(\Longleftrightarrow\) Learning Philosophy.</p>

<ul>
<li>batch: all known data</li>
<li>online: sequential (passive) data</li>
<li>active: strategically-observed data</li>
</ul>

<h3 id="toc_9">Learning with Different Input Space</h3>

<ul>
<li>concrete: sophisticated (and related) physical meaning e.g. user features(age, sex, education level)</li>
<li>raw: simple physical meaning e.g. image features</li>
<li>abstract: no (or little) physical meaning e.g. user/image IDs</li>
</ul>

<h2 id="toc_10">(4) Feasibility of Learning</h2>

<h3 id="toc_11">Learning outside training examples</h3>

<p><strong>No Free Lunch</strong>: Learning from \(D\) (\(D\): training examples) (to infer something outside \(D\)) is doomed to fail if any unknown \(f\) can happen.</p>

<ul>
<li>\(g\approx f\) inside \(D\): Possible!</li>
<li>\(g\approx f\) outside \(D\): Impossible!</li>
</ul>

<h3 id="toc_12">In and out of sample error</h3>

<p>For any fixed \(h\), in &#39;big&#39; data (N large), <code>in-sample error</code> \(E_{in}(h)\) is probably close to <code>out-of-sample error</code> \(E_{out}(h)\) (within \(\epsilon\)):</p>

<p>\(P(|E_{in}(h)-E_{out}(h)|&gt; \epsilon) \le 2\exp(-2\epsilon^2N)\)</p>

<p>The equation above is called <code>Hoeffding&#39;s Inequality</code>. The statement \(E_{in}(h)=E_{out}(h)\) is <code>probably approximately correct</code> (<strong>PAC</strong>, 大概近似正确).</p>

<p>If large \(N\), we can <strong>probably</strong> infer unknown \(E_{out}(h)\) by known \(E_{in}(h)\).</p>

<p><code>in-sample error</code> \(E_{in}(h)\) denotes orange fraction in sample, <code>out-of-sample error</code> \(E_{out}(h)\) denotes orange probability in bin, When we want to infer the orange probability in bin.</p>

<p><img src="media/15087197108957/Ein_Eout.png" alt="Ein_Eout"/></p>

<h3 id="toc_13">Connection to Real Learning</h3>

<p><strong>Bad data for One \(h\)</strong>: </p>

<p>\(E_{out}(h)\) and \(E_{in}(h)\) far away: e.g. \(E_{out}\) big (far from \(f\)), but \(E_{in}\) small (correct on most examples).</p>

<p><strong>Bad data for many \(h\)</strong>:</p>

<p>\(\Leftrightarrow\) no &#39;freedom of choices&#39; by learning algorithm \(\mathcal{A}\)<br/>
\(\Leftrightarrow\) there exists some \(h\) such that \(E_{out}(h)\) and \(E_{in}(h)\) far away</p>

<h4 id="toc_14">Bound of BAD data</h4>

<p>Form \(M\) hypotheses, what is the bound of \(\mathbb{P}_{\mathcal{D}} [\text{BAD} \; \mathcal{D}]\)</p>

<p><img src="media/15087197108957/bound%20of%20bad%20data.png" alt="bound of bad data"/></p>

<p>The <code>union bound</code> <a href="https://en.wikipedia.org/wiki/Boole%27s_inequality">WIKI</a> (布尔不等式), also known as <code>Boole&#39;s inequality</code>, says that for any finite or countable set of events, the probability that at least one of the events happens is no greater than the sum of the probabilities of the individual events.</p>

<h4 id="toc_15">The Statistical Learning Flow</h4>

<p>If \(|\mathcal{H}|=M\) finite, \(N\) large enough, for whatever \(g\) picked by \(\mathcal{A}\), \(E_{out}(g)\approx E_{in}(g)\)</p>

<p>if \(\mathcal{A}\) finds one \(g\) with \(E_{in}(g)\approx 0\),<br/>
PAC gaurantee for \(E_{out}(g)\approx 0\) \(\rightarrow\) learning possilbe!</p>

<h2 id="toc_16">(5) Training versus Testing</h2>

<p>For batch and supervised binary classification, \(g\approx f\Longleftrightarrow E_{out}(g)\approx 0\) achieved through \(E_{out}(g)\approx E_{in}(g)\) and \(E_{in}(g)\approx 0\).</p>

<p>In order to achieve two conditions above, learning split to two central questions:</p>

<ul>
<li>Can we make sure that \(E_{out}(g)\) is close enough to \(E_{in}(g)\)?</li>
<li>Can we make \(E_{in}(g)\) small enough?</li>
</ul>

<p>In order to understand trade-off for &#39;right&#39; \(\mathcal{H}\), we establish a finite quantity that replace \(M\),</p>

<p>\[\mathbb{P}[|E_{in}9g)-E_{out}(g)|&gt;\epsilon] \le 2\cdot m_\mathcal{H} \cdot \exp(-2\epsilon^2 N)\]</p>

<h3 id="toc_17">Dichotomy</h3>

<p>Define hypothesis set \(\mathcal{H}\):</p>

<p>\(\mathcal{H}=\{\text{hypothesis}\quad h: \mathcal{X}\rightarrow{\text{x,o}}\}\)</p>

<p>And we call hypothesis &#39;limited&#39; to the eyes of \(x_1, x_2,..., x_N\) a dichtonomy:</p>

<p>\[h(x_1,x_2,...,x_N)=(h(x_1),h(x_2),...,h(x_N)) \in\{\text{x,o}\}^N\]</p>

<p>Corresponding dichotomies \(\mathcal{H}(x_1,x_2,...,x_N)\) is all dichotomies implemented by \(\mathcal{H}\) on \(x_1,x_2,...,x_N\):</p>

<p><strong>Note</strong>: hypotheses \(\mathcal{H}\) and \(\mathcal{H}(x_1,x_2,...,x_N)\) are different!</p>

<h3 id="toc_18">Growth function</h3>

<p>Growth functions remove its dependence on inputs \((x_1,x_2,...,x_N)\), by taking max of all possible \((x_1,x_2,...,x_N)\): </p>

<p>\[m_\mathcal{H}(N) = \max\limits_{x_1,x_2,...,x_N\in\mathcal{X}}|\mathcal{H}(x_1,x_2,...,x_N)|\]</p>

<p>Growth function is finite, its upper-bound is \(2^N\).</p>

<p>Growth functions in different situation:</p>

<ul>
<li>positive rays: \(m_\mathcal{H}(N)=N+1\)</li>
<li>positive intervals: \(m_\mathcal{H}(N)=\frac{1}{2}N^2+\frac{1}{2}N+1\)</li>
<li>convex sets: \(m_\mathcal{H}(N)=2^N \)</li>
<li>2D perceptrons: \(m_\mathcal{H}(N)=2^N \text{in some cases}\)</li>
</ul>

<h3 id="toc_19">Shatter and Break point</h3>

<p><strong>If no \(k\) inputs can be shattered by \(\mathcal{H}\) , call \(k\) a break point for \(\mathcal{H}\).</strong></p>

<p>if \(m_H(K) &lt; 2^k\), call k a <strong>break point</strong> for \(\mathcal{H}\).</p>

<ul>
<li>since \(k\) is a break point, \(k+1, k+2, k+3,...,\) also break points</li>
</ul>

<p>minimum break points for different \(\mathcal{H}\):</p>

<ul>
<li>positive rays: k=2</li>
<li>positive intervals: k=3</li>
<li>convex sets: none</li>
<li>2D perceptrons: k=4</li>
</ul>

<h2 id="toc_20">(6) Theory of generalization</h2>

<h2 id="toc_21">Bounding Function</h2>

<p>Bounding Function \(B(N,k)\) is maximum possible \(m_\mathcal{H}(N)\) when break point \(=k\).</p>

<p>\[B(N,k) \le \sum\limits_{i=0}^{k-1} C^N_i\]</p>

<p>For \(fixed k, B(N,k)\) upper bounded by \(ploy(N)\), \(\rightarrow m_{\mathcal{H}}(N)\) is \(poly(N)\) if break point exists.</p>

<p>When N large enough, </p>

<p>\[P[\exists h\in \mathcal{H} s.t. |E_{in}(h)-E_{out}(h)|&gt; \epsilon]\le 4 m_\mathcal{H}(2N)\exp(-\frac{1}{8}\epsilon^2N)\]</p>

<p>The above equation called <strong>Vapnik-Chervonenkis (VC) bound</strong>.</p>

<h2 id="toc_22">(7) VC dimension</h2>

<p>VC dimension, the formal name of maximum non-break point, denoted \(d_{VC}(\mathcal{H})\), is </p>

<p>\[\text{largest N for which } m_{\mathcal{H}}(N)=2^N\]</p>

<ul>
<li>positive rays: \(d_{VC}=1\)</li>
<li>positive intervals: \(d_{VC}=2\)</li>
<li>convex sets: \(d_{VC}= \infty \)</li>
<li>2D perceptrons: \(d_{VC}=3\)</li>
<li>d dimension Perceptrons: \(d_{VC}=d+1\)</li>
</ul>

<h3 id="toc_23">Interpreting VC Dimension</h3>

<p><img src="media/15088244818278/the%20vc%20message.png" alt="the vc message"/><br/>
<img src="media/15088244818278/the%20vc%20message2.png" alt="the vc message2"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[主动学习]]></title>
    <link href="http://larryim.cc/active_learning_intro.html"/>
    <updated>2017-10-23T17:11:38+08:00</updated>
    <id>http://larryim.cc/active_learning_intro.html</id>
    <content type="html"><![CDATA[
<p>主动学习算法通过迭代抽样，主动寻找有利于提升效果的样本，从而减少了训练集的大小。</p>

<p>获取训练样本不仅费时、费力，而且训练集包含大量的冗余样本。</p>

<p>主动学习算法主要分为两阶段：第一阶段为<strong>初始化阶段</strong>，随机从未标注样本中选取小部分，由督导者\(\mathcal{S}\)标注，作为训练集建立初始分类器模型；第二阶段为<strong>循环查询阶段</strong>，督导者\(\mathcal{S}\)从未标注样本集\(U\)中，按照某种查询标准\(Q\)，选取一定的未标注样本进行标注，并加到训练样本集\(L\)中，重新训练分类器，直至达到训练停止标准为止。</p>

<h1 id="toc_0">Reference</h1>

<ul>
<li>LIU Kang, QIAN Xu, WANG Ziqiang. Survey on active learning algorithms. Computer Engineering and Applications, 2012, 48（34）：1-4.</li>
<li>Zongwei Zhou1, Jae Shin1, Lei Zhang, et al. 2017. Fine-tuning Convolutional Neural Networks for Biomedical Image Analysis: Actively and Incrementally. CVPR. <a href="http://openaccess.thecvf.com/content_cvpr_2017/papers/Zhou_Fine-Tuning_Convolutional_Neural_CVPR_2017_paper.pdf">pdf</a> </li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON]]></title>
    <link href="http://larryim.cc/15086547919641.html"/>
    <updated>2017-10-22T14:46:31+08:00</updated>
    <id>http://larryim.cc/15086547919641.html</id>
    <content type="html"><![CDATA[
<p><code>JSON</code> stands for <code>Javascript Object Notation</code>. It is a lightweight data interchange format, similar to <code>XML</code>, <code>SOAP</code> and <code>YAML</code>.</p>

<p><code>JSON</code> syntax is based around three simple data types:</p>

<ul>
<li>Name-value pair</li>
<li>JSON Object: a collection of name-value pairs or Arrays encased in curly brackets.</li>
<li>JSON Array: a lift of values encased in square brackets.</li>
</ul>

<p>E.g. a student in an university with basic information: name, id number, GPA etc:</p>

<pre><code class="language-python">
{
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}
</code></pre>

<h2 id="toc_0">Python之<code>json</code>模块</h2>

<p>Python的<code>json</code>模块可以用来编码和解码JSON数据。其最主要的两个函数是<code>json.dumps()</code>(encoding,编码)和<code>json.loads()</code>(decoding, 解码).</p>

<pre><code class="language-python">import json

student_info = {
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}

student_info_json = json.dumps(student_info)

print(student_info_json)
</code></pre>

<pre><code>{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}
</code></pre>

<p>如果你要处理的是文件而不是字符串，你可以使用<code>json.dump()</code> 和 <code>json.load()</code> 来编码和解码<code>JSON</code>数据。例如：</p>

<pre><code class="language-python"># Writing JSON data
with open(&#39;student_info.json&#39;, &#39;w&#39;) as f:
    json.dump(student_info_json, f)
 
# Reading data back
with open(&#39;student_info.json&#39;, &#39;r&#39;) as f:
    data = json.load(f)
data
</code></pre>

<pre><code>&#39;{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}&#39;
</code></pre>

<h2 id="toc_1">Binary JSON - BSON</h2>

<p><code>BSON</code> /ˈbiːsən/, standing for <code>Binary JSON</code>, is a computer data interchange format used mainly as a data storage and network transfer format in the <code>MongoDB</code> database.</p>

<pre><code class="language-python">import bson      #installed with the pymongo package
data = bson.decode_file_iter(open(&#39;example.bson&#39;, &#39;rb&#39;))
</code></pre>

<h2 id="toc_2">Reference</h2>

<ul>
<li>Brad Miller, David Ranum. 2013. Problem Solving with Algorithms and Data Structures.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cdiscount’s Image Classification Challenge]]></title>
    <link href="http://larryim.cc/cdiscount_challenge.html"/>
    <updated>2017-10-22T14:07:43+08:00</updated>
    <id>http://larryim.cc/cdiscount_challenge.html</id>
    <content type="html"><![CDATA[
<p><a href="https://www.kaggle.com/c/cdiscount-image-classification-challenge">Link</a></p>

<p><code>Cdiscount.com</code> generated nearly 3 billion euros last year, making it France’s largest non-food e-commerce company. While the company already sells everything from TVs to trampolines, the list of products is still rapidly growing. By the end of this year, Cdiscount.com will have over 30 million products up for sale. This is up from 10 million products only 2 years ago. Ensuring that so many products are well classified is a challenging task.</p>

<p>Currently, <code>Cdiscount.com</code> applies machine learning algorithms to the text description of the products in order to automatically predict their category. As these methods now seem close to their maximum potential, Cdiscount.com believes that the next quantitative improvement will be driven by the application of data science techniques to images.</p>

<p><strong>In this challenge you will be building a model that automatically classifies the products based on their images</strong>. As a quick tour of Cdiscount.com&#39;s website can confirm, one product can have one or several images. The data set Cdiscount.com is making available is unique and characterized by superlative numbers in several ways:</p>

<ul>
<li>Almost 9 million products: half of the current catalogue</li>
<li>More than 15 million images at 180x180 resolution</li>
<li>More than 5000 categories: yes this is quite an extreme multi-class classification!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards Accurate Multi-person Pose Estimation in the Wild]]></title>
    <link href="http://larryim.cc/15066169438683.html"/>
    <updated>2017-09-29T00:42:23+08:00</updated>
    <id>http://larryim.cc/15066169438683.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++面试经典100题]]></title>
    <link href="http://larryim.cc/15066079292359.html"/>
    <updated>2017-09-28T22:12:09+08:00</updated>
    <id>http://larryim.cc/15066079292359.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1. 请填写BOOL , float, 指针变量与“零值”比较的 if 语句</h2>

<p>提示：这里“零值”可以是0, 0.0 , <code>FALSE</code> 或者“空指针”。例如 <code>int</code> 变量 \(n\) 与“零值”<br/>
比较的<code>if</code>语句为：</p>

<pre><code>if ( n == 0 )
if ( n != 0 )
</code></pre>

<p>以此类推。</p>

<p>(1)请写出 BOOL flag 与“零值”比较的 if 语句：<br/>
标准答案：</p>

<pre><code>if ( flag )
if ( !flag )
``

如下写法均属不良风格，不得分。

</code></pre>

<p>if (flag == TRUE)<br/>
if (flag == 1 )<br/>
if (flag == FALSE)<br/>
if (flag == 0)<br/>
```</p>

<p>(2)请写出 <code>float x</code> 与“零值”比较的<code>if</code>语句：<br/>
标准答案示例：</p>

<pre><code>const float EPSINON = 0.00001;
if ((x &gt;= - EPSINON) &amp;&amp; (x &lt;= EPSINON)
</code></pre>

<p>不可将浮点变量用<code>==</code>或<code>！=</code>与数字比较，应该设法转化成<code>&gt;=</code>或<code>&lt;=</code>此<br/>
类形式。<br/>
如下是错误的写法，不得分。</p>

<pre><code>if (x == 0.0)
if (x != 0.0)
</code></pre>

<p>(3)请写出 <code>char *p</code> 与“零值”比较的 <code>if</code> 语句：<br/>
标准答案：对于空指针值，用<code>#NULL</code> 表示</p>

<pre><code>if (p == NULL)
if (p != NULL)
</code></pre>

<p>如下写法均属不良风格，不得分。</p>

<pre><code>if (p == 0)
if (p != 0)
if (p)
if (!)
</code></pre>

<h2 id="toc_1">2.32位C++程序，计算sizeof的值</h2>

<p><img src="media/15066079292359/15066082580402.jpg" alt=""/></p>

<p><code>sizeof(str) = 6</code>; //字符串数组，大小是六个字节(加上&#39;\0&#39;共六个)。<br/>
<code>sizeof(p) = 4</code>; // 指针的内容就是一个指向目标地址的整数，所以不管指向<code>char</code>、<code>int</code>还是其他，32位机指针一律是4个字节。</p>

<p><code>sizeof(n) = 4</code>; // <code>int</code>型变量是4个字节。<br/>
右侧：<br/>
<code>sizeof(str) = 4</code>; // 这里的str不再是100字节。当数组作为函数的参数进行传递时，也就是作为参数入栈，那么该数组自动退化成同类型的指针。<br/>
<code>sizeof(p) = 4</code>; // 同样，指针类型一律4个字节。</p>

<h2 id="toc_2">3. long a=0x801010; a+5=?</h2>

<p>0x801010 用二进制表示 为：“ 1000 0000 0001 0000 0001 0000” ，十进制的值为 8392720 ，再加 上 5 就是 8392725 。</p>

<h2 id="toc_3">4. 用变量 <code>a</code> 给出下面的定义</h2>

<ul>
<li>一个有 10 个指针的数组，该指针是指向一个整型数的;</li>
<li>一个指向有 10 个整型数数组的指针 ;</li>
<li>一个指向函数的指针，该函数有一个整型参数并返 回一个整型数 ;</li>
<li><p>一个有 10 个指针的数组，该指针指向一个函数，该 函数有一个整型参数并返回一个整型数 ;</p></li>
<li><p>int * a[10]; </p></li>
<li><p>int (*a)[10]</p></li>
<li><p>int (*a)(int); </p></li>
<li><p>int (*a[10])(int)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GAN]]></title>
    <link href="http://larryim.cc/15058297239665.html"/>
    <updated>2017-09-19T22:02:03+08:00</updated>
    <id>http://larryim.cc/15058297239665.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Maximum Likelihood Estimation</a>
<ul>
<li>
<a href="#toc_1">$P_G(x;theta)$ is a NN</a>
</li>
</ul>
</li>
<li>
<a href="#toc_2">Basic Idea of GAN</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Maximum Likelihood Estimation</h2>

<p>Given a data distribution \(P_{data}(x)\). We want to find \(\theta\) such that \(P_G(x;\theta)\) close to \(P_{data}(x)\). Here, \(P_G(x;\theta)\)  is a distribution (e.g. Gaussian Mixture Model) parameterized by \(\theta\) (e.g. means and variances of the Gaussians).</p>

<p>Likelihood of generating the samples can be expressed by</p>

<p>\[\begin{equation}<br/>
L=\prod\limits_{i=1}^mP_G(x^i;\theta)<br/>
\end{equation}<br/>
\]</p>

<p>The problem can be restated that finding \(\theta^*\) maximizing the likelihood:</p>

<p>\[\begin{equation}<br/>
\theta^* = arg \max\limits_\theta \prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \log\prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \prod\limits_{i=1}^m \log P_G(x^i;\theta)\\<br/>
\approx arg \max\limits_\theta E_{x\sim P_{data}}^m [\log P_G(x;\theta)]\\<br/>
= arg \max\limits_\theta\int_xP_{data}(x)\log P_G(x;\theta)dx - \int_xP_{data}(x)\log P_{data}(x) dx \\<br/>
= arg \min\limits_\theta KL(P_{data}(x)||P_G(x;\theta))<br/>
\end{equation}<br/>
\]</p>

<p><strong>KL Divergence</strong>:  <code>KL Divergence</code> is  a measure of how one probability distribution diverges from a second expected probability distribution. For distributions \(P\) and \(Q\) of a continuous random variable, the Kullback-Leibler divergence is defined to be the intergral:</p>

<p>\[\begin{equation}<br/>
 D_{KL}(P|Q)=\int_{-\infty}^{\infty}p(x)\log\frac{p(x)}{q(x)}dx<br/>
 \end{equation}<br/>
 \]</p>

<p>Where \(p\) and \(q\) denote the densities of \(P\) and \(Q\).</p>

<h3 id="toc_1">\(P_G(x;\theta)\) is a NN</h3>

<p>It is hard to use Gaussian Mixture Model as \(P_G(x;\theta)\) to approximate \(P_{data}(x;\theta)\), because of the complicity of the data. A very good natural idea is trying to using neural network which is very powerful.</p>

<p><img src="media/15058297239665/Screen%20Shot%202017-09-19%20at%2010.36.46%20PM.png" alt="NN"/></p>

<p>However, it is Hard to learn by <code>maximum likelihood</code>.  <code>GAN</code> solves the problem.</p>

<h2 id="toc_2">Basic Idea of GAN</h2>

<ul>
<li>Generator G

<ul>
<li>G is a function, input \(z\), output \(x\)</li>
<li>Given a prior distribution \(P_{prior}(z)\), a probability distribution \(P_G (x)\) is defined by function G</li>
</ul></li>
<li>Discriminator D

<ul>
<li>D is a function, input \(x\), output scalar</li>
<li>Evaluate the “difference” between \(P_G(x)\) and \(P_{data}(x)\)</li>
</ul></li>
</ul>

<p>Objective: Given function \(V(G, D)\), to find \(G^* = arg \min \limits_G\max\limits_DV(G,D)\)</p>

<p>\[\begin{equation}<br/>
V = E_{x\sim P_{data}}[\log D(x)] + E_{x\sim P_G}[\log (1-D(x)]<br/>
\end{equation}<br/>
\]</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence">KL Divergence WEKIPEDIA</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient Methods and Hardware for Deep Learning]]></title>
    <link href="http://larryim.cc/15057176549019.html"/>
    <updated>2017-09-18T14:54:14+08:00</updated>
    <id>http://larryim.cc/15057176549019.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Challenges</h2>

<ul>
<li>Model Size</li>
<li>Speed</li>
<li>Energy Efficiency</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习路线]]></title>
    <link href="http://larryim.cc/machine_learning_route.html"/>
    <updated>2017-09-18T10:12:47+08:00</updated>
    <id>http://larryim.cc/machine_learning_route.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15057007673036/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" alt="机器学习"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SqueezeNet]]></title>
    <link href="http://larryim.cc/SqueezeNet.html"/>
    <updated>2017-09-17T13:30:15+08:00</updated>
    <id>http://larryim.cc/SqueezeNet.html</id>
    <content type="html"><![CDATA[
<p><code>SqueezeNet</code> achieves <code>AlexNet</code>-level accuracy on ImageNet with 50x fewer parameters, offering at least three advantages:</p>

<ul>
<li>Less communications across servers</li>
<li>less bandwidth to export model</li>
<li>more feasible to deploy</li>
</ul>

<p>The <code>SqueezeNet</code>architecture is available for download <a href="https://github.com/DeepScale/SqueezeNet">here</a></p>

<h2 id="toc_0">Strategy</h2>

<ul>
<li>Replace \(3\times3\) filters with \(1\times1\) filters: 9X fewer parameters needed</li>
<li>Decrease the number of input channels to \(3\times3\) filters</li>
<li>Downsample late: large activation maps lead to higher accuracy.</li>
</ul>

<h3 id="toc_1">The Fire module</h3>

<p>A Fire module is comprised of a <code>squeeze layer</code> (which has only 1x1 filters), feeding into an <code>expand layer</code> that has a mix of 1x1 and 3x3 convolution filters.</p>

<p><img src="media/15056262155227/fire%20module.png" alt="fire module"/></p>

<p>The following function defines <code>Fire Module</code> by TensorFlow in Python</p>

<pre><code class="language-python">def fire_module(x,inp,sp,e11p,e33p):
    with tf.variable_scope(&quot;fire&quot;):
        with tf.variable_scope(&quot;squeeze&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,inp,sp])
            b = tf.get_variable(&quot;bias&quot;,shape=[sp])
            s = tf.nn.conv2d(x,W,[1,1,1,1],&quot;VALID&quot;)+b
            s = tf.nn.relu(s)
        with tf.variable_scope(&quot;e11&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,sp,e11p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e11p])
            e11 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;VALID&quot;)+b
            e11 = tf.nn.relu(e11)
        with tf.variable_scope(&quot;e33&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[3,3,sp,e33p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e33p])
            e33 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;SAME&quot;)+b
            e33 = tf.nn.relu(e33)
        return tf.concat([e11,e33],3)
</code></pre>

<h3 id="toc_2">The SqueezeNet Architecture</h3>

<p><code>SqueezeNet</code> begins with a standalone convolution layer (conv1), followed by 8 <code>Fire modules</code> (ﬁre2-9), ending with a final conv layer (conv10).</p>

<p><img src="media/15056262155227/Squeezenet_Architecture.png" alt="Squeezenet_Architecture"/></p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Iandola F N, Han S, Moskewicz M W, et al. 2016. SqueezeNet- AlexNet-level accuracy with 50x fewer parameters and &lt; 0.5 MB model size</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing and Understanding CNN]]></title>
    <link href="http://larryim.cc/Visualizing_and_understaning_CNN.html"/>
    <updated>2017-09-17T18:42:40+08:00</updated>
    <id>http://larryim.cc/Visualizing_and_understaning_CNN.html</id>
    <content type="html"><![CDATA[
<ol>
<li><strong>Saliency Maps</strong>: Saliency maps are a quick way to tell which part of the image influenced the classification decision made by the network.</li>
<li><strong>Fooling Images</strong>: We can perturb an input image so that it appears the same to humans, but will be misclassified by the pretrained network.</li>
<li><strong>Class Visualization</strong>: We can synthesize an image to maximize the classification score of a particular class; this can give us some sense of what the network is looking for when it classifies images of that class.</li>
</ol>

<h2 id="toc_0">Saliency Map</h2>

<p>A <strong>saliency map</strong> tells us the degree to which each pixel in the image affects the classification score for that image. To obtain <code>saliency map</code>, first compute the gradient of the unnormalized score corresponding to the correct class (which is a scalar) with respect to the pixels of the image. If the image has shape <code>(H, W, 3)</code> then this gradient will also have shape <code>(H, W, 3)</code>; for each pixel in the image, this gradient tells us the amount by which the classification score will change if the pixel changes by a small amount. Second, In the case of the multi-channel (e.g. RGB) image, take the absolute value of this gradient, then take the maximum value over the 3 input channels; the final saliency map thus has shape <code>(H, W)</code> and all entries are nonnegative.</p>

<h5 id="toc_1">The <code>Saliency Map</code> learnt by <code>SqueezeNet</code>, trained on the data of ImageNet ILSVRC 2012 Classification dataset are as follows:</h5>

<p><img src="media/15056449604256/saliency_map.png" alt="saliency_map"/></p>

<h2 id="toc_2">Fooling images</h2>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman. &quot;Deep Inside Convolutional Networks- Visualising Image Classification Models and Saliency Maps</li>
<li>Szegedy et al, &quot;Intriguing properties of neural networks&quot;, ICLR 2014</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recurrent Neural Network]]></title>
    <link href="http://larryim.cc/15050418178399.html"/>
    <updated>2017-09-10T19:10:17+08:00</updated>
    <id>http://larryim.cc/15050418178399.html</id>
    <content type="html"><![CDATA[
<p>Recurrent Neural Network (循环神经网络)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Captioning]]></title>
    <link href="http://larryim.cc/15050120680855.html"/>
    <updated>2017-09-10T10:54:28+08:00</updated>
    <id>http://larryim.cc/15050120680855.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Vanilla RNN</a>
</li>
<li>
<a href="#toc_1">LSTM</a>
</li>
<li>
<a href="#toc_2">COCO</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Vanilla RNN</h2>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.08%20PM.png" alt="Vanilla RNN gradient flow"/></p>

<h2 id="toc_1">LSTM</h2>

<p>Long Short Term Memory (LSTM)</p>

<p>Backward flow of gradients in RNN can explode or vanish.</p>

<p>Exploding is controlled with gradient clipping. Vanishing is controlled with additive interactions (LSTM)</p>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.27%20PM.png" alt="LSTM"/></p>

<h2 id="toc_2">COCO</h2>

<p><code>COCO</code>（Common Objects in Context） is a large-scale <code>object detection</code>(物体检测), <code>semantic segmentation</code>(语义分割), and captioning dataset. <code>COCO</code> has several main features: <code>Object segmentation</code>, <code>Recognition in context</code>.</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Tsung Y L, Michael M, Serge B, et al. Microsoft COCO: Common Objects in Context.  arXiv:<a href="https://arxiv.org/abs/1405.0312">1405.0312</a></li>
<li>Karpathy et al. Deep Visual-Semantic Alignments for Generating Image Descriptions, CVPR 2015</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning (10): Large Scale Machine Learning]]></title>
    <link href="http://larryim.cc/15049402475273.html"/>
    <updated>2017-09-09T14:57:27+08:00</updated>
    <id>http://larryim.cc/15049402475273.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Learning with Large Datasets</a>
</li>
<li>
<a href="#toc_1">Stochastic Gradient Descent</a>
<ul>
<li>
<a href="#toc_2">Mini-Batch Gradient Descent</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">Stochastic Gradient Descent Convergence</a>
</li>
<li>
<a href="#toc_4">Online Learning</a>
</li>
<li>
<a href="#toc_5">Map Reduce and Data Parallelism</a>
</li>
</ul>


<h2 id="toc_0">Learning with Large Datasets</h2>

<p>We mainly benefit from a very large dataset when our algorithm has high variance when m is small. Recall that if our algorithm has high bias, more data will not have any benefit.</p>

<p>Datasets can often approach such sizes as m = 100,000,000. In this case, our gradient descent step will have to make a summation over all one hundred million examples. We will want to try to avoid this -- the approaches for doing so are described below.</p>

<h2 id="toc_1">Stochastic Gradient Descent</h2>

<p>Stochastic gradient descent is an alternative to classic (or batch) gradient descent and is more efficient and scalable to large data sets.</p>

<p>Stochastic gradient descent is written out in a different but similar way:</p>

<p>\(cost(\theta,(x^{(i)}, y^{(i)})) = \dfrac{1}{2}(h_{\theta}(x^{(i)}) - y^{(i)})^2\)</p>

<p>The only difference in the above cost function is the elimination of the m constant within \(\dfrac{1}{2}\).</p>

<p>\(J_{train}(\theta) = \dfrac{1}{m} \displaystyle \sum_{i=1}^m cost(\theta, (x^{(i)}, y^{(i)}))\)</p>

<p>\(J_{train}\) is now just the average of the cost applied to all of our training examples.</p>

<p>The algorithm is as follows</p>

<ol>
<li><p>Randomly &#39;shuffle&#39; the dataset</p></li>
<li><p>For \(i = 1\dots m\)</p></li>
</ol>

<p>\(\Theta_j := \Theta_j - \alpha (h_{\Theta}(x^{(i)}) - y^{(i)}) \cdot x^{(i)}_j\)</p>

<p>This algorithm will only try to fit one training example at a time. This way we can make progress in gradient descent without having to scan all m training examples first. Stochastic gradient descent will be unlikely to converge at the global minimum and will instead wander around it randomly, but usually yields a result that is close enough. Stochastic gradient descent will usually take 1-10 passes through your data set to get near the global minimum.</p>

<h3 id="toc_2">Mini-Batch Gradient Descent</h3>

<p>Mini-batch gradient descent can sometimes be even faster than stochastic gradient descent. Instead of using all m examples as in batch gradient descent, and instead of using only 1 example as in stochastic gradient descent, we will use some in-between number of examples b.</p>

<p>Typical values for b range from 2-100 or so.</p>

<p>For example, with b=10 and m=1000:</p>

<p>Repeat:</p>

<p>For \(i = 1,11,21,31,\dots,991\)</p>

<p>\(\theta_j := \theta_j - \alpha \dfrac{1}{10} \displaystyle \sum_{k=i}^{i+9} (h_\theta(x^{(k)}) - y^{(k)})x_j^{(k)}\)</p>

<p>We&#39;re simply summing over ten examples at a time. The advantage of computing more than one example at a time is that we can use vectorized implementations over the b examples.</p>

<h2 id="toc_3">Stochastic Gradient Descent Convergence</h2>

<p>How do we choose the learning rate α for stochastic gradient descent? Also, how do we debug stochastic gradient descent to make sure it is getting as close as possible to the global optimum?</p>

<p>One strategy is to plot the average cost of the hypothesis applied to every 1000 or so training examples. We can compute and save these costs during the gradient descent iterations.</p>

<p>With a smaller learning rate, it is <strong>possible</strong> that you may get a slightly better solution with stochastic gradient descent. That is because stochastic gradient descent will oscillate and jump around the global minimum, and it will make smaller random jumps with a smaller learning rate.</p>

<p>If you increase the number of examples you average over to plot the performance of your algorithm, the plot&#39;s line will become smoother.</p>

<p>With a very small number of examples for the average, the line will be too noisy and it will be difficult to find the trend.</p>

<p>One strategy for trying to actually converge at the global minimum is to <strong>slowly decrease α over time</strong> . For example \(\alpha = \dfrac{\text{const1}}{\text{iterationNumber + const2}}\)</p>

<p>However, this is not often done because people don&#39;t want to have to fiddle with even more parameters.</p>

<h2 id="toc_4">Online Learning</h2>

<p>With a continuous stream of users to a website, we can run an endless loop that gets (x,y), where we collect some user actions for the features in x to predict some behavior y.</p>

<p>You can update θ for each individual (x,y) pair as you collect them. This way, you can adapt to new pools of users, since you are continuously updating theta.</p>

<h2 id="toc_5">Map Reduce and Data Parallelism</h2>

<p>We can divide up batch gradient descent and dispatch the cost function for a subset of the data to many different machines so that we can train our algorithm in parallel.</p>

<p>You can split your training set into z subsets corresponding to the number of machines you have. On each of those machines calculate \(\displaystyle \sum_{i=p}^{q}(h_{\theta}(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)}\), where we&#39;ve split the data starting at p and ending at q.</p>

<p>MapReduce will take all these dispatched (or &#39;mapped&#39;) jobs and &#39;reduce&#39; them by calculating:</p>

<p>\(\Theta_j := \Theta_j - \alpha \dfrac{1}{z}(temp_j^{(1)} + temp_j^{(2)} + \cdots + temp_j^{(z)})\)</p>

<p>For all \(j = 0, \dots, n\).</p>

<p>This is simply taking the computed cost from all the machines, calculating their average, multiplying by the learning rate, and updating theta.</p>

<p>Your learning algorithm is MapReduceable if it can be <u>expressed as computing sums of functions over the training set</u> . Linear regression and logistic regression are easily parallelizable.</p>

<p>For neural networks, you can compute forward propagation and back propagation on subsets of your data on many machines. Those machines can report their derivatives back to a &#39;master&#39; server that will combine them.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch Normalization]]></title>
    <link href="http://larryim.cc/batch_normalization.html"/>
    <updated>2017-09-08T11:16:27+08:00</updated>
    <id>http://larryim.cc/batch_normalization.html</id>
    <content type="html"><![CDATA[
<p>The idea is relatively straightforward. Machine learning methods tend to work better when their input data consists of uncorrelated features with <strong>zero mean</strong> and <strong>unit variance</strong>. When training a neural network, we can preprocess the data before feeding it to the network to explicitly decorrelate its features; this will ensure that the first layer of the network sees data that follows a nice distribution. However even if we preprocess the input data, the activations at deeper layers of the network will likely no longer be decorrelated and will no longer have zero mean or unit variance since they are output from earlier layers in the network. Even worse, during the training process the distribution of features at each layer of the network will shift as the weights of each layer are updated.</p>

<h2 id="toc_0">Covariate Shift</h2>

<p>While stochastic gradient is simple and effective, it requires careful tuning of the model hyper-parameters, specifically the learning rate used in optimization, as well as the initial values for the model parameters. The train- ing is complicated by the fact that the inputs to each layer are affected by the parameters of all preceding layers – so that small changes to the network parameters amplify as the network becomes deeper.</p>

<p>The change in the distribution of layers&#39; inputs presents a problem because the layers need to continuously adapt to the new distribution. When the input distribution to a learning system changes, it is said to experience <code>covariate shift</code>. This is typically handled via domain adaption.</p>

<p><code>Internal Covariate Shift</code> refers to the change in the distribution of internal nodes of a deep network due to change in network parameters, in the course of training. <code>Batch Normalization</code>, that takes a step towards reducing internal covariance shift, and in doing so dramatically accelerates the training of deep neural nets. It accomplishes this via a normalization step that fixes the means and variances of layer inputs. It also has a beneficial effect on the dependence of gradients on the scale of the parameters or of their initial values. This allows us to use much higher learning rates without the risk of divergence. </p>

<h2 id="toc_1">Algorithm</h2>

<h3 id="toc_2">Forward</h3>

<p>Given some input values \(\mathcal{B} = x^{(1)},...,x^{(m)}\) over a mini-batch in the layer \(l\) of neural network; </p>

<p>\[\mu_{\mathcal{B}} = \frac{1}{m}\sum_i^m x_i  \text{     (mini-batch mean)}\\<br/>
\sigma^2=\frac{1}{m}\sum_i(x_i-\mu_{\mathcal{B}})^2  \text{     (mini-batch variance)}\\<br/>
\hat{x}_i=\frac{x_i-\mu_{\mathcal{B}}}{\sqrt{\sigma_{\mathcal{\mathcal{B}}}^2+\varepsilon}} \text{     (normalize)}\\<br/>
y_i=\gamma \hat{x}_i+\beta \text{     (scale and shift)}<br/>
\]</p>

<p>At each iteration, we update the running averages for mean and variance using an exponential decay based on the momentum parameter:<br/>
<code><br/>
running_mean = momentum * running_mean + (1 - momentum) * sample_mean<br/>
running_var = momentum * running_var + (1 - momentum) * sample_var<br/>
</code></p>

<h2 id="toc_3">Backward</h2>

<p><img src="media/15048405877529/Screen%20Shot%202017-09-08%20at%203.11.45%20PM.png" alt="batch-normalization-backward"/></p>

<h3 id="toc_4">Test time</h3>

<p>Using trained <code>runing_mean</code> and <code>running_var</code> to take forward step.</p>

<h2 id="toc_5">TensorFlow</h2>

<p>Applying <code>Batch Normalization</code> in TensorFlow Model is very convenient. Just add one line of code in TensorFlow: <code>tf.nn.batch-normalization</code>.</p>

<h2 id="toc_6">Reference</h2>

<p>Sergey Ioffe, Christian Szegedy. 2015. Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift. arXiv:<a href="https://arxiv.org/abs/1502.03167v3">1501.02167v3</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TensorFlow Q]]></title>
    <link href="http://larryim.cc/15046658203135.html"/>
    <updated>2017-09-06T10:43:40+08:00</updated>
    <id>http://larryim.cc/15046658203135.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Q1: what&#39;s the difference between <code>tf.placeholder</code> and <code>tf.Variable</code></h3>

<p>In general, we use <code>tf.placeholder</code> to feed actual training examples, while using <code>tf.Variable</code> for parameters such as weights (\(W\)) and biases (\(b\)) for models.</p>

<p>With <code>tf.Variable</code>, we have to provide an initial value when declaring it. And we don&#39;t have to provide an initial value until running time with a <code>feed_dict</code>.</p>

<h3 id="toc_1">Q2: what&#39;s the difference between <code>tf.random_normal</code> and <code>tf.trucated_normal</code></h3>

<p><code>tf.trucated_normal</code> generates values following a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.</p>

<pre><code>import tensorflow as tf
import matplotlib.pyplot as plt
%matplotlib inline
Session = tf.InteractiveSession()
</code></pre>

<pre><code>mean = 0.0
std = 1.0
shape = (10000,)
hist_range = (-5, 5)

A = tf.truncated_normal(shape, mean, std)
B = tf.random_normal(shape, mean, std)
a, b = Session.run([A, B])
</code></pre>

<pre><code>f, (ax1, ax2) = plt.subplots(2,1)
f1 = ax1.hist(a, bins= 100, range=hist_range)
f2 = ax2.hist(b, bins= 100, range=hist_range)
</code></pre>

<p><img src="media/15046658203135/output_2_0.png" alt="output_2_0"/></p>

<h3 id="toc_2">Q3: What&#39;s the difference between <code>tf.Variable</code> and <code>tf.get_variable</code></h3>

<p><code>tf.get_variable</code> will make it way easier to refactor code if you need to share variables at any time.</p>

<pre><code class="language-python">import tensorflow as tf

with tf.variable_scope(&quot;scope1&quot;):
    w1 = tf.get_variable(&quot;w1&quot;, shape=[2,3])
    w2 = tf.Variable(1.0, name=&quot;w2&quot;)
with tf.variable_scope(&quot;scope1&quot;, reuse=True):
    w1_p = tf.get_variable(&quot;w1&quot;, shape=[2,3])
    w2_p = tf.Variable(1.0, name=&quot;w2&quot;)

print(w1 is w1_p, w2 is w2_p)

#Output: True  False
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pandas]]></title>
    <link href="http://larryim.cc/15046649572570.html"/>
    <updated>2017-09-06T10:29:17+08:00</updated>
    <id>http://larryim.cc/15046649572570.html</id>
    <content type="html"><![CDATA[
<p>To convert a pandas <code>dataframe</code> (df) to a numpy <code>ndarray</code>, use this code:</p>

<pre><code>df=df.values
</code></pre>

<p>df now becomes a numpy <code>ndarray</code>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Cloud Platform]]></title>
    <link href="http://larryim.cc/google-cloud-platform.html"/>
    <updated>2017-09-04T17:25:15+08:00</updated>
    <id>http://larryim.cc/google-cloud-platform.html</id>
    <content type="html"><![CDATA[
<p>Google Cloud Platform enables developers to <strong>build</strong>, <strong>test</strong> and <strong>deploy</strong> applications on Google&#39;s <em>highly-scalable</em>, <em>secure</em>, and <em>reliable</em> infrastructure.</p>

<p>All Google Cloud Platform services are associated with a project that is used to:</p>

<ul>
<li>Track resource and quota usage</li>
<li>Enable billing</li>
<li>Manage permissions and credentials</li>
<li>Enable services and APIs</li>
</ul>

<h2 id="toc_0">VM Instances</h2>

<p>Run the following code to start or stop an compute instance called <code>instance-name</code>.</p>

<pre><code class="language-bash">gcloud compute instances start/stop instance-name
</code></pre>

<p>After starting your compute instance, you might need to access the instance in the zone which is <code>zone-name</code> here, via the terminal by <code>ssh</code> </p>

<pre><code class="language-bash">gcloud compute ssh instance-name --zone zone-name
</code></pre>

<h2 id="toc_1">Setup Environment</h2>

<p>Following the guide of CS231n, using an off-the-shelf script <code>setup_googlecloud.sh</code>, and activate the environment created by the script</p>

<pre><code class="language-bash">source .env/bin/activate
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning (6): Advice for applying machine learning and Machine Learning System Design]]></title>
    <link href="http://larryim.cc/15045143826264.html"/>
    <updated>2017-09-04T16:39:42+08:00</updated>
    <id>http://larryim.cc/15045143826264.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">ML: Advice for applying machine learning</a>
<ul>
<li>
<a href="#toc_1">Deciding What to Try Next</a>
</li>
<li>
<a href="#toc_2">Evaluating a Hypothesis</a>
<ul>
<li>
<a href="#toc_3">The test set error</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">Model Selection and Train/Validation/Test Sets</a>
</li>
<li>
<a href="#toc_5">Diagnosing Bias vs. Variance</a>
</li>
<li>
<a href="#toc_6">Regularization and Bias/Variance</a>
</li>
<li>
<a href="#toc_7">Learning Curves</a>
</li>
<li>
<a href="#toc_8">Deciding What to Do Next Revisited</a>
<ul>
<li>
<a href="#toc_9">Diagnosing Neural Networks</a>
</li>
<li>
<a href="#toc_10">Model Selection:</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_11">ML:Machine Learning System Design</a>
<ul>
<li>
<a href="#toc_12">Prioritizing What to Work On</a>
</li>
<li>
<a href="#toc_13">Error Analysis</a>
</li>
<li>
<a href="#toc_14">Error Metrics for Skewed Classes</a>
</li>
<li>
<a href="#toc_15">Trading Off Precision and Recall</a>
</li>
<li>
<a href="#toc_16">Data for Machine Learning</a>
</li>
<li>
<a href="#toc_17">Quiz instructions</a>
</li>
</ul>
</li>
</ul>


<h1 id="toc_0">ML: Advice for applying machine learning</h1>

<h2 id="toc_1">Deciding What to Try Next</h2>

<p>Errors in your predictions can be troubleshooted by:</p>

<ul>
<li>  Getting more training examples</li>
<li>  Trying smaller sets of features</li>
<li>  Trying additional features</li>
<li>  Trying polynomial features</li>
<li>  Increasing or decreasing λ</li>
</ul>

<p>Don&#39;t just pick one of these avenues at random. We&#39;ll explore diagnostic techniques for choosing one of the above solutions in the following sections.</p>

<h2 id="toc_2">Evaluating a Hypothesis</h2>

<p>A hypothesis may have low error for the training examples but still be inaccurate (because of overfitting).</p>

<p>With a given dataset of training examples, we can split up the data into two sets: a <strong>training set</strong> and a <strong>test set</strong> .</p>

<p>The new procedure using these two sets is then:</p>

<ol>
<li> Learn \(\Theta\) and minimize \(J_{train}(\Theta)\) using the training set</li>
<li> Compute the test set error \(J_{test}(\Theta)\)</li>
</ol>

<h3 id="toc_3">The test set error</h3>

<ol>
<li> For linear regression: \(J_{test}(\Theta) = \dfrac{1}{2m_{test}} \sum_{i=1}^{m_{test}}(h_\Theta(x^{(i)}_{test}) - y^{(i)}_{test})^2\)</li>
<li> For classification ~ Misclassification error (aka 0/1 misclassification error):</li>
</ol>

<p>\(err(h_\Theta(x),y) = \{\begin{matrix} 1 &amp; \mbox{if } h_\Theta(x) \geq 0.5\ and\ y = 0\ or\ h_\Theta(x) &lt; 0.5\ and\ y = 1\newline 0 &amp; \mbox otherwise \end{matrix}\)</p>

<p>This gives us a binary 0 or 1 error result based on a misclassification.</p>

<p>The average test error for the test set is</p>

<p>\(\text{Test Error} = \dfrac{1}{m_{test}} \sum^{m_{test}}_{i=1} err(h_\Theta(x^{(i)}_{test}), y^{(i)}_{test})\)</p>

<p>This gives us the proportion of the test data that was misclassified.</p>

<h2 id="toc_4">Model Selection and Train/Validation/Test Sets</h2>

<ul>
<li>  Just because a learning algorithm fits a training set well, that does not mean it is a good hypothesis.</li>
<li>  The error of your hypothesis as measured on the data set with which you trained the parameters will be lower than any other data set.</li>
</ul>

<p>In order to choose the model of your hypothesis, you can test each degree of polynomial and look at the error result.</p>

<p><strong>Without the Validation Set (note: this is a bad method - do not use it)</strong></p>

<ol>
<li> Optimize the parameters in Θ using the training set for each polynomial degree.</li>
<li> Find the polynomial degree d with the least error using the test set.</li>
<li> Estimate the generalization error also using the test set with \(J_{test}(\Theta^{(d)})\), (d = theta from polynomial with lower error);</li>
</ol>

<p>In this case, we have trained one variable, d, or the degree of the polynomial, using the test set. This will cause our error value to be greater for any other set of data.</p>

<p><strong>Use of the CV set</strong></p>

<p>To solve this, we can introduce a third set, the <strong>Cross Validation Set</strong> , to serve as an intermediate set that we can train d with. Then our test set will give us an accurate, non-optimistic error.</p>

<p>One example way to break down our dataset into the three sets is:</p>

<ul>
<li>  Training set: 60%</li>
<li>  Cross validation set: 20%</li>
<li>  Test set: 20%</li>
</ul>

<p>We can now calculate three separate error values for the three different sets.</p>

<p><strong>With the Validation Set (note: this method presumes we do not also use the CV set for regularization)</strong></p>

<ol>
<li><p>Optimize the parameters in Θ using the training set for each polynomial degree.</p></li>
<li><p>Find the polynomial degree d with the least error using the cross validation set.</p></li>
<li><p>Estimate the generalization error using the test set with \(J_{test}(\Theta^{(d)})\), (d = theta from polynomial with lower error);</p></li>
</ol>

<p>This way, the degree of the polynomial d has not been trained using the test set.</p>

<p>(Mentor note: be aware that using the CV set to select &#39;d&#39; means that we cannot also use it for the validation curve process of setting the lambda value).</p>

<h2 id="toc_5">Diagnosing Bias vs. Variance</h2>

<p>In this section we examine the relationship between the degree of the polynomial d and the underfitting or overfitting of our hypothesis.</p>

<ul>
<li><p>We need to distinguish whether <strong>bias</strong> or <strong>variance</strong> is the problem contributing to bad predictions.</p></li>
<li><p>High bias is underfitting and high variance is overfitting. We need to find a golden mean between these two.</p></li>
</ul>

<p>The training error will tend to <strong>decrease</strong> as we increase the degree d of the polynomial.</p>

<p>At the same time, the cross validation error will tend to <strong>decrease</strong> as we increase d up to a point, and then it will <strong>increase</strong> as d is increased, forming a convex curve.</p>

<p><strong>High bias (underfitting)</strong> : both \(J_{train}(\Theta)\) and \(J_{CV}(\Theta)\) will be high. Also, \(J_{CV}(\Theta) \approx J_{train}(\Theta)\).</p>

<p><strong>High variance (overfitting)</strong> : \(J_{train}(\Theta)\) will be low and \(J_{CV}(\Theta)\) will be much greater than\(J_{train}(\Theta)\).</p>

<p>The is represented in the figure below:</p>

<p><img src="media/15045143826264/15049369778320.jpg" alt=""/></p>

<h2 id="toc_6">Regularization and Bias/Variance</h2>

<p>Instead of looking at the degree d contributing to bias/variance, now we will look at the regularization parameter λ.</p>

<ul>
<li>  Large λ: High bias (underfitting)</li>
<li>  Intermediate λ: just right</li>
<li>  Small λ: High variance (overfitting)</li>
</ul>

<p>A large lambda heavily penalizes all the Θ parameters, which greatly simplifies the line of our resulting function, so causes underfitting.</p>

<p>The relationship of λ to the training set and the variance set is as follows:</p>

<p><strong>Low λ</strong> : \(J_{train}(\Theta)\) is low and \(J_{CV}(\Theta)\) is high (high variance/overfitting).</p>

<p><strong>Intermediate λ</strong> : \(J_{train}(\Theta)\) and \(J_{CV}(\Theta)\) are somewhat low and \(J_{train}(\Theta) \approx J_{CV}(\Theta)\).</p>

<p><strong>Large λ</strong> : both \(J_{train}(\Theta)\) and \(J_{CV}(\Theta)\) will be high (underfitting /high bias)</p>

<p>The figure below illustrates the relationship between lambda and the hypothesis:</p>

<p><img src="media/15045143826264/15049370422319.jpg" alt=""/></p>

<p>In order to choose the model and the regularization λ, we need:</p>

<ol>
<li> Create a list of lambdas (i.e. λ∈{0,0.01,0.02,0.04,0.08,0.16,0.32,0.64,1.28,2.56,5.12,10.24});
2. Create a set of models with different degrees or any other variants.
3. Iterate through the \(\lambda\)s and for each \(\lambda\) go through all the models to learn some \(\Theta\).
4. Compute the cross validation error using the learned Θ (computed with λ) on the \(J_{CV}(\Theta)\) without regularization or λ = 0.
5. Select the best combo that produces the lowest error on the cross validation set.
6. Using the best combo Θ and λ, apply it on \(J_{test}(\Theta)\) to see if it has a good generalization of the problem.</li>
</ol>

<h2 id="toc_7">Learning Curves</h2>

<p>Training 3 examples will easily have 0 errors because we can always find a quadratic curve that exactly touches 3 points.</p>

<ul>
<li>  As the training set gets larger, the error for a quadratic function increases.</li>
<li>  The error value will plateau out after a certain m, or training set size.</li>
</ul>

<p><strong>With high bias</strong></p>

<p><strong>Low training set size</strong> : causes \(J_{train}(\Theta)\) to be low and \(J_{CV}(\Theta)\) to be high.</p>

<p><strong>Large training set size</strong> : causes both \(J_{train}(\Theta)\) and \(J_{CV}(\Theta)\) to be high with \(J_{train}(\Theta)\)≈\(J_{CV}(\Theta)\).</p>

<p>If a learning algorithm is suffering from <strong>high bias</strong> , getting more training data <strong>will not (by itself) help much</strong> .</p>

<p>For high variance, we have the following relationships in terms of the training set size:</p>

<p><strong>With high variance</strong></p>

<p><strong>Low training set size</strong> : \(J_{train}(\Theta)\) will be low and \(J_{CV}(\Theta)\) will be high.</p>

<p><strong>Large training set size</strong> : \(J_{train}(\Theta)\) increases with training set size and \(J_{CV}(\Theta)\) continues to decrease without leveling off. Also, \(J_{train}(\Theta)\)&lt;\(J_{CV}(\Theta)\) but the difference between them remains significant.</p>

<p>If a learning algorithm is suffering from <strong>high variance</strong> , getting more training data is <strong>likely to help.</strong></p>

<p><img src="media/15045143826264/15049370738559.jpg" alt=""/></p>

<p><img src="media/15045143826264/15049370848695.jpg" alt=""/></p>

<h2 id="toc_8">Deciding What to Do Next Revisited</h2>

<p>Our decision process can be broken down as follows:</p>

<ul>
<li>  Getting more training examples</li>
</ul>

<p>Fixes high variance</p>

<ul>
<li>  Trying smaller sets of features</li>
</ul>

<p>Fixes high variance</p>

<ul>
<li>  Adding features</li>
</ul>

<p>Fixes high bias</p>

<ul>
<li>  Adding polynomial features</li>
</ul>

<p>Fixes high bias</p>

<ul>
<li>  Decreasing λ</li>
</ul>

<p>Fixes high bias</p>

<ul>
<li>  Increasing λ</li>
</ul>

<p>Fixes high variance</p>

<h3 id="toc_9">Diagnosing Neural Networks</h3>

<ul>
<li>  A neural network with fewer parameters is <strong>prone to underfitting</strong> . It is also <strong>computationally cheaper</strong> .</li>
<li>  A large neural network with more parameters is <strong>prone to overfitting</strong> . It is also <strong>computationally expensive</strong> . In this case you can use regularization (increase λ) to address the overfitting.</li>
</ul>

<p>Using a single hidden layer is a good starting default. You can train your neural network on a number of hidden layers using your cross validation set.</p>

<h3 id="toc_10">Model Selection:</h3>

<p>Choosing M the order of polynomials.</p>

<p>How can we tell which parameters Θ to leave in the model (known as &quot;model selection&quot;)?</p>

<p>There are several ways to solve this problem:</p>

<ul>
<li>  Get more data (very difficult).</li>
<li>  Choose the model which best fits the data without overfitting (very difficult).</li>
<li>  Reduce the opportunity for overfitting through regularization.</li>
</ul>

<p><strong>Bias: approximation error (Difference between expected value and optimal value)</strong></p>

<ul>
<li>  High Bias = UnderFitting (BU)</li>
<li>  \(J_{train}(\Theta)\) and \(J_{CV}(\Theta)\) both will be high and \(J_{train}(\Theta)\) ≈ \(J_{CV}(\Theta)\)</li>
</ul>

<p><strong>Variance: estimation error due to finite data</strong></p>

<ul>
<li>  High Variance = OverFitting (VO)</li>
<li>  \(J_{train}(\Theta)\) is low and \(J_{CV}(\Theta)\) ≫\(J_{train}(\Theta)\)</li>
</ul>

<p><strong>Intuition for the bias-variance trade-off:</strong></p>

<ul>
<li>  Complex model =&gt; sensitive to data =&gt; much affected by changes in X =&gt; high variance, low bias.</li>
<li>  Simple model =&gt; more rigid =&gt; does not change as much with changes in X =&gt; low variance, high bias.</li>
</ul>

<p>One of the most important goals in learning: finding a model that is just right in the bias-variance trade-off.</p>

<p><strong>Regularization Effects:</strong></p>

<ul>
<li>  Small values of λ allow model to become finely tuned to noise leading to large variance =&gt; overfitting.</li>
<li>  Large values of λ pull weight parameters to zero leading to large bias =&gt; underfitting.</li>
</ul>

<p><strong>Model Complexity Effects:</strong></p>

<ul>
<li>  Lower-order polynomials (low model complexity) have high bias and low variance. In this case, the model fits poorly consistently.</li>
<li>  Higher-order polynomials (high model complexity) fit the training data extremely well and the test data extremely poorly. These have low bias on the training data, but very high variance.</li>
<li>  In reality, we would want to choose a model somewhere in between, that can generalize well but also fits the data reasonably well.</li>
</ul>

<p><strong>A typical rule of thumb when running diagnostics is:</strong></p>

<ul>
<li>  More training examples fixes high variance but not high bias.</li>
<li>  Fewer features fixes high variance but not high bias.</li>
<li>  Additional features fixes high bias but not high variance.</li>
<li>  The addition of polynomial and interaction features fixes high bias but not high variance.</li>
<li>  When using gradient descent, decreasing lambda can fix high bias and increasing lambda can fix high variance (lambda is the regularization parameter).</li>
<li>  When using neural networks, small neural networks are more prone to under-fitting and big neural networks are prone to over-fitting. Cross-validation of network size is a way to choose alternatives.</li>
</ul>

<h1 id="toc_11">ML:Machine Learning System Design</h1>

<h2 id="toc_12">Prioritizing What to Work On</h2>

<p>Different ways we can approach a machine learning problem:</p>

<ul>
<li>  Collect lots of data (for example &quot;honeypot&quot; project but doesn&#39;t always work)</li>
<li>  Develop sophisticated features (for example: using email header data in spam emails)</li>
<li>  Develop algorithms to process your input in different ways (recognizing misspellings in spam).</li>
</ul>

<p>It is difficult to tell which of the options will be helpful.</p>

<h2 id="toc_13">Error Analysis</h2>

<p>The recommended approach to solving machine learning problems is:</p>

<ul>
<li>  Start with a simple algorithm, implement it quickly, and test it early.</li>
<li>  Plot learning curves to decide if more data, more features, etc. will help</li>
<li>  Error analysis: manually examine the errors on examples in the cross validation set and try to spot a trend.</li>
</ul>

<p>It&#39;s important to get error results as a single, numerical value. Otherwise it is difficult to assess your algorithm&#39;s performance.</p>

<p>You may need to process your input before it is useful. For example, if your input is a set of words, you may want to treat the same word with different forms (fail/failing/failed) as one word, so must use &quot;stemming software&quot; to recognize them all as one.</p>

<h2 id="toc_14">Error Metrics for Skewed Classes</h2>

<p>It is sometimes difficult to tell whether a reduction in error is actually an improvement of the algorithm.</p>

<ul>
<li>  For example: In predicting a cancer diagnoses where 0.5% of the examples have cancer, we find our learning algorithm has a 1% error. However, if we were to simply classify every single example as a 0, then our error would reduce to 0.5% even though we did not improve the algorithm.</li>
</ul>

<p>This usually happens with <strong>skewed classes</strong> ; that is, when our class is very rare in the entire data set.</p>

<p>Or to say it another way, when we have lot more examples from one class than from the other class.</p>

<p>For this we can use <strong>Precision/Recall</strong> .</p>

<ul>
<li>  Predicted: 1, Actual: 1 --- True positive</li>
<li>  Predicted: 0, Actual: 0 --- True negative</li>
<li>  Predicted: 0, Actual, 1 --- False negative</li>
<li>  Predicted: 1, Actual: 0 --- False positive</li>
</ul>

<p><strong>Precision</strong> : of all patients we predicted where y=1, what fraction actually has cancer?</p>

<p>\(\dfrac{\text{True Positives}}{\text{Total number of predicted positives}} = \dfrac{\text{True Positives}}{\text{True Positives}+\text{False positives}}\)</p>

<p><strong>Recall</strong> : Of all the patients that actually have cancer, what fraction did we correctly detect as having cancer?</p>

<p>\(\dfrac{\text{True Positives}}{\text{Total number of actual positives}}= \dfrac{\text{True Positives}}{\text{True Positives}+\text{False negatives}}\)</p>

<p>These two metrics give us a better sense of how our classifier is doing. We want both precision and recall to be high.</p>

<p>In the example at the beginning of the section, if we classify all patients as 0, then our <strong>recall</strong> will be \(\dfrac{0}{0 + f} = 0\), so despite having a lower error percentage, we can quickly see it has worse recall.</p>

<p>Accuracy = \(\frac {\text{true positive + true negative}} {\text{total population}}\)</p>

<p>Note 1: if an algorithm predicts only negatives like it does in one of exercises, the precision is not defined, it is impossible to divide by 0. F1 score will not be defined too.</p>

<h2 id="toc_15">Trading Off Precision and Recall</h2>

<p>We might want a <strong>confident</strong> prediction of two classes using logistic regression. One way is to increase our threshold:</p>

<ul>
<li><p>Predict 1 if: \(h_\theta(x) \geq 0.7\)</p></li>
<li><p>Predict 0 if: \(h_\theta(x) &lt; 0.7\)</p></li>
</ul>

<p>This way, we only predict cancer if the patient has a 70% chance.</p>

<p>Doing this, we will have <strong>higher precision</strong> but <strong>lower recall</strong> (refer to the definitions in the previous section).</p>

<p>In the opposite example, we can lower our threshold:</p>

<ul>
<li><p>Predict 1 if: \(h_\theta(x) \geq 0.3\)</p></li>
<li><p>Predict 0 if: \(h_\theta(x) &lt; 0.3\)</p></li>
</ul>

<p>That way, we get a very <strong>safe</strong> prediction. This will cause <strong>higher recall</strong> but <strong>lower precision</strong> .</p>

<p>The greater the threshold, the greater the precision and the lower the recall.</p>

<p>The lower the threshold, the greater the recall and the lower the precision.</p>

<p>In order to turn these two metrics into one single number, we can take the <strong>F value</strong> .</p>

<p>One way is to take the <strong>average</strong> :</p>

<p>\(\dfrac{P+R}{2}\)</p>

<p>This does not work well. If we predict all y=0 then that will bring the average up despite having 0 recall. If we predict all examples as y=1, then the very high recall will bring up the average despite having 0 precision.</p>

<p>A better way is to compute the <strong>F Score</strong> (or F1 score):</p>

<p>\(\text{F Score} = 2\dfrac{PR}{P + R}\)</p>

<p>In order for the F Score to be large, both precision and recall must be large.</p>

<p>We want to train precision and recall on the <strong>cross validation set</strong> so as not to bias our test set.</p>

<h2 id="toc_16">Data for Machine Learning</h2>

<p>How much data should we train on?</p>

<p>In certain cases, an &quot;inferior algorithm,&quot; if given enough data, can outperform a superior algorithm with less data.</p>

<p>We must choose our features to have <strong>enough</strong> information. A useful test is: Given input x, would a human expert be able to confidently predict y?</p>

<p><strong>Rationale for large data</strong> : if we have a <strong>low bias</strong> algorithm (many features or hidden units making a very complex function), then the larger the training set we use, the less we will have overfitting (and the more accurate the algorithm will be on the test set).</p>

<h2 id="toc_17">Quiz instructions</h2>

<p>When the quiz instructions tell you to enter a value to &quot;two decimal digits&quot;, what it really means is &quot;two significant digits&quot;. So, just for example, the value 0.0123 should be entered as &quot;0.012&quot;, not &quot;0.01&quot;.</p>

<p>References:</p>

<ul>
<li>  <a href="https://class.coursera.org/ml/lecture/index">https://class.coursera.org/ml/lecture/index</a></li>
<li>  <a href="http://www.cedar.buffalo.edu/%7Esrihari/CSE555/Chap9.Part2.pdf">http://www.cedar.buffalo.edu/~srihari/CSE555/Chap9.Part2.pdf</a></li>
<li>  <a href="http://blog.stephenpurpura.com/post/13052575854/managing-bias-variance-tradeoff-in-machine-learning">http://blog.stephenpurpura.com/post/13052575854/managing-bias-variance-tradeoff-in-machine-learning</a></li>
<li>  <a href="http://www.cedar.buffalo.edu/%7Esrihari/CSE574/Chap3/Bias-Variance.pdf">http://www.cedar.buffalo.edu/~srihari/CSE574/Chap3/Bias-Variance.pdf</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
