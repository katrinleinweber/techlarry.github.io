<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[techlarry]]></title>
  <link href="http://larryim.cc/atom.xml" rel="self"/>
  <link href="http://larryim.cc/"/>
  <updated>2017-10-23T09:53:50+08:00</updated>
  <id>http://larryim.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations (4): Feasibility of Learning]]></title>
    <link href="http://larryim.cc/machine_Learning_foundation_4.html"/>
    <updated>2017-10-23T08:48:30+08:00</updated>
    <id>http://larryim.cc/machine_Learning_foundation_4.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Learning outside training examples</h2>

<p><strong>No Free Lunch</strong>: Learning from \(D\) (\(D\): training examples) (to infer something outside \(D\)) is doomed to fail if any unknown \(f\) can happen.</p>

<ul>
<li>\(g\approx f\) inside \(D\): Possible!</li>
<li>\(g\approx f\) outside \(D\): Impossible!</li>
</ul>

<h2 id="toc_1">In and out of sample error</h2>

<p>For any fixed \(h\), in &#39;big&#39; data (N large), <code>in-sample error</code> \(E_{in}(h)\) is probably close to <code>out-of-sample error</code> \(E_{out}(h)\) (within \(\epsilon\))</p>

<p>\(P(|E_{in}(h)-E_{out}(h)|&gt; \epsilon) \le 2\exp(-2\epsilon^2N)\)</p>

<p>The equation above is called <code>Hoeffding&#39;s Inequality</code>. The statement \(E_{in}(h)=E_{out}(h)\) is <code>probably approximately correct</code> (PAC).</p>

<p>If large \(N\), we can <strong>probably</strong> infer unknown \(E_{out}(h)\) by known \(E_{in}(h)\).</p>

<p><code>in-sample error</code> \(E_{in}(h)\) denotes orange fraction in sample, <code>out-of-sample error</code> \(E_{out}(h)\) denotes orange probability in bin, When we want to infer the orange probability in bin.</p>

<p><img src="media/15087197108957/Ein_Eout.png" alt="Ein_Eout"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations (3): Types of Learning]]></title>
    <link href="http://larryim.cc/15087235268574.html"/>
    <updated>2017-10-23T09:52:06+08:00</updated>
    <id>http://larryim.cc/15087235268574.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations (2): Learning to answer Yes or No]]></title>
    <link href="http://larryim.cc/15087235262377.html"/>
    <updated>2017-10-23T09:52:06+08:00</updated>
    <id>http://larryim.cc/15087235262377.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning Foundations (1): The Learning Problem]]></title>
    <link href="http://larryim.cc/15087235092833.html"/>
    <updated>2017-10-23T09:51:49+08:00</updated>
    <id>http://larryim.cc/15087235092833.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSON]]></title>
    <link href="http://larryim.cc/15086547919641.html"/>
    <updated>2017-10-22T14:46:31+08:00</updated>
    <id>http://larryim.cc/15086547919641.html</id>
    <content type="html"><![CDATA[
<p><code>JSON</code> stands for <code>Javascript Object Notation</code>. It is a lightweight data interchange format, similar to <code>XML</code>, <code>SOAP</code> and <code>YAML</code>.</p>

<p><code>JSON</code> syntax is based around three simple data types:</p>

<ul>
<li>Name-value pair</li>
<li>JSON Object: a collection of name-value pairs or Arrays encased in curly brackets.</li>
<li>JSON Array: a lift of values encased in square brackets.</li>
</ul>

<p>E.g. a student in an university with basic information: name, id number, GPA etc:</p>

<pre><code class="language-python">
{
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}
</code></pre>

<h2 id="toc_0">Python之<code>json</code>模块</h2>

<p>Python的<code>json</code>模块可以用来编码和解码JSON数据。其最主要的两个函数是<code>json.dumps()</code>(encoding,编码)和<code>json.loads()</code>(decoding, 解码).</p>

<pre><code class="language-python">import json

student_info = {
    &quot;name&quot;:&quot;Jacob Bellamy&quot;,
    &quot;id_number&quot;:3352976,
    &quot;gpa&quot;:8.2,
    &quot;courses&quot;:[&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;],
    &quot;fees_paid&quot;: True,
    &quot;address&quot;: {
        &quot;street_address&quot;: &quot;1 Horse Lane&quot;,
        &quot;city&quot;: &quot;Auckland&quot;,
        &quot;post_code&quot;: 1632}
}

student_info_json = json.dumps(student_info)

print(student_info_json)
</code></pre>

<pre><code>{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}
</code></pre>

<p>如果你要处理的是文件而不是字符串，你可以使用<code>json.dump()</code> 和 <code>json.load()</code> 来编码和解码<code>JSON</code>数据。例如：</p>

<pre><code class="language-python"># Writing JSON data
with open(&#39;student_info.json&#39;, &#39;w&#39;) as f:
    json.dump(student_info_json, f)
 
# Reading data back
with open(&#39;student_info.json&#39;, &#39;r&#39;) as f:
    data = json.load(f)
data
</code></pre>

<pre><code>&#39;{&quot;name&quot;: &quot;Jacob Bellamy&quot;, &quot;id_number&quot;: 3352976, &quot;gpa&quot;: 8.2, &quot;courses&quot;: [&quot;Compsci 101&quot;, &quot;Compsci 105&quot;, &quot;Phil 101&quot;, &quot;Maths 108&quot;], &quot;fees_paid&quot;: true, &quot;address&quot;: {&quot;street_address&quot;: &quot;1 Horse Lane&quot;, &quot;city&quot;: &quot;Auckland&quot;, &quot;post_code&quot;: 1632}}&#39;
</code></pre>

<h2 id="toc_1">Binary JSON - BSON</h2>

<p><code>BSON</code> /ˈbiːsən/, standing for <code>Binary JSON</code>, is a computer data interchange format used mainly as a data storage and network transfer format in the <code>MongoDB</code> database.</p>

<pre><code class="language-python">import bson      #installed with the pymongo package
data = bson.decode_file_iter(open(&#39;example.bson&#39;, &#39;rb&#39;))
</code></pre>

<h2 id="toc_2">Reference</h2>

<ul>
<li>Brad Miller, David Ranum. 2013. Problem Solving with Algorithms and Data Structures.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cdiscount’s Image Classification Challenge]]></title>
    <link href="http://larryim.cc/cdiscount_challenge.html"/>
    <updated>2017-10-22T14:07:43+08:00</updated>
    <id>http://larryim.cc/cdiscount_challenge.html</id>
    <content type="html"><![CDATA[
<p><a href="https://www.kaggle.com/c/cdiscount-image-classification-challenge">Link</a></p>

<p><code>Cdiscount.com</code> generated nearly 3 billion euros last year, making it France’s largest non-food e-commerce company. While the company already sells everything from TVs to trampolines, the list of products is still rapidly growing. By the end of this year, Cdiscount.com will have over 30 million products up for sale. This is up from 10 million products only 2 years ago. Ensuring that so many products are well classified is a challenging task.</p>

<p>Currently, <code>Cdiscount.com</code> applies machine learning algorithms to the text description of the products in order to automatically predict their category. As these methods now seem close to their maximum potential, Cdiscount.com believes that the next quantitative improvement will be driven by the application of data science techniques to images.</p>

<p><strong>In this challenge you will be building a model that automatically classifies the products based on their images</strong>. As a quick tour of Cdiscount.com&#39;s website can confirm, one product can have one or several images. The data set Cdiscount.com is making available is unique and characterized by superlative numbers in several ways:</p>

<ul>
<li>Almost 9 million products: half of the current catalogue</li>
<li>More than 15 million images at 180x180 resolution</li>
<li>More than 5000 categories: yes this is quite an extreme multi-class classification!</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[伴你养成早起的习惯]]></title>
    <link href="http://larryim.cc/15077159489506.html"/>
    <updated>2017-10-11T17:59:08+08:00</updated>
    <id>http://larryim.cc/15077159489506.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">早起的五个原则</h2>

<ul>
<li>比起起床时间，就寝时间更重要；</li>
<li>防止睡眠负债发生；</li>
<li>一次养成一个习惯；</li>
<li>找到生活习惯的问题点；</li>
<li>预想好妨碍早起的原因。</li>
</ul>

<h2 id="toc_1">晚上早睡的技巧</h2>

<ul>
<li>手机关机放包里</li>
<li>开小灯让房间变暗</li>
<li>制造睡前仪式形成自我暗示</li>
<li>睡前3小时不吃东西</li>
</ul>

<h1 id="toc_2">早起失败的主要原因</h1>

<ul>
<li>一口气定6点起床的目标</li>
<li>只抓起床的时间</li>
<li>缩短睡眠时间</li>
<li>突发事件的干扰</li>
<li>没有明确早起的理由</li>
<li>早起的同时养成多个习惯。</li>
</ul>

<h1 id="toc_3">Reference</h1>

<ul>
<li>图解习惯力. 速溶综合研究所 <a href="https://book.douban.com/subject/26982922/">豆瓣链接</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Towards Accurate Multi-person Pose Estimation in the Wild]]></title>
    <link href="http://larryim.cc/15066169438683.html"/>
    <updated>2017-09-29T00:42:23+08:00</updated>
    <id>http://larryim.cc/15066169438683.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++面试经典100题]]></title>
    <link href="http://larryim.cc/15066079292359.html"/>
    <updated>2017-09-28T22:12:09+08:00</updated>
    <id>http://larryim.cc/15066079292359.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1. 请填写BOOL , float, 指针变量与“零值”比较的 if 语句</h2>

<p>提示：这里“零值”可以是0, 0.0 , <code>FALSE</code> 或者“空指针”。例如 <code>int</code> 变量 \(n\) 与“零值”<br/>
比较的<code>if</code>语句为：</p>

<pre><code>if ( n == 0 )
if ( n != 0 )
</code></pre>

<p>以此类推。</p>

<p>(1)请写出 BOOL flag 与“零值”比较的 if 语句：<br/>
标准答案：</p>

<pre><code>if ( flag )
if ( !flag )
``

如下写法均属不良风格，不得分。

</code></pre>

<p>if (flag == TRUE)<br/>
if (flag == 1 )<br/>
if (flag == FALSE)<br/>
if (flag == 0)<br/>
```</p>

<p>(2)请写出 <code>float x</code> 与“零值”比较的<code>if</code>语句：<br/>
标准答案示例：</p>

<pre><code>const float EPSINON = 0.00001;
if ((x &gt;= - EPSINON) &amp;&amp; (x &lt;= EPSINON)
</code></pre>

<p>不可将浮点变量用<code>==</code>或<code>！=</code>与数字比较，应该设法转化成<code>&gt;=</code>或<code>&lt;=</code>此<br/>
类形式。<br/>
如下是错误的写法，不得分。</p>

<pre><code>if (x == 0.0)
if (x != 0.0)
</code></pre>

<p>(3)请写出 <code>char *p</code> 与“零值”比较的 <code>if</code> 语句：<br/>
标准答案：对于空指针值，用<code>#NULL</code> 表示</p>

<pre><code>if (p == NULL)
if (p != NULL)
</code></pre>

<p>如下写法均属不良风格，不得分。</p>

<pre><code>if (p == 0)
if (p != 0)
if (p)
if (!)
</code></pre>

<h2 id="toc_1">2.32位C++程序，计算sizeof的值</h2>

<p><img src="media/15066079292359/15066082580402.jpg" alt=""/></p>

<p><code>sizeof(str) = 6</code>; //字符串数组，大小是六个字节(加上&#39;\0&#39;共六个)。<br/>
<code>sizeof(p) = 4</code>; // 指针的内容就是一个指向目标地址的整数，所以不管指向<code>char</code>、<code>int</code>还是其他，32位机指针一律是4个字节。</p>

<p><code>sizeof(n) = 4</code>; // <code>int</code>型变量是4个字节。<br/>
右侧：<br/>
<code>sizeof(str) = 4</code>; // 这里的str不再是100字节。当数组作为函数的参数进行传递时，也就是作为参数入栈，那么该数组自动退化成同类型的指针。<br/>
<code>sizeof(p) = 4</code>; // 同样，指针类型一律4个字节。</p>

<h2 id="toc_2">3. long a=0x801010; a+5=?</h2>

<p>0x801010 用二进制表示 为：“ 1000 0000 0001 0000 0001 0000” ，十进制的值为 8392720 ，再加 上 5 就是 8392725 。</p>

<h2 id="toc_3">4. 用变量 <code>a</code> 给出下面的定义</h2>

<ul>
<li>一个有 10 个指针的数组，该指针是指向一个整型数的;</li>
<li>一个指向有 10 个整型数数组的指针 ;</li>
<li>一个指向函数的指针，该函数有一个整型参数并返 回一个整型数 ;</li>
<li><p>一个有 10 个指针的数组，该指针指向一个函数，该 函数有一个整型参数并返回一个整型数 ;</p></li>
<li><p>int * a[10]; </p></li>
<li><p>int (*a)[10]</p></li>
<li><p>int (*a)(int); </p></li>
<li><p>int (*a[10])(int)</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GAN]]></title>
    <link href="http://larryim.cc/15058297239665.html"/>
    <updated>2017-09-19T22:02:03+08:00</updated>
    <id>http://larryim.cc/15058297239665.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Maximum Likelihood Estimation</a>
<ul>
<li>
<a href="#toc_1">$P_G(x;theta)$ is a NN</a>
</li>
</ul>
</li>
<li>
<a href="#toc_2">Basic Idea of GAN</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Maximum Likelihood Estimation</h2>

<p>Given a data distribution \(P_{data}(x)\). We want to find \(\theta\) such that \(P_G(x;\theta)\) close to \(P_{data}(x)\). Here, \(P_G(x;\theta)\)  is a distribution (e.g. Gaussian Mixture Model) parameterized by \(\theta\) (e.g. means and variances of the Gaussians).</p>

<p>Likelihood of generating the samples can be expressed by</p>

<p>\[\begin{equation}<br/>
L=\prod\limits_{i=1}^mP_G(x^i;\theta)<br/>
\end{equation}<br/>
\]</p>

<p>The problem can be restated that finding \(\theta^*\) maximizing the likelihood:</p>

<p>\[\begin{equation}<br/>
\theta^* = arg \max\limits_\theta \prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \log\prod\limits_{i=1}^m P_G(x^i;\theta)\\<br/>
=arg \max\limits_\theta \prod\limits_{i=1}^m \log P_G(x^i;\theta)\\<br/>
\approx arg \max\limits_\theta E_{x\sim P_{data}}^m [\log P_G(x;\theta)]\\<br/>
= arg \max\limits_\theta\int_xP_{data}(x)\log P_G(x;\theta)dx - \int_xP_{data}(x)\log P_{data}(x) dx \\<br/>
= arg \min\limits_\theta KL(P_{data}(x)||P_G(x;\theta))<br/>
\end{equation}<br/>
\]</p>

<p><strong>KL Divergence</strong>:  <code>KL Divergence</code> is  a measure of how one probability distribution diverges from a second expected probability distribution. For distributions \(P\) and \(Q\) of a continuous random variable, the Kullback-Leibler divergence is defined to be the intergral:</p>

<p>\[\begin{equation}<br/>
 D_{KL}(P|Q)=\int_{-\infty}^{\infty}p(x)\log\frac{p(x)}{q(x)}dx<br/>
 \end{equation}<br/>
 \]</p>

<p>Where \(p\) and \(q\) denote the densities of \(P\) and \(Q\).</p>

<h3 id="toc_1">\(P_G(x;\theta)\) is a NN</h3>

<p>It is hard to use Gaussian Mixture Model as \(P_G(x;\theta)\) to approximate \(P_{data}(x;\theta)\), because of the complicity of the data. A very good natural idea is trying to using neural network which is very powerful.</p>

<p><img src="media/15058297239665/Screen%20Shot%202017-09-19%20at%2010.36.46%20PM.png" alt="NN"/></p>

<p>However, it is Hard to learn by <code>maximum likelihood</code>.  <code>GAN</code> solves the problem.</p>

<h2 id="toc_2">Basic Idea of GAN</h2>

<ul>
<li>Generator G

<ul>
<li>G is a function, input \(z\), output \(x\)</li>
<li>Given a prior distribution \(P_{prior}(z)\), a probability distribution \(P_G (x)\) is defined by function G</li>
</ul></li>
<li>Discriminator D

<ul>
<li>D is a function, input \(x\), output scalar</li>
<li>Evaluate the “difference” between \(P_G(x)\) and \(P_{data}(x)\)</li>
</ul></li>
</ul>

<p>Objective: Given function \(V(G, D)\), to find \(G^* = arg \min \limits_G\max\limits_DV(G,D)\)</p>

<p>\[\begin{equation}<br/>
V = E_{x\sim P_{data}}[\log D(x)] + E_{x\sim P_G}[\log (1-D(x)]<br/>
\end{equation}<br/>
\]</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Kullback%E2%80%93Leibler_divergence">KL Divergence WEKIPEDIA</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Efficient Methods and Hardware for Deep Learning]]></title>
    <link href="http://larryim.cc/15057176549019.html"/>
    <updated>2017-09-18T14:54:14+08:00</updated>
    <id>http://larryim.cc/15057176549019.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Challenges</h2>

<ul>
<li>Model Size</li>
<li>Speed</li>
<li>Energy Efficiency</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[机器学习路线]]></title>
    <link href="http://larryim.cc/machine_learning_route.html"/>
    <updated>2017-09-18T10:12:47+08:00</updated>
    <id>http://larryim.cc/machine_learning_route.html</id>
    <content type="html"><![CDATA[
<p><img src="media/15057007673036/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0.png" alt="机器学习"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SqueezeNet]]></title>
    <link href="http://larryim.cc/SqueezeNet.html"/>
    <updated>2017-09-17T13:30:15+08:00</updated>
    <id>http://larryim.cc/SqueezeNet.html</id>
    <content type="html"><![CDATA[
<p><code>SqueezeNet</code> achieves <code>AlexNet</code>-level accuracy on ImageNet with 50x fewer parameters, offering at least three advantages:</p>

<ul>
<li>Less communications across servers</li>
<li>less bandwidth to export model</li>
<li>more feasible to deploy</li>
</ul>

<p>The <code>SqueezeNet</code>architecture is available for download <a href="https://github.com/DeepScale/SqueezeNet">here</a></p>

<h2 id="toc_0">Strategy</h2>

<ul>
<li>Replace \(3\times3\) filters with \(1\times1\) filters: 9X fewer parameters needed</li>
<li>Decrease the number of input channels to \(3\times3\) filters</li>
<li>Downsample late: large activation maps lead to higher accuracy.</li>
</ul>

<h3 id="toc_1">The Fire module</h3>

<p>A Fire module is comprised of a <code>squeeze layer</code> (which has only 1x1 filters), feeding into an <code>expand layer</code> that has a mix of 1x1 and 3x3 convolution filters.</p>

<p><img src="media/15056262155227/fire%20module.png" alt="fire module"/></p>

<p>The following function defines <code>Fire Module</code> by TensorFlow in Python</p>

<pre><code class="language-python">def fire_module(x,inp,sp,e11p,e33p):
    with tf.variable_scope(&quot;fire&quot;):
        with tf.variable_scope(&quot;squeeze&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,inp,sp])
            b = tf.get_variable(&quot;bias&quot;,shape=[sp])
            s = tf.nn.conv2d(x,W,[1,1,1,1],&quot;VALID&quot;)+b
            s = tf.nn.relu(s)
        with tf.variable_scope(&quot;e11&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[1,1,sp,e11p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e11p])
            e11 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;VALID&quot;)+b
            e11 = tf.nn.relu(e11)
        with tf.variable_scope(&quot;e33&quot;):
            W = tf.get_variable(&quot;weights&quot;,shape=[3,3,sp,e33p])
            b = tf.get_variable(&quot;bias&quot;,shape=[e33p])
            e33 = tf.nn.conv2d(s,W,[1,1,1,1],&quot;SAME&quot;)+b
            e33 = tf.nn.relu(e33)
        return tf.concat([e11,e33],3)
</code></pre>

<h3 id="toc_2">The SqueezeNet Architecture</h3>

<p><code>SqueezeNet</code> begins with a standalone convolution layer (conv1), followed by 8 <code>Fire modules</code> (ﬁre2-9), ending with a final conv layer (conv10).</p>

<p><img src="media/15056262155227/Squeezenet_Architecture.png" alt="Squeezenet_Architecture"/></p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Iandola F N, Han S, Moskewicz M W, et al. 2016. SqueezeNet- AlexNet-level accuracy with 50x fewer parameters and &lt; 0.5 MB model size</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visualizing and Understanding CNN]]></title>
    <link href="http://larryim.cc/Visualizing_and_understaning_CNN.html"/>
    <updated>2017-09-17T18:42:40+08:00</updated>
    <id>http://larryim.cc/Visualizing_and_understaning_CNN.html</id>
    <content type="html"><![CDATA[
<ol>
<li><strong>Saliency Maps</strong>: Saliency maps are a quick way to tell which part of the image influenced the classification decision made by the network.</li>
<li><strong>Fooling Images</strong>: We can perturb an input image so that it appears the same to humans, but will be misclassified by the pretrained network.</li>
<li><strong>Class Visualization</strong>: We can synthesize an image to maximize the classification score of a particular class; this can give us some sense of what the network is looking for when it classifies images of that class.</li>
</ol>

<h2 id="toc_0">Saliency Map</h2>

<p>A <strong>saliency map</strong> tells us the degree to which each pixel in the image affects the classification score for that image. To obtain <code>saliency map</code>, first compute the gradient of the unnormalized score corresponding to the correct class (which is a scalar) with respect to the pixels of the image. If the image has shape <code>(H, W, 3)</code> then this gradient will also have shape <code>(H, W, 3)</code>; for each pixel in the image, this gradient tells us the amount by which the classification score will change if the pixel changes by a small amount. Second, In the case of the multi-channel (e.g. RGB) image, take the absolute value of this gradient, then take the maximum value over the 3 input channels; the final saliency map thus has shape <code>(H, W)</code> and all entries are nonnegative.</p>

<h5 id="toc_1">The <code>Saliency Map</code> learnt by <code>SqueezeNet</code>, trained on the data of ImageNet ILSVRC 2012 Classification dataset are as follows:</h5>

<p><img src="media/15056449604256/saliency_map.png" alt="saliency_map"/></p>

<h2 id="toc_2">Fooling images</h2>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Karen Simonyan, Andrea Vedaldi, and Andrew Zisserman. &quot;Deep Inside Convolutional Networks- Visualising Image Classification Models and Saliency Maps</li>
<li>Szegedy et al, &quot;Intriguing properties of neural networks&quot;, ICLR 2014</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recurrent Neural Network]]></title>
    <link href="http://larryim.cc/15050418178399.html"/>
    <updated>2017-09-10T19:10:17+08:00</updated>
    <id>http://larryim.cc/15050418178399.html</id>
    <content type="html"><![CDATA[
<p>Recurrent Neural Network (循环神经网络)</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Image Captioning]]></title>
    <link href="http://larryim.cc/15050120680855.html"/>
    <updated>2017-09-10T10:54:28+08:00</updated>
    <id>http://larryim.cc/15050120680855.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Vanilla RNN</a>
</li>
<li>
<a href="#toc_1">LSTM</a>
</li>
<li>
<a href="#toc_2">COCO</a>
</li>
<li>
<a href="#toc_3">Reference</a>
</li>
</ul>


<h2 id="toc_0">Vanilla RNN</h2>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.08%20PM.png" alt="Vanilla RNN gradient flow"/></p>

<h2 id="toc_1">LSTM</h2>

<p>Long Short Term Memory (LSTM)</p>

<p>Backward flow of gradients in RNN can explode or vanish.</p>

<p>Exploding is controlled with gradient clipping. Vanishing is controlled with additive interactions (LSTM)</p>

<p><img src="media/15050120680855/Screen%20Shot%202017-09-10%20at%206.52.27%20PM.png" alt="LSTM"/></p>

<h2 id="toc_2">COCO</h2>

<p><code>COCO</code>（Common Objects in Context） is a large-scale <code>object detection</code>(物体检测), <code>semantic segmentation</code>(语义分割), and captioning dataset. <code>COCO</code> has several main features: <code>Object segmentation</code>, <code>Recognition in context</code>.</p>

<h2 id="toc_3">Reference</h2>

<ul>
<li>Tsung Y L, Michael M, Serge B, et al. Microsoft COCO: Common Objects in Context.  arXiv:<a href="https://arxiv.org/abs/1405.0312">1405.0312</a></li>
<li>Karpathy et al. Deep Visual-Semantic Alignments for Generating Image Descriptions, CVPR 2015</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Machine Learning (10): Large Scale Machine Learning]]></title>
    <link href="http://larryim.cc/15049402475273.html"/>
    <updated>2017-09-09T14:57:27+08:00</updated>
    <id>http://larryim.cc/15049402475273.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Learning with Large Datasets</a>
</li>
<li>
<a href="#toc_1">Stochastic Gradient Descent</a>
<ul>
<li>
<a href="#toc_2">Mini-Batch Gradient Descent</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">Stochastic Gradient Descent Convergence</a>
</li>
<li>
<a href="#toc_4">Online Learning</a>
</li>
<li>
<a href="#toc_5">Map Reduce and Data Parallelism</a>
</li>
</ul>


<h2 id="toc_0">Learning with Large Datasets</h2>

<p>We mainly benefit from a very large dataset when our algorithm has high variance when m is small. Recall that if our algorithm has high bias, more data will not have any benefit.</p>

<p>Datasets can often approach such sizes as m = 100,000,000. In this case, our gradient descent step will have to make a summation over all one hundred million examples. We will want to try to avoid this -- the approaches for doing so are described below.</p>

<h2 id="toc_1">Stochastic Gradient Descent</h2>

<p>Stochastic gradient descent is an alternative to classic (or batch) gradient descent and is more efficient and scalable to large data sets.</p>

<p>Stochastic gradient descent is written out in a different but similar way:</p>

<p>\(cost(\theta,(x^{(i)}, y^{(i)})) = \dfrac{1}{2}(h_{\theta}(x^{(i)}) - y^{(i)})^2\)</p>

<p>The only difference in the above cost function is the elimination of the m constant within \(\dfrac{1}{2}\).</p>

<p>\(J_{train}(\theta) = \dfrac{1}{m} \displaystyle \sum_{i=1}^m cost(\theta, (x^{(i)}, y^{(i)}))\)</p>

<p>\(J_{train}\) is now just the average of the cost applied to all of our training examples.</p>

<p>The algorithm is as follows</p>

<ol>
<li><p>Randomly &#39;shuffle&#39; the dataset</p></li>
<li><p>For \(i = 1\dots m\)</p></li>
</ol>

<p>\(\Theta_j := \Theta_j - \alpha (h_{\Theta}(x^{(i)}) - y^{(i)}) \cdot x^{(i)}_j\)</p>

<p>This algorithm will only try to fit one training example at a time. This way we can make progress in gradient descent without having to scan all m training examples first. Stochastic gradient descent will be unlikely to converge at the global minimum and will instead wander around it randomly, but usually yields a result that is close enough. Stochastic gradient descent will usually take 1-10 passes through your data set to get near the global minimum.</p>

<h3 id="toc_2">Mini-Batch Gradient Descent</h3>

<p>Mini-batch gradient descent can sometimes be even faster than stochastic gradient descent. Instead of using all m examples as in batch gradient descent, and instead of using only 1 example as in stochastic gradient descent, we will use some in-between number of examples b.</p>

<p>Typical values for b range from 2-100 or so.</p>

<p>For example, with b=10 and m=1000:</p>

<p>Repeat:</p>

<p>For \(i = 1,11,21,31,\dots,991\)</p>

<p>\(\theta_j := \theta_j - \alpha \dfrac{1}{10} \displaystyle \sum_{k=i}^{i+9} (h_\theta(x^{(k)}) - y^{(k)})x_j^{(k)}\)</p>

<p>We&#39;re simply summing over ten examples at a time. The advantage of computing more than one example at a time is that we can use vectorized implementations over the b examples.</p>

<h2 id="toc_3">Stochastic Gradient Descent Convergence</h2>

<p>How do we choose the learning rate α for stochastic gradient descent? Also, how do we debug stochastic gradient descent to make sure it is getting as close as possible to the global optimum?</p>

<p>One strategy is to plot the average cost of the hypothesis applied to every 1000 or so training examples. We can compute and save these costs during the gradient descent iterations.</p>

<p>With a smaller learning rate, it is <strong>possible</strong> that you may get a slightly better solution with stochastic gradient descent. That is because stochastic gradient descent will oscillate and jump around the global minimum, and it will make smaller random jumps with a smaller learning rate.</p>

<p>If you increase the number of examples you average over to plot the performance of your algorithm, the plot&#39;s line will become smoother.</p>

<p>With a very small number of examples for the average, the line will be too noisy and it will be difficult to find the trend.</p>

<p>One strategy for trying to actually converge at the global minimum is to <strong>slowly decrease α over time</strong> . For example \(\alpha = \dfrac{\text{const1}}{\text{iterationNumber + const2}}\)</p>

<p>However, this is not often done because people don&#39;t want to have to fiddle with even more parameters.</p>

<h2 id="toc_4">Online Learning</h2>

<p>With a continuous stream of users to a website, we can run an endless loop that gets (x,y), where we collect some user actions for the features in x to predict some behavior y.</p>

<p>You can update θ for each individual (x,y) pair as you collect them. This way, you can adapt to new pools of users, since you are continuously updating theta.</p>

<h2 id="toc_5">Map Reduce and Data Parallelism</h2>

<p>We can divide up batch gradient descent and dispatch the cost function for a subset of the data to many different machines so that we can train our algorithm in parallel.</p>

<p>You can split your training set into z subsets corresponding to the number of machines you have. On each of those machines calculate \(\displaystyle \sum_{i=p}^{q}(h_{\theta}(x^{(i)}) - y^{(i)}) \cdot x_j^{(i)}\), where we&#39;ve split the data starting at p and ending at q.</p>

<p>MapReduce will take all these dispatched (or &#39;mapped&#39;) jobs and &#39;reduce&#39; them by calculating:</p>

<p>\(\Theta_j := \Theta_j - \alpha \dfrac{1}{z}(temp_j^{(1)} + temp_j^{(2)} + \cdots + temp_j^{(z)})\)</p>

<p>For all \(j = 0, \dots, n\).</p>

<p>This is simply taking the computed cost from all the machines, calculating their average, multiplying by the learning rate, and updating theta.</p>

<p>Your learning algorithm is MapReduceable if it can be <u>expressed as computing sums of functions over the training set</u> . Linear regression and logistic regression are easily parallelizable.</p>

<p>For neural networks, you can compute forward propagation and back propagation on subsets of your data on many machines. Those machines can report their derivatives back to a &#39;master&#39; server that will combine them.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Batch Normalization]]></title>
    <link href="http://larryim.cc/batch_normalization.html"/>
    <updated>2017-09-08T11:16:27+08:00</updated>
    <id>http://larryim.cc/batch_normalization.html</id>
    <content type="html"><![CDATA[
<p>The idea is relatively straightforward. Machine learning methods tend to work better when their input data consists of uncorrelated features with <strong>zero mean</strong> and <strong>unit variance</strong>. When training a neural network, we can preprocess the data before feeding it to the network to explicitly decorrelate its features; this will ensure that the first layer of the network sees data that follows a nice distribution. However even if we preprocess the input data, the activations at deeper layers of the network will likely no longer be decorrelated and will no longer have zero mean or unit variance since they are output from earlier layers in the network. Even worse, during the training process the distribution of features at each layer of the network will shift as the weights of each layer are updated.</p>

<h2 id="toc_0">Covariate Shift</h2>

<p>While stochastic gradient is simple and effective, it requires careful tuning of the model hyper-parameters, specifically the learning rate used in optimization, as well as the initial values for the model parameters. The train- ing is complicated by the fact that the inputs to each layer are affected by the parameters of all preceding layers – so that small changes to the network parameters amplify as the network becomes deeper.</p>

<p>The change in the distribution of layers&#39; inputs presents a problem because the layers need to continuously adapt to the new distribution. When the input distribution to a learning system changes, it is said to experience <code>covariate shift</code>. This is typically handled via domain adaption.</p>

<p><code>Internal Covariate Shift</code> refers to the change in the distribution of internal nodes of a deep network due to change in network parameters, in the course of training. <code>Batch Normalization</code>, that takes a step towards reducing internal covariance shift, and in doing so dramatically accelerates the training of deep neural nets. It accomplishes this via a normalization step that fixes the means and variances of layer inputs. It also has a beneficial effect on the dependence of gradients on the scale of the parameters or of their initial values. This allows us to use much higher learning rates without the risk of divergence. </p>

<h2 id="toc_1">Algorithm</h2>

<h3 id="toc_2">Forward</h3>

<p>Given some input values \(\mathcal{B} = x^{(1)},...,x^{(m)}\) over a mini-batch in the layer \(l\) of neural network; </p>

<p>\[\mu_{\mathcal{B}} = \frac{1}{m}\sum_i^m x_i  \text{     (mini-batch mean)}\\<br/>
\sigma^2=\frac{1}{m}\sum_i(x_i-\mu_{\mathcal{B}})^2  \text{     (mini-batch variance)}\\<br/>
\hat{x}_i=\frac{x_i-\mu_{\mathcal{B}}}{\sqrt{\sigma_{\mathcal{\mathcal{B}}}^2+\varepsilon}} \text{     (normalize)}\\<br/>
y_i=\gamma \hat{x}_i+\beta \text{     (scale and shift)}<br/>
\]</p>

<p>At each iteration, we update the running averages for mean and variance using an exponential decay based on the momentum parameter:<br/>
<code><br/>
running_mean = momentum * running_mean + (1 - momentum) * sample_mean<br/>
running_var = momentum * running_var + (1 - momentum) * sample_var<br/>
</code></p>

<h2 id="toc_3">Backward</h2>

<p><img src="media/15048405877529/Screen%20Shot%202017-09-08%20at%203.11.45%20PM.png" alt="batch-normalization-backward"/></p>

<h3 id="toc_4">Test time</h3>

<p>Using trained <code>runing_mean</code> and <code>running_var</code> to take forward step.</p>

<h2 id="toc_5">TensorFlow</h2>

<p>Applying <code>Batch Normalization</code> in TensorFlow Model is very convenient. Just add one line of code in TensorFlow: <code>tf.nn.batch-normalization</code>.</p>

<h2 id="toc_6">Reference</h2>

<p>Sergey Ioffe, Christian Szegedy. 2015. Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift. arXiv:<a href="https://arxiv.org/abs/1502.03167v3">1501.02167v3</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TensorFlow Q]]></title>
    <link href="http://larryim.cc/15046658203135.html"/>
    <updated>2017-09-06T10:43:40+08:00</updated>
    <id>http://larryim.cc/15046658203135.html</id>
    <content type="html"><![CDATA[
<h3 id="toc_0">Q1: what&#39;s the difference between <code>tf.placeholder</code> and <code>tf.Variable</code></h3>

<p>In general, we use <code>tf.placeholder</code> to feed actual training examples, while using <code>tf.Variable</code> for parameters such as weights (\(W\)) and biases (\(b\)) for models.</p>

<p>With <code>tf.Variable</code>, we have to provide an initial value when declaring it. And we don&#39;t have to provide an initial value until running time with a <code>feed_dict</code>.</p>

<h3 id="toc_1">Q2: what&#39;s the difference between <code>tf.random_normal</code> and <code>tf.trucated_normal</code></h3>

<p><code>tf.trucated_normal</code> generates values following a normal distribution with specified mean and standard deviation, except that values whose magnitude is more than 2 standard deviations from the mean are dropped and re-picked.</p>

<pre><code>import tensorflow as tf
import matplotlib.pyplot as plt
%matplotlib inline
Session = tf.InteractiveSession()
</code></pre>

<pre><code>mean = 0.0
std = 1.0
shape = (10000,)
hist_range = (-5, 5)

A = tf.truncated_normal(shape, mean, std)
B = tf.random_normal(shape, mean, std)
a, b = Session.run([A, B])
</code></pre>

<pre><code>f, (ax1, ax2) = plt.subplots(2,1)
f1 = ax1.hist(a, bins= 100, range=hist_range)
f2 = ax2.hist(b, bins= 100, range=hist_range)
</code></pre>

<p><img src="media/15046658203135/output_2_0.png" alt="output_2_0"/></p>

<h3 id="toc_2">Q3: What&#39;s the difference between <code>tf.Variable</code> and <code>tf.get_variable</code></h3>

<p><code>tf.get_variable</code> will make it way easier to refactor code if you need to share variables at any time.</p>

<pre><code class="language-python">import tensorflow as tf

with tf.variable_scope(&quot;scope1&quot;):
    w1 = tf.get_variable(&quot;w1&quot;, shape=[2,3])
    w2 = tf.Variable(1.0, name=&quot;w2&quot;)
with tf.variable_scope(&quot;scope1&quot;, reuse=True):
    w1_p = tf.get_variable(&quot;w1&quot;, shape=[2,3])
    w2_p = tf.Variable(1.0, name=&quot;w2&quot;)

print(w1 is w1_p, w2 is w2_p)

#Output: True  False
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pandas]]></title>
    <link href="http://larryim.cc/15046649572570.html"/>
    <updated>2017-09-06T10:29:17+08:00</updated>
    <id>http://larryim.cc/15046649572570.html</id>
    <content type="html"><![CDATA[
<p>To convert a pandas <code>dataframe</code> (df) to a numpy <code>ndarray</code>, use this code:</p>

<pre><code>df=df.values
</code></pre>

<p>df now becomes a numpy <code>ndarray</code>.</p>

]]></content>
  </entry>
  
</feed>
