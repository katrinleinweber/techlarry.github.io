<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[techlarry]]></title>
  <link href="http://larryim.cc/atom.xml" rel="self"/>
  <link href="http://larryim.cc/"/>
  <updated>2018-01-20T07:57:41+08:00</updated>
  <id>http://larryim.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[虚拟内存和动态内存分配]]></title>
    <link href="http://larryim.cc/virtual_memory_and_dynamic_allocate.html"/>
    <updated>2018-01-20T07:09:22+08:00</updated>
    <id>http://larryim.cc/virtual_memory_and_dynamic_allocate.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">1 物理/虚拟寻址</h2>

<p>主存是由连续的<strong>字节大小</strong>的单元组成的数组，每字节都有一个唯一的<strong>物理地址</strong>(Physical Adress)。CPU访问使用物理地址访问内存的方式称为<strong>物理寻址</strong>(Physical adressing)。</p>

<p>早起的PC以及数字信号处理器等使用物理寻址，物理寻址示意：</p>

<p><img src="media/15164033620970/physical_address.png" alt="physical_address"/></p>

<p>现代处理器通过生成一个<strong>虚拟地址</strong>(Virtual Address)来访问主存，虚拟地址经过<strong>地址翻译</strong>转换为物理地址。地址翻译由CPU内的<strong>内存管理单元</strong>(Memory Management Unit, <code>MMU</code>)负责.</p>

<p><img src="media/15164033620970/virtual_memory%20.png" alt="virtual_memory "/></p>

<p>虚拟内存的三个角色：</p>

<ul>
<li>作为缓存的工具，可以更有效率的使用内存：使用DRAM当做部分的虚拟地址空间的缓存</li>
<li>作为内存管理的工具，简化内存管理：每个进程都有统一的线性地址空间</li>
<li>作为内存保护的工具，分隔地址空间：进程的内存不会相互影响；用户程序不能访问保密的内核信息和代码</li>
</ul>

<h2 id="toc_1">2 虚拟内存的三个角色</h2>

<h3 id="toc_2">2.1 作为缓存的工具</h3>

<p>可以把主存DRAM看作是虚拟内存的缓存，类似于L1、L2、L3高速缓存是DRAM内存的缓存。也就是说可以把虚拟内存看成是存储器层次结构的一部分。</p>

<p><img src="media/15164033620970/vm_as_cache.png" alt="vm_as_cache"/></p>

<p>和其他存储器层次结构中的缓存一样，较低层上的数据被分割成块，作为与较高层之间的传输单元。这里较低层是虚拟内存，分割成<strong>虚拟页</strong>(Virtual Page, VP)，虚拟页大小为\(P=2^p\)字节。类似的，这里的较高层，物理内存DRAM，被分割为<strong>物理页</strong>(Physical Page, PP)，大小也为\(P\)，也叫做页桢。</p>

<p>虚拟页的状态分为三种：</p>

<ul>
<li>未分配(Unallocated): 系统还未分配(创建)的页，不占用磁盘空间。</li>
<li>缓存的(Cached): 当前已缓存在物理内存中的已分配页。</li>
<li>未缓存的(Uncached): 未缓存在物理内存中的已分配页。</li>
</ul>

<p>那么具体是怎么判断一个虚拟页的状态呢？怎么知道虚拟页放在哪个物理页中呢？</p>

<p>物理内存中存在一个叫<strong>页表</strong>(page table)的数据结构，由操作系统负责。页表将虚拟页映射到物理页，每次内存管理单元中的<strong>地址翻译硬件</strong>将虚拟地址转换为物理地址时都会读取页表。</p>

<p>页表其实是一个页表条目(Page Table Entry, PTE)的数组。页表条目包含一个有效位(valid bit)和一个n位地址字段。</p>

<p><img src="media/15164033620970/page_table.jpg" alt="page_table"/></p>

<h3 id="toc_3">2.2 作为内存管理的工具</h3>

<h3 id="toc_4">2.3 作为内存保护的工具</h3>

<h2 id="toc_5">Linux虚拟内存系统</h2>

<p>虚拟内存(<code>Virtual Memory</code>)是一个抽象概念。它为每个进程提供了假象，即每个进程都在独占地使用内存。每个进程看到的内存都是一致的，称为虚拟地址空间<code>Virtual Address Space</code>.</p>

<p>虚拟内存在不同操作系统上有区别，以Linux系统为例,下面是<code>Linux  x86-64运行时的内存映像</code>。</p>

<p><img src="media/15089188725996/linux_virtual_memory.png" alt="linux_virtual_memory"/></p>

<p>虚拟地址空间由如下几部分组成：</p>

<ul>
<li>代码（<code>.text</code>）: 这里存放的是CPU要执行的指令。代码段是可共享的，相同的代码在内存中只会有一个拷贝，同时这个段是只读的，防止程序由于错误而修改自身的指令。</li>
<li>初始化数据段（<code>.data</code>）: 这里存放的是程序中需要明确赋初始值的变量，例如位于所有函数之外的全局变量：<code>int val=&quot;100</code>。需要强调的是，以上两段都是位于程序的可执行文件中，内核在调用<code>exec</code>函数启动该程序时从源程序文件中读入。</li>
<li>未初始化数据段（<code>.bss</code>）: 位于这一段中的数据，内核在执行该程序前，将其初始化为0或者<code>null</code>。例如出现在任何函数之外的全局变量：int sum;</li>
<li>堆（<code>Heap</code>）: 这个段用于在程序中进行动态内存申请，例如经常用到的<code>malloc</code>，<code>new</code>系列函数就是从这个段中申请内存。</li>
<li>共享库(<code>Shared Library</code>): 用来存放像C标准库和数学哭这样的共享库的代码和数据的区域。</li>
<li>栈（<code>Stack</code>）: 函数中的局部变量以及在函数调用过程中产生的临时变量都保存在此段中，具体见下面一节。</li>
<li>内核虚拟内存：包含内核中的代码和数据结构。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[同步/异步]]></title>
    <link href="http://larryim.cc/Sync.html"/>
    <updated>2018-01-18T18:36:07+08:00</updated>
    <id>http://larryim.cc/Sync.html</id>
    <content type="html"><![CDATA[
<p>...... 待续</p>

<p>。。。。。 待续</p>

<p>In computer science, synchronization refers to one of two distinct but related concepts: synchronization of processes, and synchronization of data. Process synchronization refers to the idea that multiple processes are to join up or handshake at a certain point, in order to reach an agreement or commit to a certain sequence of action. Data synchronization refers to the idea of keeping multiple copies of a dataset in coherence with one another, or to maintain data integrity. Process synchronization primitives are commonly used to implement data synchronization.</p>

<h2 id="toc_0">进程同步/异步</h2>

<h2 id="toc_1">同步通信和异步通信</h2>

<p>同步和异步通信(synchronous and asynchronous communication)：</p>

<ul>
<li>同步是指：发送方发出数据后，等接收方发回响应以后才发下一个数据包的通讯方式。<br/></li>
<li>异步是指：发送方发出数据后，不等接收方发回响应，接着发送下个数据包的通讯方式。</li>
</ul>

<p>可以通过打电话/发邮件的例子来理解，例子来自<a href="https://stackoverflow.com/questions/10102580/how-does-synchronous-and-asynchronous-communication-work-exactly">stackoverflow</a>。</p>

<p><strong>同步通信</strong>: 当我通过打电话叫你时，我拨打你的电话，然后<strong>等待</strong>你接听。然后在电话上你说了些内容，同时我在听。在你结束后，我给你发送了数据(也就是说话)，同时你接收了数据(听我说话)。在通信结束时，我们中的一个说<code>END OF TRANSMISSION</code>(就是再见)，另一个说<code>Acknoledged</code>(就是再见)，然后都挂断。</p>

<p><strong>异步通信</strong>：我写了一封信，拿到了邮局寄给你。在这期间，我<strong>没有等待</strong>，我做了很多其他的事情。然后你收到了邮件。在你阅读邮件的时候，我仍然再做其他的事情。然后你写给我了回信并寄给我。在这些事件中，都没有涉及到我。另一天，我得到了(同步)的信号(信件)来自系统(邮局)。系统(邮局)说，”这里有封信给你“。然后我停止我的工作，收你的邮件，阅读你的回信。然后我根据你的回信做了一些事情。但是这些事情你都不会注意到，因为你没有参与我对你异步回信所做的事情。</p>

<p><img src="media/15162717674930/15162746872367.gif" alt=""/></p>

<p>在串行通信中，由于是一位一位地进行数据传送。为了把每个字节区别开来，需要收发双方在传送数据的串行信息流中，加入一些标记信号位。在数据中根据所添加的标记信号位的不同方式，分成同步通信和异步通信两种。 </p>

<ul>
<li>“异步通信”是一种很常用的通信方式（效率较低）异步通信在发送字符时，发送端可以在任意时刻开始发送字符，因此必须在每一个字符的开始和结束的地方加上标志，即加上开始位和停止位，以便使接收端能够正确地将每一个字符接收下来。所传送的数据以字节为单位。每个字节前加上一位起始位，每个字节的后面加上停止位。好处：异步通信的好处是通信设备简单、便宜，但传输效率较低。</li>
<li>“同步通信” 通信双方必须先建立同步，即双方的时钟要调整到同一个频率。收发双方不停地发送和接收连续的同步比特流。一种是使用全网同步，用一个非常精确的主时钟对全网所有结点上的时钟进行同步。一种是使用准同步，各结点的时钟之间允许有微小的误差，然后采用其他措施实现同步传输。同步通信是把所传送的数据以多个字节（100字节以上）为单位，在其前后添加标志。</li>
</ul>

<h2 id="toc_2">执行同步/异步</h2>

<p>起源： Oddly enough &quot;Synchronously&quot; means &quot;using the same clock&quot; so when two instructions are synchronous they use the same clock and must happen one after the other. &quot;Asynchronous&quot; means &quot;not using the same clock&quot; so the instructions are not concerned with being in step with each other. That&#39;s why it looks backwards, the term is not referring to the instructions relationship to each other. It&#39;s referring to each instructions relationship to the clock. Hope that helps.</p>

<h2 id="toc_3">Critical Section Problem</h2>

<p>A Critical Section is a code segment that accesses shared variables and has to be executed as an atomic action. It means that in a group of cooperating processes, at a given point of time, only one process must be executing its critical section. If any other process also wants to execute its critical section, it must wait until the first one finishes.</p>

<p><img src="media/15162717674930/15162720157293.png" alt=""/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[信号]]></title>
    <link href="http://larryim.cc/Signal.html"/>
    <updated>2018-01-11T01:35:19+08:00</updated>
    <id>http://larryim.cc/Signal.html</id>
    <content type="html"><![CDATA[
<p>Linux信号，通知进程系统中发生一个某种类型的事件。每种信号类型都对应于某种系统事件。低层的硬件异常是由内核异常处理程序处理的，正常情况下，对用户进程而言是不可见的。下面是Linux系统上常见的信号：</p>

<p><strong>常见的信号</strong>：</p>

<table>
<thead>
<tr>
<th>编号</th>
<th>名称</th>
<th>默认动作</th>
<th>对应事件</th>
</tr>
</thead>

<tbody>
<tr>
<td>2</td>
<td>SIGINT</td>
<td>终止</td>
<td>来自键盘的中断CTRL+C</td>
</tr>
<tr>
<td>3</td>
<td>SIGQUIT</td>
<td>终止</td>
<td>来自键盘的退出CTRL+\</td>
</tr>
<tr>
<td>9</td>
<td>SIGKILL</td>
<td>终止</td>
<td>杀死程序 <code>\bin\kill -9</code></td>
</tr>
<tr>
<td>11</td>
<td>SIGSEGV</td>
<td>终止并转储内存</td>
<td>段故障(无效的内存引用)</td>
</tr>
<tr>
<td>15</td>
<td>SIGTERM</td>
<td>终止</td>
<td>软件终止信号<code>\bin\kill</code></td>
</tr>
<tr>
<td>17</td>
<td>SIGCHLD</td>
<td>忽略</td>
<td>子进程停止或终止</td>
</tr>
<tr>
<td>18</td>
<td>SIGCONT</td>
<td>忽略</td>
<td>继续进程如果该进程停止</td>
</tr>
<tr>
<td>20</td>
<td>SIGTSTP</td>
<td>停止直到下一个SIGCONT</td>
<td>用户输入CTRL+Z</td>
</tr>
</tbody>
</table>

<p>详细信息可以通过<code>man 7 signal</code>查询。</p>

<h2 id="toc_0">发送/接收信号</h2>

<p>传送一个信号到目的进程由发送、接收信号两个步骤组成：</p>

<ul>
<li>发送信号。内核通过更新目的进程上下文中的某个状态，发送(递送)一个信号给目的进程。</li>
<li>接收信号。当目的进程被内核强迫已某种方式对信号的发送做出反应时，它就接收了信号。进程可以忽略这个信号，终止或者通过执行一个称为<strong>信号处理程序</strong>的用户层函数捕获这个信号。</li>
</ul>

<h3 id="toc_1">发送信号</h3>

<p>发送信号可以由以下原因引起：</p>

<ul>
<li>用户：用户能够通过输入<code>CTRL+c</code>(<code>SIGINT</code>)、<code>Ctrl+z</code>(<code>SIGTSTP</code>)，或者是终端驱动程序分配给信号控制字符的其他任何键来请求内核产生信号；</li>
<li>内核：当进程执行出错时，内核会给进程发送一个信号，例如非法段存取(内存访问违规)、浮点数溢出等；</li>
<li>进程：一个进程可以通过系统调用kill给另一个进程或自己发送信号。</li>
</ul>

<h3 id="toc_2">接收信号</h3>

<p>当内核把进程\(p\)从内核模式切换到用户模式时，它会检查进程\(p\)的未被阻塞的待处理信号的集合(<code>pending&amp;~blocked</code>,见下文)，如果集合非空，那么内核强制\(p\)接收信号，触发进程采取某种行为。</p>

<p>进程接收到信号以后，可以有如下3种选择进行处理：</p>

<ul>
<li>接收默认处理：接收默认处理的进程通常会导致进程本身消亡。例如连接到终端的进程，用户按下CTRL+c，将导致内核向进程发送一个SIGINT的信号，进程如果不对该信号做特殊的处理，系统将采用默认的方式处理该信号，即终止进程的执行；</li>
<li>忽略信号：进程可以通过代码，显示地忽略某个信号的处理，例如：<code>signal(SIGINT,SIGDEF)</code>；但是某些信号是不能被忽略的，</li>
<li>捕获信号并处理：当接收到信号时，由信号处理程序自动捕获并且处理信号。</li>
</ul>

<pre><code class="language-C">sighandler_t signal(int signum, sighandler_t handler);
</code></pre>

<p>有两个信号既不能被忽略也不能被捕获，它们是<code>SIGKILL</code>和<code>SIGSTOP</code>。即进程接收到这两个信号后，只能接受系统的默认处理，即终止线程。</p>

<h2 id="toc_3">阻塞信号和进程回收</h2>

<p>一个发出而没有被接受的信号叫做<strong>未处理信号</strong>（Pending Signal）。进程可以选择阻塞（Block）某个信号。被阻塞的信号产生时将保持在未处理状态，直到进程解除对此信号的阻塞，才执行接收的动作。阻塞和忽略是不同的，<strong>只要信号被阻塞就不会接收</strong>，而忽略是在接收之后可选的一种处理动作。</p>

<p>Linux提供阻塞信号的隐式和显式机制:</p>

<ul>
<li><strong>隐式阻塞机制</strong>：内核默认阻塞任何当前处理程序正在处理信号类型的待处理的信号。如果在进程解除对某信号的阻塞之前这种信号产生过多次，只计一次。因为每个信号只有一个bit的未处理标志(如下图)，非0即1，不记录该信号产生了多少次，阻塞标志也是这样表示的。</li>
<li><strong>显式阻塞机制</strong>：应用<code>sigprocmask</code>函数，明确地阻塞和解除阻塞选定的信号。</li>
</ul>

<p>内核为每个进程在<strong>pending位向量</strong>中维护着待处理信号的集合，而在<strong>blocked位向量</strong>中维护着被阻塞的信号集合。信号在内核中的表示可以看作是这样的：</p>

<p><img src="media/15156057194882/15156070945641.png" alt=""/></p>

<p>每个信号都有两个标志位分别表示阻塞和未处理，还有一个函数指针表示处理动作。信号产生时，内核在进程控制块中设置该信号的未处理标志，直到信号接收才清除该标志。在上图的例子中，</p>

<ul>
<li>SIGHUP信号未阻塞也未产生过，当它接收时执行默认处理动作。</li>
<li>SIGINT信号产生过，但正在被阻塞，所以暂时不能接收。虽然它的处理动作是忽略，但在没有解除阻塞之前不能忽略这个信号，因为进程仍有机会改变处理动作之后再解除阻塞。</li>
<li>SIGQUIT信号未产生过，一旦产生SIGQUIT信号将被阻塞，它调用信号处理程序<code>sighandler</code>。</li>
</ul>

<h3 id="toc_4">隐式阻塞机制</h3>

<p>当多个未处理信号(<code>pending signal</code>)到达时，由于信号并不会产生排队等待这样的情况，所以产生的效果仅相当于一个未处理信号(也就是对应的<code>pending</code>位标记为1，例如上图中的<code>SIGINT</code>信号)。</p>

<p>这样带来几个问题：</p>

<ul>
<li>不能用信号来对其他进程中发生的事件计数，这是显而易见的</li>
<li>在回收子进程时，要回收尽可能多的子进程。例如下面这个例子。</li>
</ul>

<pre><code class="language-C">void handler1(int sig)   
{  
    pid_t pid;  
  
    if ((pid = waitpid(-1, NULL, 0)) &lt; 0)  
        unix_error(&quot;waitpid error&quot;);  
    printf(&quot;Handler reaped child %d\n&quot;, (int)pid);  
    Sleep(2);  
    return;  
}  

/* $begin signal2 */
void handler2(int sig) 
{
    int olderrno = errno;

    while (waitpid(-1, NULL, 0) &gt; 0) {
        Sio_puts(&quot;Handler reaped child\n&quot;);
    }
    // waitpid()函数有可能因为找不到子进程而报ECHILD错误
    if (errno != ECHILD)
        Sio_error(&quot;waitpid error&quot;);
    Sleep(1);
    errno = olderrno;
}
/* $end signal2 */

int main() 
{
    int i, n;
    char buf[MAXBUF];

    if (signal(SIGCHLD, handler2) == SIG_ERR) //handler2 或者 handler1
        unix_error(&quot;signal error&quot;);

    /* Parent creates children */
    for (i = 0; i &lt; 3; i++) {
        if (Fork() == 0) {
            printf(&quot;Hello from child %d\n&quot;, (int)getpid());
            exit(0);
        }
    }

    /* Parent waits for terminal input and then processes it */
    if ((n = read(STDIN_FILENO, buf, sizeof(buf))) &lt; 0)
        unix_error(&quot;read&quot;);

    printf(&quot;Parent processing input\n&quot;);
    while (1)
        ;

    exit(0);
}
</code></pre>

<p>在上面这个例子中，父进程创建一些子进程，这些子进程各自独立运行一段时间，然后终止。用<code>SIGCHLD</code>处理程序来回收子进程，其中<code>handler1</code>是错误的，会产生僵死子进程。<code>handler2</code>是安全的。原因是在<code>handler1</code>中，可能存在子进程先被执行，产生<code>SIGCHLD</code>信号；但是在子进程还未被回收之前，又有多个子进程被执行，产生多个<code>SIGCHLD</code>信号。于是多余的未处理<code>SIGCHLD</code>信号就被抛弃，只相当于一个<code>SIGCHLD</code>信号。最终会造成有的子进程未被回收，产生僵死子进程。</p>

<p>执行的可能结果如下，可以看到父进程只回收了两个子进程。</p>

<pre><code class="language-text">Hello from child 5617
Hello from child 5616
Hello from child 5618
Handler reaped child
Handler reaped child

Parent processing input
</code></pre>

<h3 id="toc_5">显式阻塞机制</h3>

<p>有时候不希望在发送信号后就立即去接收、处理信号，同时也不希望忽略该信号，那么可以通过<code>sigprocmask</code>显式地阻塞信号从而实现延迟接收信号。</p>

<p>函数<code>sigprocmask</code>可以更改当前阻塞的信号集合(即blocked位向量):</p>

<pre><code class="language-C">int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
</code></pre>

<p>其具体行为依赖于how值：</p>

<pre><code>SIG_BLOCK, blocked = blocked | set //添加set信号
SIG_UNBLOCK, blocked = blocked &amp; ~set //删除set信号
SIG_SETMASK, block = set //设置set信号为阻塞的信号
</code></pre>

<p>阻塞的信号集合其实就是一个无符号整型数组(在x86-64上，数组长度是16)。</p>

<pre><code class="language-C">/* A `sigset_t&#39; has a bit for each signal.  */
# define _SIGSET_NWORDS (1024 / (8 * sizeof (unsigned long int)))
typedef struct
{
    unsigned long int __val[_SIGSET_NWORDS];
} sigset_t;
</code></pre>

<p>还有其他的一些函数可以对信号集进行操作：</p>

<pre><code class="language-C">int sigfillset(sigset_t *set); // 信号集初始化, 然后把所有的信号加入到此信号集里
int sigemptyset(sigset_t *set); //信号集初始化为空
int sigaddset(sigset_t *set, int signo); //将信号signo添加到信号集中  
</code></pre>

<p>下面看个例子, 是一个具有细微同步错误的SHELL程序。如果子进程在父进程能够开始运行前就结束了，那么<br/>
<code>addjob()</code> 和 <code>deletejob()</code> 会以错误的方式被调用。这个程序希望父进程在一个作业列表中记录着它的当前子进程，每个作业条目。 <code>addjob()</code> 和 <code>deletejob()</code> 分别想这个作业列表添加和从中删除作业。当父进程创建一个新的子进程时，它就把这个子进程添加到作业列表中。当父进程在<code>SIGCHLD</code> 处理程序中回收一个终止的（僵死）子进程时，它就从作业列表中删除这个子进程。乍一看，这段代码是对的。不幸的是，可能发生下面的情况：</p>

<ul>
<li>1. 父进程执行<code>fork()</code>，内核调度新创建的子进程运行，而不是父进程</li>
<li>2. 在父进程能够再次运行之前，子进程就终止，并且变成一个僵死进程，使得内核传递一个<code>SIGCHLD</code>信号给父进程</li>
<li>3. 后来，当父进程再次变成可运行但又在它执行之前，内核注意到待处理的<code>SIGCHLD</code>信号，并通过在父进程中运行处理程序接收这个信号</li>
<li>4. 处理程序回收终止的子进程，并调用<code>deletejob()</code>，这个函数什么都不做，因为父进程还没有把该子进程添加到列表中</li>
<li>5. 在处理程序运行结束后，内核运行父进程，父进程从<code>fork()</code>返回，通过调用<code>addjob()</code> 错误地把（不存在的）子进程添加到作业列表中</li>
</ul>

<pre><code class="language-C">void handler(int sig)
{
        pid_t pid;
        while ((pid = waitpid(-1, NULL, 0)) &gt; 0) /* Reap a zombie child */
                deletejob(pid); /* Delete the child from the job list */
        if (errno != ECHILD)
                unix_error(&quot;waitpid error&quot;);
}

int main(int argc, char **argv)
{
        int pid;

        Signal(SIGCHLD, handler);
        initjobs();             /* Initialize the job list */

        while (1) {
                /* Child process */
                if ((pid = Fork()) == 0) {
                        Execve(&quot;/bin/date&quot;, argv, NULL);
                }

                /* Parent process */
                addjob(pid);    /* Add the child to the job list */
        }

        exit(0);
}
</code></pre>

<p>正确的做法应该如下,  通过在调用 <code>fork()</code> 之前，阻塞 <code>SIGCHLD</code> 信号，然后在我们调用了 <code>addjob()</code> 之后就取消阻塞这些信号，我们保证了在子进程被添加到作业列表之后回收该子进程。注意，子进程继承了它们父进程的被阻塞集合，所以我们必须在调用 <code>execve()</code> 之前，小心地解除子进程中阻塞的 <code>SIGCHLD</code> 信号。这样，父进程保证在相应的 <code>deletejob()</code> 之前执行 <code>addjob()</code>。</p>

<pre><code class="language-C">int main(int argc, char **argv)
{
    int pid;
    sigset_t mask_all, mask_one, prev_one;

    Sigfillset(&amp;mask_all);
    Sigemptyset(&amp;mask_one);
    Sigaddset(&amp;mask_one, SIGCHLD);
    Signal(SIGCHLD, handler);
    initjobs(); /* Initialize the job list */

    while (1) {
        Sigprocmask(SIG_BLOCK, &amp;mask_one, &amp;prev_one); /* Block SIGCHLD */
        if ((pid = Fork()) == 0) { /* Child process */
            Sigprocmask(SIG_SETMASK, &amp;prev_one, NULL); /* Unblock SIGCHLD */
            Execve(&quot;/bin/date&quot;, argv, NULL);
        }
        Sigprocmask(SIG_BLOCK, &amp;mask_all, NULL); /* Parent process */  
        addjob(pid);  /* Add the child to the job list */
        Sigprocmask(SIG_SETMASK, &amp;prev_one, NULL);  /* Unblock SIGCHLD */
    }
    exit(0);
}
</code></pre>

<h2 id="toc_6">信号处理程序</h2>

<p>信号处理程序(signal handler)是重要且棘手的一个问题。其难点在：</p>

<ul>
<li>处理程序与主程序并发运行，共享同样的全局变量，因此可能与主程序和其他处理程序相互干扰；</li>
<li>如何以及何时接收信号的规则常常违背人的直觉。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[链接]]></title>
    <link href="http://larryim.cc/Linking.html"/>
    <updated>2018-01-06T05:42:41+08:00</updated>
    <id>http://larryim.cc/Linking.html</id>
    <content type="html"><![CDATA[
<p>....待续<br/>
....待续<br/>
....待续<br/>
....待续</p>

<p>链接(Linking)是将各种代码和数据片段收集并组合成为一个单一文件的过程。链接可以在编译、加载、运行时执行。在现代系统中，链接是由连接器(Linker)自动执行的。</p>

<h2 id="toc_0">编译器驱动程序</h2>

<p>编译器驱动程序(<code>compiler driver</code>)，代表用户在需要时调用预处理器(cpp)、编译器(ccl)、汇编器(as)和链接器(ld)。典型的编译器驱动程序，包括GNU GCC, Clang。</p>

<p>例如，一个简单打印hello的<code>hello.c</code>程序，经过下面四个阶段，生成可执行目标文件：</p>

<pre><code class="language-C">//file: hello.c
#include &lt;stdio.h&gt;

int main()
{
    int i;
    printf(&quot;Hello World&quot;);
}
</code></pre>

<pre><code class="language-bash">linux &gt; gcc -o hello hello.c
</code></pre>

<p><img src="media/15151885614329/compiler_system.jpeg" alt="compiler_syste"/></p>

<h2 id="toc_1">目标文件</h2>

<p>目标文件有三种格式：可重定位目标文件(<code>.o</code>)，可执行目标文件(<code>.out</code>)，共享目标文件(<code>.so</code>)</p>

<ul>
<li>可重定位目标文件(.o文件)。包含二进制代码和数据，其形式可以在编译时与其他可重定位目标文件合并起来，创建一个可执行目标文件。</li>
<li>可执行目标文件(a.out文件)。包含二进制代码和数据，其形式可以被直接复制到内存并执行。</li>
<li>共享目标文件(.so文件)。在加载或者运行时被动态地加载进内存并链接</li>
</ul>

<p>各个系统的目标文件格式不同，Windows使用<strong>可移植可执行</strong>(Portable Executable, <code>PE</code>)格式。现代x86-64系统使用<strong>可执行可链接格式</strong>(Executable and Linkable Format, <code>ELF</code>)。</p>

<h3 id="toc_2">可重定位目标文件</h3>

<p>以可执行可链接(ELF)格式为例，一个典型的可重定位目标文件包括以下几个节：</p>

<ul>
<li>ELF头和节头部表</li>
<li><code>.text</code> 已编译程序的机器代码</li>
<li><code>.rodata</code> 只读数据</li>
<li><code>.data</code>  已初始化的全局和静态C变量</li>
<li><code>.bss</code>  未初始化的全局和静态C变量</li>
<li><code>.symtab</code> 一个符号表</li>
<li><code>.rel.text</code> 一个.text节中位置的列表</li>
<li><code>.rel.data</code> 重定位信息</li>
<li><code>.debug</code> 调试符号表</li>
<li><code>.line</code>  原始程序行号和机器指令之间的映射</li>
<li><code>.strtab</code>  字符串表</li>
</ul>

<p><img src="media/15151885614329/elf.png" alt="elf"/></p>

<p>利用<code>READELF</code>程序可以显示程序<code>hello.c</code>生成的可执行可链接文件的信息：</p>

<pre><code class="language-bash">gcc hello.c -c
readelf -a hello.o
</code></pre>

<pre><code class="language-text">ELF Header:
  Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
  Class:                             ELF64
  Data:                              2&#39;s complement, little endian
  Version:                           1 (current)
  OS/ABI:                            UNIX - System V
  ABI Version:                       0
  Type:                              REL (Relocatable file)
  Machine:                           Advanced Micro Devices X86-64
  Version:                           0x1
  Entry point address:               0x0
  Start of program headers:          0 (bytes into file)
  Start of section headers:          304 (bytes into file)
  Flags:                             0x0
  Size of this header:               64 (bytes)
  Size of program headers:           0 (bytes)
  Number of program headers:         0
  Size of section headers:           64 (bytes)
  Number of section headers:         13
  Section header string table index: 10

Section Headers:
  [Nr] Name              Type             Address           Offset
       Size              EntSize          Flags  Link  Info  Align
  [ 0]                   NULL             0000000000000000  00000000
       0000000000000000  0000000000000000           0     0     0
  [ 1] .text             PROGBITS         0000000000000000  00000040
       0000000000000015  0000000000000000  AX       0     0     1
  [ 2] .rela.text        RELA             0000000000000000  00000590
       0000000000000030  0000000000000018          11     1     8
  [ 3] .data             PROGBITS         0000000000000000  00000055
       0000000000000000  0000000000000000  WA       0     0     1
  [ 4] .bss              NOBITS           0000000000000000  00000055
       0000000000000000  0000000000000000  WA       0     0     1
  [ 5] .rodata           PROGBITS         0000000000000000  00000055
       000000000000000c  0000000000000000   A       0     0     1
  [ 6] .comment          PROGBITS         0000000000000000  00000061
       000000000000002c  0000000000000001  MS       0     0     1
  [ 7] .note.GNU-stack   PROGBITS         0000000000000000  0000008d
       0000000000000000  0000000000000000           0     0     1
  [ 8] .eh_frame         PROGBITS         0000000000000000  00000090
       0000000000000038  0000000000000000   A       0     0     8
  [ 9] .rela.eh_frame    RELA             0000000000000000  000005c0
       0000000000000018  0000000000000018          11     8     8
  [10] .shstrtab         STRTAB           0000000000000000  000000c8
       0000000000000061  0000000000000000           0     0     1
  [11] .symtab           SYMTAB           0000000000000000  00000470
       0000000000000108  0000000000000018          12     9     8
  [12] .strtab           STRTAB           0000000000000000  00000578
       0000000000000015  0000000000000000           0     0     1
Key to Flags:
  W (write), A (alloc), X (execute), M (merge), S (strings), l (large)
  I (info), L (link order), G (group), T (TLS), E (exclude), x (unknown)
  O (extra OS processing required) o (OS specific), p (processor specific)

There are no section groups in this file.

There are no program headers in this file.

Relocation section &#39;.rela.text&#39; at offset 0x590 contains 2 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000005  00050000000a R_X86_64_32       0000000000000000 .rodata + 0
00000000000f  000a00000002 R_X86_64_PC32     0000000000000000 printf - 4

Relocation section &#39;.rela.eh_frame&#39; at offset 0x5c0 contains 1 entries:
  Offset          Info           Type           Sym. Value    Sym. Name + Addend
000000000020  000200000002 R_X86_64_PC32     0000000000000000 .text + 0

The decoding of unwind sections for machine type Advanced Micro Devices X86-64 is not currently supported.

Symbol table &#39;.symtab&#39; contains 11 entries:
   Num:    Value          Size Type    Bind   Vis      Ndx Name
     0: 0000000000000000     0 NOTYPE  LOCAL  DEFAULT  UND
     1: 0000000000000000     0 FILE    LOCAL  DEFAULT  ABS hello.c
     2: 0000000000000000     0 SECTION LOCAL  DEFAULT    1
     3: 0000000000000000     0 SECTION LOCAL  DEFAULT    3
     4: 0000000000000000     0 SECTION LOCAL  DEFAULT    4
     5: 0000000000000000     0 SECTION LOCAL  DEFAULT    5
     6: 0000000000000000     0 SECTION LOCAL  DEFAULT    7
     7: 0000000000000000     0 SECTION LOCAL  DEFAULT    8
     8: 0000000000000000     0 SECTION LOCAL  DEFAULT    6
     9: 0000000000000000    21 FUNC    GLOBAL DEFAULT    1 main
    10: 0000000000000000     0 NOTYPE  GLOBAL DEFAULT  UND printf

No version information found in this file.
</code></pre>

<h2 id="toc_3">静态链接</h2>

<p>静态链接器有两个主要任务：</p>

<ul>
<li>符号解析(symbol resolution): 将每个符号 <u>引用</u> 正好和一个符号 <u>定义</u> 关联起来。</li>
<li>重定位(relocation): 把每个符号定义与一个内存位置关联起来，并修改所有对这些符号的引用，使得它们指向这个内存位置。</li>
</ul>

<h3 id="toc_4">符号解析</h3>

<p>符号解析是将每个符号引用和可重定位目标文件中的符号定义关联起来。链接器的输入是一组可重定位目标文件(模块)，有些是局部的( <u>局部符号</u> ，只对定义该符号的模块可见)，有些是全局的( <u>全局符号</u>，对其他模块可见)。</p>

<ul>
<li>局部符号：每个模块中每个局部符号有一个定义</li>
<li><p>全局符号：可重定位目标文件的符号表里的全局符号是区分<strong>强</strong>和<strong>弱</strong>的，链接器根据以下规则来处理多重定义的符号名：</p>

<ul>
<li>规则1: 不允许有多个同名的强符号</li>
<li>规则2: 如果有一个强符号和多个弱符号同名，那么选择强符号</li>
<li>规则3：如果有多个弱符号同名，那么任选一个 </li>
</ul></li>
</ul>

<h3 id="toc_5">重定位</h3>

<h2 id="toc_6">加载可执行目标文件</h2>

<p>当在shell中执行目标文件时，首先通过调用<strong>加载器</strong>(<code>loader</code>)的操作系统代码来运行它，加载器将可执行目标文件的代码和数据复制到主存，跳转到程序的第一条指令(入口点，<code>_start_</code>函数的地址)运行该程序。</p>

<p>在Unix系统中，加载器是系统调用(system call)<code>execve()</code>的回调(call back)，其任务包括：</p>

<ul>
<li>确认(权限，内存要求等)</li>
<li>复制程序到主存</li>
<li>复制命令行参数到栈</li>
<li>初始化寄存器(例如栈针)</li>
<li>跳到入口点(<code>_start_</code>)</li>
</ul>

<h2 id="toc_7">处理目标文件的工具</h2>

<ul>
<li><code>UNIX</code>系统提供了一系列命令帮助理解和处理目标文件。这些工具包括：</li>
<li><code>ar</code> ：创建静态库，插入、删除、列出和提取成员；</li>
<li><code>STRINGS</code> ：列出目标文件中所有可以打印的字符串；</li>
<li><code>STRIP</code> ：从目标文件中删除符号表信息；</li>
<li><code>NM</code> ：列出目标文件符号表中定义的符号；</li>
<li><code>SIZE</code> ：列出目标文件中节的名字和大小；</li>
<li><code>READELF</code> ：显示一个目标文件的完整结构，包括ELF 头中编码的所有信息。</li>
<li><code>OBJDUMP</code> ：显示目标文件的所有信息，最有用的功能是反汇编.text节中的二进制指令。</li>
<li><code>LDD</code> ：列出可执行文件在运行时需要的共享库。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python汇编代码]]></title>
    <link href="http://larryim.cc/python_assembly_code.html"/>
    <updated>2018-01-03T01:45:38+08:00</updated>
    <id>http://larryim.cc/python_assembly_code.html</id>
    <content type="html"><![CDATA[
<p>学完了汇编语言之后，非常好奇Python程序产生的汇编代码。其实Python作为一种解释语言，其源代码是直接被<code>CPython</code>编译器编译成字节码(<code>btyecode</code>)的；然后在虚拟机中依次解释执行字节码所对应的机器码(<code>machine code</code>)。当需要重用时，字节码以<code>.pyc</code>和<code>.pyo</code>文件存在。当再次运行代码时，虚拟机直接运行<code>.pyc</code>和<code>.pyo</code>文件，省去了重新编译的过程。</p>

<p>Python提供了<code>dis</code>模块，在代码运行时加入<code>-m dis</code>就可以得到源代码对应的汇编代码。其实<code>dis</code>在这里反汇编了字节码。</p>

<p>也可以在源代码中直接调用<code>dis</code>模块：</p>

<pre><code class="language-python">import dis
def f(x):
    return 1 &lt; x ** 2 &lt; 100

dis.dis(f)
</code></pre>

<p>得到的字节码指令(<code>byte code instruction</code>)如下所示：</p>

<pre><code>   4           0 LOAD_CONST               1 (1)
              3 LOAD_FAST                0 (x)
              6 LOAD_CONST               2 (2)
              9 BINARY_POWER
             10 DUP_TOP
             11 ROT_THREE
             12 COMPARE_OP               0 (&lt;)
             15 JUMP_IF_FALSE_OR_POP    25
             18 LOAD_CONST               3 (100)
             21 COMPARE_OP               0 (&lt;)
             24 RETURN_VALUE
        &gt;&gt;   25 ROT_TWO
             26 POP_TOP
             27 RETURN_VALUE
</code></pre>

<p>字节码指令的含义可以通过<a href="https://docs.python.org/2/library/dis.html#bytecodes">官方文件</a>查找。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[gdb]]></title>
    <link href="http://larryim.cc/gdb_tool_gnu.html"/>
    <updated>2018-01-01T04:54:40+08:00</updated>
    <id>http://larryim.cc/gdb_tool_gnu.html</id>
    <content type="html"><![CDATA[
<p><code>gdb</code>（GNU Debugger）作为一个调试工具，其功能强大。它可以调试断点、查看反汇编代码、指令级单步执行、查看寄存器、检查内存/栈，是程序员的得力助手。</p>

<h3 id="toc_0">调试信息</h3>

<p>要调试C/C++的程序，首先在编译时，我们必须要把调试信息(debugging symbols, 调试符号表)加到可执行文件中。使用编译器（cc/gcc/g++）的 <code>-g</code> 参数(Generate source-level debug information)可以做到这一点。</p>

<pre><code>g++ -g HelloWorld.cpp -o HelloWorld
</code></pre>

<h3 id="toc_1">常用命令</h3>

<ul>
<li><code>break &lt;location&gt;</code>

<ul>
<li>Stop execution at function name or address </li>
<li>Reset breakpoints when restarting gdb </li>
</ul></li>
<li><code>run &lt;args&gt;</code> 

<ul>
<li>Run program with args <args> </li>
<li>Convenient for specifying text file with answers</li>
</ul></li>
<li><code>disas &lt;fun&gt;</code>, but not dis </li>
<li><p><code>stepi</code> / <code>nexti</code> </p>

<ul>
<li>Steps / does not step through function calls</li>
</ul></li>
<li><p><code>info registers</code> </p>

<ul>
<li>Print hex values in every register </li>
</ul></li>
<li><p><code>print (/x or /d) $eax</code> - Yes, use $ </p>

<ul>
<li>Print hex or decimal contents of %eax </li>
</ul></li>
<li><p><code>x $register</code>, <code>x 0xaddress</code> </p>

<ul>
<li>Prints what’s in the register / at the given address</li>
<li>By default, prints one word (4 bytes) </li>
<li>Specify format: /s, /[num][size][format] *

<ul>
<li> x/8a 0x15213 *</li>
<li> x/4wd 0xdeadbeef</li>
</ul></li>
</ul></li>
<li><p><code>list</code>: view source code</p></li>
</ul>

<h3 id="toc_2">远程调试</h3>

<p>有时候需要调试的程序并不在本机上，<code>gdb</code>是支持远程调试的，具体命令如下：</p>

<pre><code>(gdb) target remote IP:PORT
</code></pre>

<p>这时<code>gdb</code>可以远程连接到被调试机器上，对程序进行调试。前提是在远端的机器上，必须要启动好<code>gdb</code>服务端程序。</p>

<h2 id="toc_3">TUI</h2>

<p>gdb tui（TextUser Interface）为dgb调试的文本用户界面，可以方便地显示源代码、汇编和寄存器文本窗口，tui使用效果如下图所示。</p>

<p><img src="media/15147536807060/gdb-tui.png" alt="gdb-tui"/></p>

<p>gdb tui可以直接运行<code>gdbtui</code>或者在gdb中用<code>ctrl-c, ctrl-a</code>打开。</p>

<p>上图中是打开了汇编窗口的，可通过命令<code>layout split</code>显示源代码和汇编窗口。其他常见的窗口显示命令为：</p>

<ul>
<li><code>layout src/asm/regs</code>：显示源代码/汇编/寄存器窗口</li>
<li><code>layout split</code>：显示源代码和汇编窗口</li>
<li><code>focus cmd/src/asm/regs</code>: 聚焦命令/源代码/汇编/寄存器窗口</li>
</ul>

<h2 id="toc_4">命令行参数</h2>

<p>很多程序在运行时都需要参数。例如下面C程序：</p>

<pre><code class="language-C">#include &lt;stdio.h&gt;
int main(int argc,char *argv[])
{
    int i = argc;
    printf(&quot;argc=%d\n&quot;,i);
        for(i = 0;i &lt; argc;i++)
        printf(&quot;argv[%d]=%s\n&quot;,i,argv[i]);
        return 1;
}
</code></pre>

<pre><code> ./demo_get_opt a b c
argc = 4
argv[0] = ./demo_get_opt
argv[1] = a
argv[2] = b
argv[3] = c
</code></pre>

<p>运行gbb时一共有三种方法可以指定参数。</p>

<p>第一种是在用<code>set args</code>指定参数</p>

<ul>
<li><code>set args</code> 可指定运行时参数。（如：<code>set args a b c</code>或者<code>set args -f 20 -t 40</code>）</li>
<li><code>show args</code> 命令可以查看设置好的运行参数。</li>
</ul>

<pre><code>(gdb) set args a b c
(gdb) r
Starting program: /home/vagrant/demo_get_opt a b c
argc = 4
argv[0] = /home/vagrant/demo_get_opt
argv[1] = a
argv[2] = b
argv[3] = c
</code></pre>

<p>第二种是在运行时设定参数</p>

<ul>
<li><code>r/run args</code> (如 <code>r a b c</code>)</li>
</ul>

<pre><code>(gdb) r a b c
argc = 4
argv[0] = /home/vagrant/demo_get_opt
argv[1] = a
argv[2] = b
argv[3] = c
</code></pre>

<p>第三种是在gdb启动时加上<code>--args</code>参数</p>

<pre><code>gdb --args  ./demo_get_opt a b c
</code></pre>

<h3 id="toc_5">查看struct及指针</h3>

<p>假设有结构体队列<code>queue</code>的指针数组<code>q</code>，指针<code>qi</code>指向<code>q</code>。</p>

<pre><code class="language-C">/* define a queue */
typedef struct {
    int size;
    int full_size;
    node *head;
    node *tail;
} queue;

queue *q, *qi; 
q = (queue *) malloc(sizeof(queue) * S);
qi = q;
</code></pre>

<p>可以通过<code>p *q</code>的 方式获得指针所指向结构体的值:</p>

<pre><code class="language-gdb">(gdb) p *q
$1 = {size = 0, full_size = 2, head = 0x0, tail = 0x0}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objdump 反汇编]]></title>
    <link href="http://larryim.cc/15147500497525.html"/>
    <updated>2018-01-01T03:54:09+08:00</updated>
    <id>http://larryim.cc/15147500497525.html</id>
    <content type="html"><![CDATA[
<p><code>objdump</code>是反汇编器(<code>disassembler</code>),可以将机器语言生成对应的汇编文件。常用的命令是</p>

<pre><code>linux &gt; objdump -d filename.o
</code></pre>

<p>下面通过一个简单的例子来说明一下<code>objdump</code>的常见用法，以及它生成的文件的格式。</p>

<p>假设写一个简单的C程序<code>test.c</code>如下：</p>

<pre><code class="language-C">int foo()
{
    int a = 5;
    int b = 0;
    b = a + 3;
}
</code></pre>

<p>用<code>gcc</code>命令<code>gcc test.c -c</code>生成目标文件<code>test.o</code>后, 利用<code>objdump -d test.o &gt; test.s</code>生成类似汇编文件：</p>

<pre><code>test.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 &lt;foo&gt;:
   0:   55                      push   %rbp
   1:   48 89 e5                mov    %rsp,%rbp
   4:   c7 45 f8 05 00 00 00    movl   $0x5,-0x8(%rbp)
   b:   c7 45 fc 00 00 00 00    movl   $0x0,-0x4(%rbp)
  12:   8b 45 f8                mov    -0x8(%rbp),%eax
  15:   83 c0 03                add    $0x3,%eax
  18:   89 45 fc                mov    %eax,-0x4(%rbp)
  1b:   5d                      pop    %rbp
  1c:   c3                      retq
</code></pre>

<p>可以看到的其实这个类似于汇编文件的格式是<code>elf64-x86-64</code>, 下一小节会简单的介绍这个格式。其中最重要的内容是从<code>0000000000000000 &lt;foo&gt;</code>开始到结束的部分。这部分从左到右依次是</p>

<ul>
<li>指令开始的地址<code>memory staring addresses</code></li>
<li>汇编代码对应的二进制指令<code>byte codes for instruction</code></li>
<li>汇编代码<code>assembly codes</code></li>
</ul>

<h3 id="toc_0">显示文件的符号表入口</h3>

<p><code>objdump -t</code> 命令会打印文件的符号表<code>symbol table</code>. 输出的文件一共有7列，从左到右依次是</p>

<ul>
<li>value</li>
<li>class</li>
<li>type</li>
<li>size</li>
<li>line</li>
<li>section</li>
<li>symbol-name</li>
</ul>

<h2 id="toc_1">elf64-x86-64 文件</h2>

<p><code>elf</code>是<code>Executable and Linkable Format</code>(可执行和可链接格式，<a href="http://larryim.cc/Linking.html">看本文</a>)的简称。<code>elf</code>文件格式及其复杂，如果只需要研究<code>objdump</code>产生的反汇编文件没有必要去专门学习<code>elf</code>格式。掌握下面几点，就可以阅读<code>objdump</code>产生的反汇编文件了。<code>objdump</code>产生的<code>elf</code>文件，主要包括以下几个部分：</p>

<ul>
<li>Disassembly of section .init</li>
<li>Disassembly of section .plt</li>
<li>Disassembly of section .text</li>
<li>Disassembly of section .fini</li>
</ul>

<p>下面是一个具体的文件，为了更简洁的展示，每一部分只保留了一小段内容：</p>

<pre><code>ctarget:     file format elf64-x86-64


Disassembly of section .init:

0000000000400c48 &lt;_init&gt;:
  400c48:   48 83 ec 08             sub    $0x8,%rsp
  400c4c:   e8 6b 02 00 00          callq  400ebc &lt;call_gmon_start&gt;
  400c51:   48 83 c4 08             add    $0x8,%rsp
  400c55:   c3                      retq   

Disassembly of section .plt:

0000000000400cb0 &lt;strcpy@plt&gt;:
  400cb0:   ff 25 6a 33 20 00       jmpq   *0x20336a(%rip)        # 604020 &lt;_GLOBAL_OFFSET_TABLE_+0x38&gt;
  400cb6:   68 04 00 00 00          pushq  $0x4
  400cbb:   e9 a0 ff ff ff          jmpq   400c60 &lt;_init+0x18&gt;


Disassembly of section .text:

00000000004011ad &lt;main&gt;:
  4011bb:   be c5 1d 40 00          mov    $0x401dc5,%esi
  4011c0:   bf 0b 00 00 00          mov    $0xb,%edi
  4011c5:   e8 86 fb ff ff          callq  400d50 &lt;signal@plt&gt;
  4011cf:   bf 07 00 00 00       
  401384:   c3                      retq   


Disassembly of section .fini:

0000000000402d74 &lt;_fini&gt;:
  402d74:   48 83 ec 08             sub    $0x8,%rsp
  402d78:   48 83 c4 08             add    $0x8,%rsp
  402d7c:   c3                      retq   

</code></pre>

<p>其中<code>.fini</code>部分是有关进程结束的指令。<code>.init</code>部分是有关进程启动的指令，在<code>main()</code>函数执行前会执行。<code>PLT</code>代表<code>Procedure Linkage Table</code>(过程链接表),用来调用在链接阶段未知的外部函数/过程的，在运行时它会动态链接。所以最重要的内容都在<code>.text</code>部分中。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[x86-64汇编]]></title>
    <link href="http://larryim.cc/15146536465849.html"/>
    <updated>2017-12-31T01:07:26+08:00</updated>
    <id>http://larryim.cc/15146536465849.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">汇编代码格式</h2>

<p>现在主要存在<code>ATT</code>和<code>Intel</code>两种汇编代码格式。<code>ATT</code>格式是<code>GCC</code>, <code>OBJDUMP</code>常用工具的默认格式。其他的诸如Microsoft的工具和来自Intel的文档都是<code>Intel</code>格式的。本文使用<code>ATT</code>格式。</p>

<p><code>ATT</code>汇编格式的注释格式有两种</p>

<pre><code># this is a comment
/* this is a comment */
</code></pre>

<h2 id="toc_1">寄存器</h2>

<p><code>x86-64</code>体系结构广泛存在于个人电脑中。它拥有16个整数寄存器，分别存储64位的值。这些寄存器可以存储地址或整数数据，其分布如下：</p>

<p><img src="media/15146536465849/sfd.png" alt="sfd"/></p>

<p>根据惯例，寄存器%rbx, %rbp和%r12~%r15被划分为<strong>被调用者保存寄存器</strong>。所有其他的寄存器，除了栈指针%rsp都分类为<strong>调用者保存寄存器</strong>。在函数被调用时，不能改变这些<strong>被</strong>调用者寄存器；如果要改变的话，只能把<strong>被</strong>调用者寄存器的值压入栈中，在使用后，从栈中恢复<strong>被</strong>调用者寄存器。</p>

<h3 id="toc_2">rip 寄存器与PC相对寻址</h3>

<p>%rip 的名称来自于(instruction pointer register,指令指针寄存器)。%rip其实就是程序计数器(Program Counter, PC), 存放着下一条指令的地址。不可以直接修改%rip。</p>

<p>-&gt; <code>instruction pointer = program counter = %rip</code></p>

<p>%rip的其他很重要的一个用法就是RIP/PC相对寻址(RIP/PC relative addressing)。即<code>%rip + displacement</code>的用法。</p>

<p>例如，</p>

<pre><code class="language-assembly">mov    0x202a62(%rip),%rdi        # 6044d0 &lt;infile&gt;  rdi = infile
</code></pre>

<p>表示传输%rip+0x202a62的地址对应的内存上的内容到%rdi。</p>

<p>下面说说它是怎么进行PC相对寻址的。源文件经过预处理器、编译器、汇编器处理，输出<strong>可重定位目标文件</strong>，再经过<strong>符号解析</strong>(Symbol resolution)把代码中的每个符号引用和一个符号定义关联起来之后，要完成<strong>重定位</strong>(Relocation)任务，最终输出<strong>可执行目标文件</strong>。在<strong>重定位</strong>阶段，ELF(可重定位目标文件在LINUX系统上的一种格式)文件中的<code>R_X86_64_PC32</code>重定位类型重定位了一个使用32位PC相对地址的引用。当CPU执行一条使用PC相对寻址的指令时，它就将在指令中编码的32位值加上PC的当前运行时值，得到<strong>有效地址</strong>。</p>

<h2 id="toc_3">指令</h2>

<p>指令主要有<code>mov</code>数据传送指令，<code>push</code>、<code>pop</code>压入和压出栈数据，<code>add</code>,<code>sub</code>等算数操作指令，<code>ret</code>, <code>call</code>等转移控制指令。</p>

<h3 id="toc_4">ret, call指令</h3>

<p>在x86-64上，ret指令，相当于从栈中弹出地址A，然后把PC设置为A。<br/>
<code>pop %rip</code><br/>
而call指令，刚好相反，把%rip 压入栈中，然后跳到函数对应的地址。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[tmux]]></title>
    <link href="http://larryim.cc/tmux_tool_linux.html"/>
    <updated>2017-12-25T21:45:39+08:00</updated>
    <id>http://larryim.cc/tmux_tool_linux.html</id>
    <content type="html"><![CDATA[
<p><code>tmux</code>有两个主要功能：</p>

<ul>
<li>Split窗口。可以在一个terminal下打开多个会话</li>
<li>避免网络不稳定。由于网络不稳定导致的SSH断开，在重新连接后，可以直接回到原来的工作环境。</li>
</ul>

<p><strong>安装</strong>: 在<code>mac</code>上可以通过<code>Homebrew</code>安装。</p>

<p><strong>运行</strong>:在终端下直接敲入<code>tmux</code>，就开启了一个<code>tmux</code>会话。</p>

<h2 id="toc_0">常用按键</h2>

<p>这里需要说明一点的是，<code>tmux</code>的任何指令，都包含一个前缀，也就是说，你按了前缀(一组按键， 默认是<code>Ctrl+b</code>)以后，系统才知道你接下来的指令是发送给<code>tmux</code>的。</p>

<ul>
<li><code>C-b ?</code> 显示快捷键帮助</li>
<li><code>C-b C-o</code> 调换窗口位置，类似与vim 里的C-w</li>
<li><code>C-b space</code> 采用下一个内置布局</li>
<li><code>C-b !</code> 把当前窗口变为新窗口</li>
<li><code>C-b “</code> 横向分隔窗口</li>
<li><code>C-b %</code> 纵向分隔窗口</li>
<li><code>C-b q</code> 显示分隔窗口的编号</li>
<li><code>C-b o</code> 跳到下一个分隔窗口</li>
<li><code>C-b 上下键</code> 上一个及下一个分隔窗口</li>
<li><code>C-b C-方向键</code> 调整分隔窗口大小</li>
<li><code>C-b c</code> 创建新窗口</li>
<li><code>C-b 0~9</code> 选择几号窗口</li>
<li><code>C-b c</code> 创建新窗口</li>
<li><code>C-b n</code> 选择下一个窗口</li>
<li><code>C-b l</code> 切换到最后使用的窗口</li>
<li><code>C-b p</code> 选择前一个窗口</li>
<li><code>C-b w</code> 以菜单方式显示及选择窗口</li>
<li><code>C-b t</code> 显示时钟</li>
<li><code>C-b ;</code> 切换到最后一个使用的面板</li>
<li><code>C-b x</code> 关闭面板</li>
<li><code>C-b &amp;</code> 关闭窗口</li>
<li><code>C-b s</code> 以菜单方式显示和选择会话</li>
<li><code>C-b d</code> 退出<code>tumx</code>，并保存当前会话，这时，<code>tmux</code>仍在后台运行，可以通过<code>tmux attach</code>进入 到指定的会话 </li>
</ul>

<h2 id="toc_1">配置</h2>

<p>与<code>vim</code>等其他工具一样，一旦配置好了<code>tmux</code>，使用起来就将会非常顺手。<code>tmux</code>的默认配置文件是<code>~/.tmux.conf</code></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OS161]]></title>
    <link href="http://larryim.cc/15142076431845.html"/>
    <updated>2017-12-25T21:14:03+08:00</updated>
    <id>http://larryim.cc/15142076431845.html</id>
    <content type="html"><![CDATA[
<p><a href="http://os161.eecs.harvard.edu">OS161</a>是哈佛大学推出的一款用于教学的操作系统。它运行在一个模拟器上，与BSD类似。目前的版本是2.x版本，支持多处理器和其他现代特性。</p>

<p><a href="http://os161.eecs.harvard.edu/resources/layout.html">OS161 layout</a></p>

<h2 id="toc_0">用gdb调试内核</h2>

<p>首先运行<code>kernel</code></p>

<pre><code>sys161 kernel
</code></pre>

<p>像正常一样运行<code>gdb</code></p>

<pre><code>gdb kernel
</code></pre>

<p>在完成加载后，在<code>gdb</code>中输入以下内容使其连接到<code>System/161</code></p>

<pre><code>target remote unix:.sockets/gdb
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ Ostream]]></title>
    <link href="http://larryim.cc/C_plus_plus_ostream.html"/>
    <updated>2017-12-16T16:31:39+08:00</updated>
    <id>http://larryim.cc/C_plus_plus_ostream.html</id>
    <content type="html"><![CDATA[
<ul>
<li>设定输出域宽度: <code>setw</code></li>
</ul>

<pre><code class="language-C++">// 设定域的输出长度为8，而实际字符串长度为4，所有前面补四个空格。
cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;;        // [    AAAA]
</code></pre>

<p>如果<code>setw</code>的数值小于实际数据长度，<code>setw</code>的值无效，比如上述例子：</p>

<pre><code class="language-C++">//因为3小于实际字符串长度4，最终输出整个字符串。
cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(3) &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;         // [AAAA]
</code></pre>

<ul>
<li>对齐方式：<code>left</code>/<code>right</code>/<code>internal</code></li>
</ul>

<p>在设定了输出域的宽度<code>setw</code>后，如果设置对齐方式，左对齐还是右对齐(缺省是右对齐(<code>right</code>))</p>

<pre><code class="language-C++"> cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; left &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;;       // [AAAA    ]
 cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; right &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;;      // [    AAAA]
 cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;;                    // [    AAAA]
</code></pre>

<ul>
<li>填充字符: <code>setfill</code></li>
</ul>

<p>域宽度不够时，还可以指定，用来代替缺省的空格</p>

<pre><code class="language-C++">//使用字符&#39;0&#39;作为填充
 cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;; // [0000AAAA]
 cout &lt;&lt; &quot;[&quot; &lt;&lt; setw(8) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; left &lt;&lt; &quot;AAAA&quot; &lt;&lt; &quot;]&quot;;    // [AAAA0000]
</code></pre>

<ul>
<li>输出正负号: <code>showpos</code></li>
</ul>

<pre><code class="language-C++"> cout &lt;&lt; &quot;[&quot; &lt;&lt; showpos &lt;&lt; 123 &lt;&lt; &quot;]&quot;;   // [+123]
 cout &lt;&lt; &quot;[&quot; &lt;&lt; showpos &lt;&lt; -456 &lt;&lt; &quot;]&quot;;  // [-456]
 cout &lt;&lt; &quot;[&quot; &lt;&lt; showpos &lt;&lt; 0 &lt;&lt; &quot;]&quot;;     // [+0]
</code></pre>

<ul>
<li>输出16进制数字值: <code>hex</code></li>
</ul>

<pre><code class="language-C++">cout &lt;&lt; &quot;[&quot; &lt;&lt; hex &lt;&lt; 20  &lt;&lt; &quot;]&quot;;   //  [14]
</code></pre>

<ul>
<li>可以加前缀<code>0x</code>: <code>showbase</code></li>
</ul>

<pre><code class="language-C++">cout &lt;&lt; &quot;[&quot; &lt;&lt; showbase &lt;&lt; hex &lt;&lt; setw(2) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; 5  &lt;&lt; &quot;]&quot;;  // [0x5]
</code></pre>

<ul>
<li>16进制值(A-F)大写: <code>uppercase</code></li>
</ul>

<pre><code class="language-C++">cout &lt;&lt; &quot;[&quot; &lt;&lt; hex &lt;&lt; uppercase &lt;&lt; setw(2) &lt;&lt; setfill(&#39;0&#39;) &lt;&lt; 10  &lt;&lt; &quot;]&quot;;  // [0A]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CMU 15-213 Introduction to Computer Systems]]></title>
    <link href="http://larryim.cc/introduction_to_computer_system_CMU.html"/>
    <updated>2017-12-14T13:22:02+08:00</updated>
    <id>http://larryim.cc/introduction_to_computer_system_CMU.html</id>
    <content type="html"><![CDATA[
<p>CMU 15-213 <code>Introduction to Computer Systems</code>是最受欢迎的计算机课之一。与这门课对应的课本CSAPP被各大名校所采用，也被无数学生拜读。课程内容涉及广泛、由浅入深，是进入计算机科学的最佳课程，也是各种击破BAT笔试题的必备良药(<a href="https://book.douban.com/review/5627139/">这篇帖子描述了笔试题所对应的章节</a>)。</p>

<p>非常幸运的是，CMU在网上分享了几乎所有课程资料，想学习课程的同学几乎可以和CMU学生一样学习该课程。</p>

<p>课程资料：</p>

<ul>
<li><a href="https://scs.hosted.panopto.com/Panopto/Pages/Sessions/List.aspx#folderID=%22b96d90ae-9871-4fae-91e2-b1627b43e25e%22&amp;sortColumn=0&amp;sortAscending=true">课程视频</a></li>
<li><a href="http://www.cs.cmu.edu/afs/cs/academic/class/15213-f15/www/schedule.html">课程主页</a>，包括了PPT，代码</li>
<li><a href="http://csapp.cs.cmu.edu">课本CSAPP主页</a>，包括了Lab资源。</li>
</ul>

<p>Lab攻略:</p>

<ul>
<li><a href="http://larryim.cc/wiki/2017/12/30/CSAPP-Attack-Lab/">Lab3 Attack Lab</a></li>
<li><a href="http://larryim.cc/wiki/2017/12/30/CSAPP-Cache-Lab/">Lab4 Cache Lab</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nand2Tetris: The elements of computing systems]]></title>
    <link href="http://larryim.cc/nand2tetris.html"/>
    <updated>2017-12-09T14:45:42+08:00</updated>
    <id>http://larryim.cc/nand2tetris.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">1.布尔逻辑 Boolean Logic</a>
</li>
<li>
<a href="#toc_1">2.布尔运算 Boolean Arithmetic</a>
</li>
<li>
<a href="#toc_2">3.时序逻辑 Sequential Logic</a>
</li>
<li>
<a href="#toc_3">4.机器语言 Machine Language</a>
</li>
<li>
<a href="#toc_4">5.计算机体系结构 Computer Architecture</a>
</li>
</ul>


<p><code>Nand2Tetris 计算机系统要素</code>是一门教你从零开始构建现代计算机的课程。该课程已经在Coursera上开设(分为上下两门课程)，有免费的课本和课程需要的代码，也有专门的论坛来交流学习，课程相关资源如下：</p>

<ul>
<li><a href="https://www.coursera.org/learn/build-a-computer">Coursera Course Part1</a></li>
<li><a href="https://www.coursera.org/learn/nand2tetris2">Coursera Course Part2</a></li>
<li><a href="http://nand2tetris.org">Nand2Tetris Project Homepage</a></li>
<li><a href="http://nand2tetris-questions-and-answers-forum.32033.n3.nabble.com">Nand2Tetris Questions and Answer Forum</a></li>
<li><a href="https://book.douban.com/subject/1998645/">Textbook: The elements of computing system</a></li>
</ul>

<p>该课程适合学生掌握了计算机入门课程和数据结构以后学习，课程涉及布尔逻辑及运算、机器语言、计算机体系结构、汇编、虚拟机、编译器、操作系统。课程内容与CMU的深入理解计算机系统不一样，个人感觉涉及面更广、更加注重实战。</p>

<p>下面是课程的简单总结：</p>

<h2 id="toc_0">1.布尔逻辑 Boolean Logic</h2>

<p><strong>多通道/多位Multiplexor</strong>: 一个拥有m个通道、每个通道数据宽度为n位的multiplexor选择器，将m个n位输入变量中选择一个并从其单一的n位输出总线上输出。可以用k个控制位来指定这个选择(\(k=\log_2 m\))。</p>

<p><strong>例</strong>：4通道16位的multiplexor(4-way Multiplexor):</p>

<p><img src="media/15128019428341/4-way%20multiplexor.png" alt="4-way multiplexo"/></p>

<p><strong>多通道/多位Demultiplexor</strong>: m通道、n位的demult<br/>
iplexor从m个可能的n位输出通道中选择一个n位的输入变量。可以用k个控制位来指定这个选择(\(k=\log_2 m\))。</p>

<p><strong>例</strong>：4-way Demultiplexor:</p>

<p><img src="media/15128019428341/4-way%20demultiplexor.png" alt="4-way demultiplexo"/></p>

<pre><code>/**
 * 4-way demultiplexor:
 * {a, b, c, d} = {in, 0, 0, 0} if sel == 00
 *                {0, in, 0, 0} if sel == 01
 *                {0, 0, in, 0} if sel == 10
 *                {0, 0, 0, in} if sel == 11
 */

CHIP DMux4Way {
    IN in, sel[2];
    OUT a, b, c, d;

    PARTS:
    DMux(in=in, sel=sel[1], a=c1, b=c2);
    DMux(in=c1, sel=sel[0], a=a, b=b);
    DMux(in=c2, sel=sel[0], a=c, b=d);

}
</code></pre>

<h2 id="toc_1">2.布尔运算 Boolean Arithmetic</h2>

<p>半加器(Half Adder): 进行二进制数加法的第一步就是要能够对两个二进制位进行相加。我们把结果的LSB(Least Significant Bit)称为sum，MSB(Most Significant Bit)称为carry。</p>

<p><img src="media/15128019428341/Half%20Adder.png" alt="Half Adde"/></p>

<p>HDL语言：</p>

<pre><code>CHIP HalfAdder {
    IN a, b;    // 1-bit inputs
    OUT sum,    // Right bit of a + b 
        carry;  // Left bit of a + b

    PARTS:
    And(a=a, b=b, out=carry);
    Xor(a=a, b=b, out=sum);
}
</code></pre>

<p>全加器：用来对三个位相加。</p>

<p><img src="media/15128019428341/Full%20Adder.png" alt="Full Adde"/></p>

<p>HDL 语言：</p>

<pre><code>CHIP FullAdder {
    IN a, b, c;  // 1-bit inputs
    OUT sum,     // Right bit of a + b + c
        carry;   // Left bit of a + b + c

    PARTS:
    HalfAdder(a=a, b=b, sum=sum1, carry=carry1);
    HalfAdder(a=c, b=sum1, sum=sum, carry=carry2);
    Or(a=carry1, b=carry2, out=carry);
}
</code></pre>

<p>加法器(Adder): 存储器和寄存器电路用n位的形式来表示整数，n可以是16、32、64等等, 这依赖于所在的计算机平台。进行n位加法的芯片称为多位加法器(multi-bit adder),或者简称为加法器。下图为16位加法器</p>

<p><img src="media/15128019428341/16-bits%20Adder.png" alt="16-bits Adde"/></p>

<p>HDL:</p>

<pre><code>CHIP Add16 {
    IN a[16], b[16];
    OUT out[16];

    PARTS:
   HalfAdder(a=a[0], b=b[0], carry=carry1, sum=out[0]);
   FullAdder(a=a[1], b=b[1], c=carry1, carry=carry2, sum=out[1]);
   FullAdder(a=a[2], b=b[2], c=carry2, carry=carry3, sum=out[2]);
   FullAdder(a=a[3], b=b[3], c=carry3, carry=carry4, sum=out[3]);
   FullAdder(a=a[4], b=b[4], c=carry4, carry=carry5, sum=out[4]);
   FullAdder(a=a[5], b=b[5], c=carry5, carry=carry6, sum=out[5]);
   FullAdder(a=a[6], b=b[6], c=carry6, carry=carry7, sum=out[6]);
   FullAdder(a=a[7], b=b[7], c=carry7, carry=carry8, sum=out[7]);
   FullAdder(a=a[8], b=b[8], c=carry8, carry=carry9, sum=out[8]);
   FullAdder(a=a[9], b=b[9], c=carry9, carry=carry10, sum=out[9]);
   FullAdder(a=a[10], b=b[10], c=carry10, carry=carry11, sum=out[10]);
   FullAdder(a=a[11], b=b[11], c=carry11, carry=carry12, sum=out[11]);
   FullAdder(a=a[12], b=b[12], c=carry12, carry=carry13, sum=out[12]);
   FullAdder(a=a[13], b=b[13], c=carry13, carry=carry14, sum=out[13]);
   FullAdder(a=a[14], b=b[14], c=carry14, carry=carry15, sum=out[14]);
   FullAdder(a=a[15], b=b[15], c=carry15, carry=carry, sum=out[15]);

}
</code></pre>

<p>算数逻辑单元(Arithmetic Logic Unit, ALU): 计算一组固定的函数\(out=f_i(x,y)\),这里\(x\)和\(y\)是芯片的两个16位输入，\(out\)是芯片的16位输出, \(f_i\)是位于一个函数表中的函数，该函数表通过6个控制位(control bit)的输入位(zx, nx, zy, ny, f, no)来告诉ALU用哪一个函数来进行何种计算。</p>

<p><img src="media/15128019428341/ALU.png" alt="ALU"/></p>

<p>HDL:</p>

<pre><code>*
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&amp;y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output &lt; 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2&#39;s complement addition
// if (f == 0)  set out = x &amp; y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out &lt; 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x &amp; y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out &lt; 0),  0 otherwise

    PARTS:
    // if (zx==1) set x = 0
    Mux16(a=x,b=false,sel=zx,out=zxout);

    // if (zy==1) set y = 0
    Mux16(a=y,b=false,sel=zy,out=zyout); 

    // if (nx==1) set x = ~x
    // if (ny==1) set y = ~y  
    Not16(in=zxout,out=notx);
    Not16(in=zyout,out=noty);
    Mux16(a=zxout,b=notx,sel=nx,out=nxout); 
    Mux16(a=zyout,b=noty,sel=ny,out=nyout);

    // if (f==1)  set out = x + y 
    // if (f==0)  set out = x &amp; y
    Add16(a=nxout,b=nyout,out=addout);
    And16(a=nxout,b=nyout,out=andout);
    Mux16(a=andout,b=addout,sel=f,out=fout);
    
    // if (no==1) set out = ~out
    // 1 if (out&lt;0),  0 otherwise
    Not16(in=fout,out=nfout);
    Mux16(a=fout,b=nfout,sel=no,out=out,out[0..7]=zr1,out[8..15]=zr2,out[15]=ng);
    
    //if (out==0), zr=1
    Or8Way(in=zr1,out=or1);
    Or8Way(in=zr2,out=or2);
    Or(a=or1,b=or2,out=or3);
    Not(in=or3,out=zr);

}
</code></pre>

<h2 id="toc_2">3.时序逻辑 Sequential Logic</h2>

<p>时钟(Clock)：在大多数计算机里，时间的流逝是用主时钟(master clock)来表示的，它提供连续的交变信号序列。其精确的硬件实现通常基于振荡器(oscillator),其在两个信号值0-1之间交替变化。两个响铃的时间间隔称为时钟的周期。</p>

<p>触发器(Flip-Flop): 计算机里最基本的时序单元，有多个变种。数据触发器(Data Flip-Flop, <code>DFF</code>)，其接口包含1比特位输入和1比特位输出。 <u>DFF简单地将前一个时间周期的输入值作为当前周期的输出</u> 。</p>

<p><img src="media/15128019428341/flip-flop.png" alt="flip-flop"/></p>

<p>寄存器(Registers): 具有记忆功能的设备，能“存储”某一时刻的值，实现经典的存储行为<code>out(t)=out(t-1)</code>。从另一个方面来说，DFF仅能够输出它前一时钟周期的输入，也就是<code>out(t)=in(t-1)</code>。寄存器分为地址寄存器(address register), 数据寄存器(data register), 程序计数器(program counter).</p>

<p><img src="media/15128019428341/registers.png" alt="registers"/></p>

<p>1-位寄存器:</p>

<pre><code class="language-hdl">/**
 * 1-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 *                 else out does not change (out[t+1] = out[t])
 */

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    Mux(a= out1, b=in,  sel=load, out=out2);
    DFF(in=out2, out=out1, out=out);
}
</code></pre>

<p><strong>寄存器</strong>：由1-位寄存器来构建w-位寄存器是非常简单的。所需要做的就是构建一组w比特门，然后将寄存器的load输入赋予每个门。</p>

<pre><code>CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in=in[0], load=load, out=out[0]);
    Bit(in=in[1], load=load, out=out[1]);
    Bit(in=in[2], load=load, out=out[2]);
    Bit(in=in[3], load=load, out=out[3]);
    Bit(in=in[4], load=load, out=out[4]);
    Bit(in=in[5], load=load, out=out[5]);
    Bit(in=in[6], load=load, out=out[6]);
    Bit(in=in[7], load=load, out=out[7]);
    Bit(in=in[8], load=load, out=out[8]);
    Bit(in=in[9], load=load, out=out[9]);
    Bit(in=in[10], load=load, out=out[10]);
    Bit(in=in[11], load=load, out=out[11]);
    Bit(in=in[12], load=load, out=out[12]);
    Bit(in=in[13], load=load, out=out[13]);
    Bit(in=in[14], load=load, out=out[14]);
    Bit(in=in[15], load=load, out=out[15]);
}
</code></pre>

<p><strong>内存</strong>(Memories):可以通过将寄存器堆叠起来形成 <u>随机存取存储器</u> (random access memory, <code>RAM</code>)。在RAM上能够随机访问被选择的字而不会受限于访问顺序，即随机存取存储器中的任何字都能以相等的速度被直接访问。</p>

<p><img src="media/15128019428341/RAM.png" alt="RA"/></p>

<p>RAM8:</p>

<pre><code class="language-hdl">/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux8Way(in=load, sel=address, a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
    Register(in=in, load=loada, out=outa);
    Register(in=in, load=loadb, out=outb);
    Register(in=in, load=loadc, out=outc);
    Register(in=in, load=loadd, out=outd);
    Register(in=in, load=loade, out=oute);
    Register(in=in, load=loadf, out=outf);
    Register(in=in, load=loadg, out=outg);
    Register(in=in, load=loadh, out=outh);
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address, out=out);
}
</code></pre>

<p>RAM64:</p>

<pre><code>/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load, sel=address[3..5], a=loada, b=loadb, c=loadc, d=loadd, e=loade, f=loadf, g=loadg, h=loadh);
    RAM8(in=in, load=loada, address=address[0..2], out=outa);
    RAM8(in=in, load=loadb, address=address[0..2], out=outb);
    RAM8(in=in, load=loadc, address=address[0..2], out=outc);
    RAM8(in=in, load=loadd, address=address[0..2], out=outd);
    RAM8(in=in, load=loade, address=address[0..2], out=oute);
    RAM8(in=in, load=loadf, address=address[0..2], out=outf);
    RAM8(in=in, load=loadg, address=address[0..2], out=outg);
    RAM8(in=in, load=loadh, address=address[0..2], out=outh);
    Mux8Way16(a=outa, b=outb, c=outc, d=outd, e=oute, f=outf, g=outg, h=outh, sel=address[3..5], out=out);  
}
</code></pre>

<p>计算机芯片分为两种：组合芯片(<code>combinational chip</code>)和时序芯片(<code>sequential chip</code> or <code>clocked chip</code>时钟芯片)。组合芯片的操作具有即时性(<code>instantaneous</code>)。时序芯片的操作受时钟控制，输入的改变只有在下一个时钟周期才反应到芯片的输出管脚上: <code>out(t)=out(t-1)</code>。</p>

<p><img src="media/15128019428341/combintional%20chip%20and%20sequential%20chip.png" alt="combintional chip and sequential chip"/></p>

<p>计数器(Counter): 计数器是一种时序芯片，它的状态是证书，每经过一个时间周期，该整数就增加1个单位，执行函数<code>out(t)=out(t-1)+c</code>，这里就是1。典型的CPU包括一个程序计数器(program couter, <code>PC</code>)，它的输出是当前程序中下一步将要执行的指令地址。</p>

<p>w-位计数器包含两个主要部分：一个常规的w-位寄存器和组合逻辑。组合逻辑用来：(a)执行计数功能；(b)根据控制位的3种不同的命令值，将计数器置于正确的操作模式。</p>

<p><img src="media/15128019428341/PC.png" alt="PC"/></p>

<pre><code>/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */
 
CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    Inc16(in=regout, out=plusone);
    Mux16(a=false, b=plusone, sel=inc, out=incout);
    Mux16(a=incout, b=in, sel=load, out=loadout);
    Mux16(a=loadout, b=false, sel=reset, out=toload);
    Or(a=load, b=reset, out=loadorreset);
    Or(a=loadorreset, b=inc, out=loadflag);
    Register(in=toload, load=loadflag, out=regout);
    Or16(a=regout, b=regout, out=out);
}
</code></pre>

<p>存储器层次结构(<a href="https://en.wikipedia.org/wiki/Memory_hierarchy">memory hierarchy</a>):</p>

<p><img src="media/15128019428341/memory%20hierarchy.png" alt="memory hierarchy"/></p>

<p><img src="media/15128019428341/15128077150126.png" alt=""/></p>

<h2 id="toc_3">4.机器语言 Machine Language</h2>

<p>机器语言用来对底层程序进行编码，从而形成一系列机器指令。应用这些指令，程序员可以命令处理器执行算数和逻辑餐座，在内存中进行存取操作，让数据在寄存器之间传递，验证布尔表达式的值，等等。机器语言的设计目标是直接运行在指定的硬件平台上，能够对这个平台进行全面操控；与机器语言相反，高级语言具有通用性和较强的表达能力。</p>

<p>机器语言是整个计算机题系统意义最深奥的接口 -- 它也是硬件和软件相接的中间线。因此，既可以将机器语言看作编程工作，也可以将其看作硬件平台内部不可分割的一部分。</p>

<h2 id="toc_4">5.计算机体系结构 Computer Architecture</h2>

<p>存储程序的概念：指令没有被嵌入到硬件中，而是被存储在计算机的存储设备(memory)里，当计算机载入不同的程序指令时，同样的硬件平台可以实现不同的功能。</p>

<p>冯·诺伊曼体系结构(概念上的):冯·诺伊曼体系结构的基础是一个中央处理单元(CPU),它与内存进行交互，负责从输入设备接收数据，向输出设备发送数据。</p>

<p><img src="media/15128019428341/%E5%86%AF%E8%AF%BA%E4%BC%8A%E6%9B%BC.png" alt="冯诺伊曼"/></p>

<p>RAM: RAM不光存储数据和指令，还可以通过 <u>内存映像</u> (Memory Maps) 在CPU和计算机输入/输出设备之间充当借口。下图中屏幕和键盘都通过内存映像与计算机平台进行接口。</p>

<p><img src="media/15128019428341/memory.png" alt="memory"/></p>

<pre><code>CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:

    DMux4Way(in=load, sel=address[13..14], a=ram1, b=ram2, c=screen, d=kbd);
    Or(a=ram1, b=ram2, out=ram);
    RAM16K(in=in, load=ram, address=address[0..13], out=ramout);
    Screen(in=in, load=screen, address=address[0..12], out=scrout);
    Keyboard(out=kbout);
    Mux4Way16(a=ramout, b=ramout, c=scrout, d=kbout, sel=address[13..14], out=out);
}
</code></pre>

<p>CPU包括执行指令的ALU、一组寄存器和一些用于取指令和对指令解码的控制逻辑(上上图)。用来执行下面的任务：</p>

<ul>
<li>指令解码(Instruction decoding):解析出指令所代表意思(指令的功能)。</li>
<li>指令执行(Instruction execution):发信号指示计算机的各个部分应该做什么工作来执行指令（指令的功能）。</li>
<li>读取下一条指令(Next instruction fetching):指出下一步执行哪一条指令（指令的功能以及ALU的输出）。</li>
</ul>

<p><img src="media/15128019428341/CPU_in_out.png" alt="CPU_in_out"/></p>

<pre><code>
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    // get type of instruction
    Not(in=instruction[15], out=Ainstruction);
    Not(in=Ainstruction, out=Cinstruction);
    
    And(a=Cinstruction, b=instruction[5], out=ALUtoA);    // C-inst and dest to A-reg?
    Mux16(a=instruction, b=ALUout, sel=ALUtoA, out=Aregin);
    
    Or(a=Ainstruction, b=ALUtoA, out=loadA);    // load A if A-inst or C-inst&amp;dest to A-reg
    ARegister(in=Aregin, load=loadA, out=Aout);
    
    Mux16(a=Aout, b=inM, sel=instruction[12], out=AMout);   // select A or M based on a-bit

    And(a=Cinstruction, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);    // load the D register from ALU
    
    ALU(x=Dout, y=AMout, zx=instruction[11], nx=instruction[10], 
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=ALUout, zr=ZRout, ng=NGout); // calculate
        
    // Set outputs for writing memory
    Or16(a=false, b=Aout, out[0..14]=addressM);
    Or16(a=false, b=ALUout, out=outM);
    And(a=Cinstruction, b=instruction[3], out=writeM);
    
    // calc PCload &amp; PCinc - whether to load PC with A reg
    And(a=ZRout, b=instruction[1], out=jeq);    // is zero and jump if zero
    And(a=NGout, b=instruction[2], out=jlt);    // is neg and jump if neg
    Or(a=ZRout, b=NGout, out=zeroOrNeg);
    Not(in=zeroOrNeg, out=positive);            // is positive (not zero and not neg)
    And(a=positive, b=instruction[0], out=jgt); // is pos and jump if pos
    Or(a=jeq, b=jlt, out=jle);
    Or(a=jle, b=jgt, out=jumpToA);              // load PC if cond met and jump if cond
    And(a=Cinstruction, b=jumpToA, out=PCload); // Only jump if C instruction
    Not(in=PCload, out=PCinc);                  // only inc if not load
    PC(in=Aout, inc=PCinc, load=PCload, reset=reset, out[0..14]=pc);
}
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PCA基础及在Spark中的应用]]></title>
    <link href="http://larryim.cc/PCA.html"/>
    <updated>2017-11-28T22:32:35+08:00</updated>
    <id>http://larryim.cc/PCA.html</id>
    <content type="html"><![CDATA[
<p>主成分分析(Principal Component Analysis, PCA)主要是用来可视化数据和数据压缩。</p>

<p>PCA的目的是找到一组可以代表原始数据的低维数据。设原始数据为\(X\in \mathbf{R}^{n\times d}\)，有\(d\)个特征。压缩后的数据为\(\mathbf{Z=XP} \in \mathbf{R}^{n\times k}\), 有\(k\)个特征(feature)。</p>

<p>那么找到的这\(k\)个特征，有什么好的约束呢？<br/>
（Variance/Covariance constraints）</p>

<ul>
<li>这k个特征无关，也就是说协相关矩阵除对角线以外的元素全部为0</li>
<li>应该根据特征的方差(variance)选择，越大越好。因为variance越大，越能代表feature。也就是说应该选择协相关矩阵对角元素大的feature。</li>
</ul>

<p>所以 \(\mathbf{P}\)应该等于X的协方差矩阵的最大\(k\)个特征向量。</p>

<p>协方差矩阵的分布式求解方法见本博客<a href="http://larryim.cc/covariance_spark.html">Covariance Matrix and its solution in Spark</a></p>

<p>下面是特征分解的基础知识，可以在线性代数课本上找到：</p>

<p>特征分解(Eigendecomposition)是将矩阵分解为由特征值和特征向量表示矩阵之积的方法。</p>

<p>令 \(A\)是一个\(N\times N\)的方阵，且有\(N\)个线性无关的特征向量\(q_i(i=1,...,N)\)。这样，A可以被分解为<br/>
\[\mathbf{A=Q\Lambda Q}^{-1}\]<br/>
其中\(\mathbf{Q}\)是\(N\times N\)的方阵，且其第\(i\)列为\(A\)的特征向量\(q_i\)。\(\mathbf{\Lambda}\)是对角矩阵，其对角线上的元素为对应的特征值，也即\(\Lambda_{ii}=\lambda_i\).</p>

<p>那么，怎么样选择\(k\)的大小呢？一般认为保留99%或95%的variance. 由于协方差矩阵的对角元素就是对应特征向量的特征值，又是variance，所以我们选择k个对角元素，保留所要求的variance:</p>

<p>\[\text{find} \min k \quad \text{s.t.} \frac{\sum^k_{i=1}\lambda_i}{\sum^k_{i=1}\lambda_i} &gt; 99\%\]</p>

<h2 id="toc_0">PCA in Spark</h2>

<p>在python 中使用 <code>numpy.linalg.eigh</code>计算特征值和特征向量.</p>

<p>基本步骤如下：</p>

<ul>
<li>计算协方差矩阵 <code>estimateCovariance()</code></li>
<li>计算主成分和对应方差 <code>pca()</code></li>
<li>计算保留的成分比例<code>varianceExplained()</code></li>
</ul>

<pre><code class="language-Python">def estimateCovariance(data):
    &quot;&quot;&quot;Compute the covariance matrix for a given rdd.

    Args:
        data (RDD of np.ndarray):  An `RDD` consisting of NumPy arrays.

    Returns:
        np.ndarray: A multi-dimensional array where the number of rows and columns both equal the
            length of the arrays in the input `RDD`.
    &quot;&quot;&quot;
    mean = data.mean()
    normalized = data.map(lambda x: x-mean)
    return normalized.map(lambda x: np.outer(x, x)).sum()/data.count()
    
def pca(data, k=2):
    &quot;&quot;&quot;Computes the top `k` principal components, corresponding scores, and all eigenvalues.


    Args:
        data (RDD of np.ndarray): An `RDD` consisting of NumPy arrays.
        k (int): The number of principal components to return.

    Returns:
        tuple of (np.ndarray, RDD of np.ndarray, np.ndarray): A tuple of (eigenvectors, `RDD` of
            scores, eigenvalues).  Eigenvectors is a multi-dimensional array where the number of
            rows equals the length of the arrays in the input `RDD` and the number of columns equals
            `k`.  The `RDD` of scores has the same number of rows as `data` and consists of arrays
            of length `k`.  Eigenvalues is an array of length d (the number of features).
    &quot;&quot;&quot;
    cov = estimateCovariance(data)
    eigVals, eigVecs = eigh(cov)
    inds = np.argsort(eigVals)[::-1]
    topkComponent = eigVecs[:,inds[0:k]]
    scores = data.map(lambda x: np.dot(x, topkComponent))
    # Return the `k` principal components, `k` scores, and all eigenvalues
    return (topkComponent, scores, eigVals[inds])
    
    
def varianceExplained(data, k=1):
    &quot;&quot;&quot;Calculate the fraction of variance explained by the top `k` eigenvectors.

    Args:
        data (RDD of np.ndarray): An RDD that contains NumPy arrays which store the
            features for an observation.
        k: The number of principal components to consider.

    Returns:
        float: A number between 0 and 1 representing the percentage of variance explained
            by the top `k` eigenvectors.
    &quot;&quot;&quot;
    components, scores, eigenvalues = pca(data)
    return sum(eigenvalues[0:k])/sum(eigenvalues)
</code></pre>

<h2 id="toc_1">应用</h2>

<p>斑马鱼(zebrafish)大脑的响应<a href="http://larryim.cc/ML_lab5_pca_student.html">可视化</a>。</p>

<h2 id="toc_2">Reference</h2>

<ol>
<li>Machine Learning Course from Coursera. Andrew Ng</li>
<li>CS190: Scalable Machine Learning</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Covariance Matrix and its solution in Spark]]></title>
    <link href="http://larryim.cc/covariance_spark.html"/>
    <updated>2017-12-05T21:31:54+08:00</updated>
    <id>http://larryim.cc/covariance_spark.html</id>
    <content type="html"><![CDATA[
<p>A <code>covariance matrix</code>(协方差矩阵, 离差矩阵) is a matrix whose element in the \(i,j\) position is the covariance between the \(i^{th}\) and \(j^{th}\) elements of a <code>random vector</code>(随机向量,多元随机变量). Each element of a random vector is a scalar <code>random variable</code>(随机变量).</p>

<p>Because the covariance of the \(i^{th}\) random variable with itself is simply that random variable&#39;s variance, each element on the principal diagonal of the covariance matrix is the variance of one of the random variables:</p>

<p>The covariance between random variables \(X, Y\):</p>

<p>\[\text{cov}(X,Y)=\text{E}[(X-E[X])(Y-E[Y])]\]</p>

<p>Then the covariance matrix \(\sum\) is the matrix whose \((i,j)\) is the covariance</p>

<p>\[\sum(i,j) =\text{cov}(X_i,X_j)=\text{E}[(X_i-E[X_i])(Y_i-E[Y_i])]\]</p>

<p>where \(X=[X_1,...,X_n]\)</p>

<h2 id="toc_0">Distributed Computing: Spark</h2>

<p>Setup: Raw data \(\mathbf{P} \in \mathbb{R}^{n \times d}\)</p>

<ul>
<li>Step 1: Zero Mean Data \(X=\text{E}(P)\)

<ul>
<li>Compute \(d\) feature means, \(m\in \mathbf{R}^d\)</li>
<li>Communication \(m\) to all workers</li>
<li>Subtract \(m\) from each data point</li>
</ul></li>
<li>Step 2: Compute Covariance Matrix \( \mathbf{C}_{\mathbf X} = \frac{1}{n} \mathbf{X}^\top \mathbf{X} \,.\)

<ul>
<li>compute the outer product of each data point, </li>
<li>add together these outer products, and divide by the number of data points</li>
</ul></li>
</ul>

<p><img src="media/15124807146530/compute_covariance_matrix.png" alt="compute_covariance_matrix"/></p>

<p><u>Spark Code in Python</u>:</p>

<pre><code class="language-python">def estimateCovariance(data):
    &quot;&quot;&quot;Compute the covariance matrix for a given rdd.
   
    Args:
        data (RDD of np.ndarray):  An `RDD` consisting of NumPy arrays.

    Returns:
        np.ndarray: A multi-dimensional array where the number of rows and columns both equal the length of the arrays in the input `RDD`.
    &quot;&quot;&quot;
    mean = data.mean()
    normalized = data.map(lambda x: x-mean)
    return normalized.map(lambda x: np.outer(x, x)).sum()/data.count()
</code></pre>

<h2 id="toc_1">Reference</h2>

<ol>
<li><a href="https://en.wikipedia.org/wiki/Covariance_matrix">Covariance matrix from wikipedia</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Data Science Competition]]></title>
    <link href="http://larryim.cc/data_science_competition.html"/>
    <updated>2017-11-23T22:40:12+08:00</updated>
    <id>http://larryim.cc/data_science_competition.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">real-world application v. s.competition</h2>

<p><img src="media/15114480120681/real%20machine%20learning.png" alt="real machine learning"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MongoDB]]></title>
    <link href="http://larryim.cc/15114445635476.html"/>
    <updated>2017-11-23T21:42:43+08:00</updated>
    <id>http://larryim.cc/15114445635476.html</id>
    <content type="html"><![CDATA[
<p><code>NoSQL</code>(<code>Not Only Sql</code>，非关系型数据库)，最初是为了大规模web应用，具有分布式、开源、可水平扩展等特点。它满足了对数据库高并发读写、对海量数据的高效率存储和访问、对数据库的高扩展性和高可用性的需求。</p>

<h2 id="toc_0">数据逻辑结构</h2>

<p><code>MongoDB</code>的逻辑结构主要由文档(<code>document</code>)、集合(<code>collection</code>)、数据库(<code>database</code>)这三部分组成的。</p>

<h2 id="toc_1">replica set</h2>

<p><code>Replica sets</code> distribute data across two or more machines for redundancy and automate failover in the event of server and network outages. <u>if the primary node fails, the cluster will pick a secondary node and automatically promote it to primary. When the former primary comes back online, it’ll do so as a secondary.</u></p>

<p><img src="media/15114445635476/replica%20set.png" alt="replica set"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[`Filter`, `Map`, `Reduce`]]></title>
    <link href="http://larryim.cc/15108229432607.html"/>
    <updated>2017-11-16T17:02:23+08:00</updated>
    <id>http://larryim.cc/15108229432607.html</id>
    <content type="html"><![CDATA[
<pre><code class="language-python">&gt;&gt;&gt; foo = [2, 18, 9, 22, 17, 24, 8, 12, 27]
&gt;&gt;&gt; print filter(lambda x: x % 3 == 0, foo)
[18, 9, 24, 12, 27]
&gt;&gt;&gt; 
&gt;&gt;&gt; print map(lambda x: x * 2 + 10, foo)
[14, 46, 28, 54, 44, 58, 26, 34, 64]
&gt;&gt;&gt; 
&gt;&gt;&gt; print reduce(lambda x, y: x + y, foo)
139
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CS190: Scalable Machine Learning]]></title>
    <link href="http://larryim.cc/scalable%20machine%20learning.html"/>
    <updated>2017-11-16T14:52:20+08:00</updated>
    <id>http://larryim.cc/scalable%20machine%20learning.html</id>
    <content type="html"><![CDATA[
<p>see <a href="http://larryim.cc/notebook.html">Labs here</a></p>

<h3 id="toc_0">Distributing Computing</h3>

<p>Need more hardware to store/process modern data</p>

<p>Scale-up(one big machine)</p>

<ul>
<li>Can be very fast for medium scale problems</li>
<li>Expensive, specialized hardware</li>
<li>Eventually hit a wall</li>
</ul>

<p>Scale-out (many small machine, i.e., distributed)</p>

<ul>
<li>Commodity hardware, scales to massive problems</li>
<li>Need to deal with network communication</li>
<li>Added software complexity</li>
</ul>

<p>Apache Spark is a general, open-source cluster computing engine.</p>

<p>Well-suited for machine learning</p>

<ul>
<li>Fast iterative computations</li>
<li>Efficient communication primitives</li>
<li>Simple and expressive: APIs in Scala, Java, Python, R</li>
<li>Integrated higher-level libraries (<code>MLlib</code>, Spark SQL, Spark Streaming, GraphX)</li>
</ul>

<h3 id="toc_1">Typical Supervised Learning Pipeline</h3>

<ul>
<li>Obtain Raw Data</li>
<li>Feature Extraction</li>
<li>Supervised Learning</li>
<li>Evaluation</li>
<li>Predict</li>
</ul>

<p><img src="media/15108151409015/Typical%20Supervised%20Learning%20Pipeline.png" alt="Typical Supervised Learning Pipeline"/></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[`MLlib`: Machine Learning in Apache Spark]]></title>
    <link href="http://larryim.cc/15108128842368.html"/>
    <updated>2017-11-16T14:14:44+08:00</updated>
    <id>http://larryim.cc/15108128842368.html</id>
    <content type="html"><![CDATA[
<p>[<a href="https://arxiv.org/pdf/1505.06807.pdf">https://arxiv.org/pdf/1505.06807.pdf</a>]</p>

]]></content>
  </entry>
  
</feed>
