<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[techlarry]]></title>
  <link href="http://larryim.cc/atom.xml" rel="self"/>
  <link href="http://larryim.cc/"/>
  <updated>2017-08-09T16:51:17+08:00</updated>
  <id>http://larryim.cc/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming (4): Optimal Binary Search Tree]]></title>
    <link href="http://larryim.cc/Dynamic_Programming_Optimal_Binary_Search_Tree.html"/>
    <updated>2017-08-09T16:42:39+08:00</updated>
    <id>http://larryim.cc/Dynamic_Programming_Optimal_Binary_Search_Tree.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming (2): Sequence Alignment]]></title>
    <link href="http://larryim.cc/Dynamic_Programming_Sequence_Aligment.html"/>
    <updated>2017-08-09T16:42:06+08:00</updated>
    <id>http://larryim.cc/Dynamic_Programming_Sequence_Aligment.html</id>
    <content type="html"><![CDATA[

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming (3): Knapsack Problem]]></title>
    <link href="http://larryim.cc/Dynamic_Programming_Knapsack_Problem.html"/>
    <updated>2017-08-09T16:41:03+08:00</updated>
    <id>http://larryim.cc/Dynamic_Programming_Knapsack_Problem.html</id>
    <content type="html"><![CDATA[
<p>The most common problem being solved is the <code>0-1 knapsack problem</code>, which restricts the number \(w_i\) of copies of each kind of item to zero or one. Given a set of \(n\) items numbered from 1 up to \(n\), each with a weight \(w_i\) and a value \(v_i\), along with a maximum weight capacity \(W\),</p>

<p>\[\begin{equation}<br/>
\begin{split}<br/>
&amp;\text{maximize} \sum_{i=1}^nv_ix_i\\<br/>
&amp;\text{subject to} \sum_{i=1}^n w_ix_i \le W \quad \text{and} \quad x_i \in \{0,1\}\\<br/>
\end{split}<br/>
\end{equation}\]</p>

<p>Informally, the problem is to maximize the sum of the values of the items in the knapsack so that the sum of the weights is less than or equal to the knapsack&#39;s capacity.</p>

<h3 id="toc_0">Solving</h3>

<p>Assume \(w_i, w_2,..., w_n, W\) are strictly positive integers. Define \(m[i,w]\) to be the maximum value that can be attained with weight less than or queal to \(w\) using items up to \(i\) (first \(i\) items).</p>

<p>We can define \(m[i,w]\) recursively as follows:</p>

<ul>
<li>\(m[0, w]=0 \)</li>
<li>\(m[i,w]=m[i-1, w]\) \(if w_i &gt; w\) ( the new item is more than the current weight limit)</li>
<li>\(m[i,w]= max(m[i-1,w],m[i-1,w-w_i]+v_i\)) if \(w_i \le w\)</li>
</ul>

<p>The following is pseudo code for the dynamic program:</p>

<pre><code class="language-python">// Input:
// Values (stored in array v)
// Weights (stored in array w)
// Number of distinct items (n)
// Knapsack capacity (W)
  
for j from 0 to W do:
     m[0, j] := 0
  
for i from 1 to n do:
    for j from 0 to W do:
        if w[i] &gt; j then:
            m[i, j] := m[i-1, j]
        else:
            m[i, j] := max(m[i-1, j], m[i-1, j-w[i]] + v[i])
</code></pre>

<h3 id="toc_1">Implementation</h3>

<pre><code class="language-python">def knapsack01(value, weight, w_size):
    &quot;&quot;&quot;
    kanapsack01 solves a 0-1 knapsack problem,
    input: values(value) and weights(W) of items to put into knapsack ( size of which is w_size)
    output: the index of items that maximize the value of items putted in the knapsack
    the index of items counts from 0, and corresponding value
    &quot;&quot;&quot;
    n = len(value)  # the number of items
    # maximum value that can be attained with weight &lt;= weight using first i items
    m = np.zeros(shape=(n+1, w_size+1), dtype=int)
    for i in range(w_size+1):
        m[0, i] = 0

    if not isinstance(w_size, int):
        raise ValueError(&#39;knapsack_size should be an integer&#39;)

    for i in range(1, n+1):  # items
        for j in range(1, w_size+1):  # sizes
            if weight[i-1] &gt; j:
                m[i, j] = m[i - 1, j]
            else:
                m[i, j] = max(m[i - 1, j], m[i - 1, j - weight[i-1]] + value[i-1])

    max_val = m[-1, -1]
    items = set()

    while max_val &gt; 0 and i &gt; 0:
        if max_val - value[i-1] in m[i - 1, :]:
            max_val = max_val - value[i-1]
            items.add(i-1)
            i -= 1
        else:
            i -= 1
    return items, m[-1, -1]
</code></pre>

<h2 id="toc_2">Reference</h2>

<ul>
<li><a href="https://en.wikipedia.org/wiki/Knapsack_problem#cite_ref-plateau85_15-0">Knapsack Problem WIKIPEDIA</a></li>
<li><a href="https://stackoverflow.com/questions/5683066/knapsack-problem-classic">Knapsack problem Stack Overflow</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Programming (1): Introduction]]></title>
    <link href="http://larryim.cc/Dynamic_Programming_Introduction.html"/>
    <updated>2017-08-08T15:48:13+08:00</updated>
    <id>http://larryim.cc/Dynamic_Programming_Introduction.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Dynamic programming v.s. Divide-and-conquer algorithm</a>
</li>
<li>
<a href="#toc_1">Application: Minimum weight independent set</a>
<ul>
<li>
<a href="#toc_2">Proposed algorithm</a>
</li>
<li>
<a href="#toc_3">Implementation</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">Optimal Binary Search Tree</a>
</li>
<li>
<a href="#toc_5">Reference</a>
</li>
</ul>


<p><code>Dynamic programming</code> is a method for solving a complex problem by breaking it down into a collection of simpler subproblems, solving each of those subproblems just once, and storing their solutions. It stores solutions to subproblems instead of recomputing them(called <code>memoization</code> technique).</p>

<h2 id="toc_0">Dynamic programming v.s. Divide-and-conquer algorithm</h2>

<p><code>Divide-and-conquer</code> algorithms partition the problem into disjoint subproblems, solve the subproblems recursively, and then combine their solutions to solve the original problem. In contrast, <code>dynamic programming</code> partition the problem into subproblems that overlaps, that is, subproblems share subproblems.</p>

<h2 id="toc_1">Application: Minimum weight independent set</h2>

<p><strong>Input</strong>: A path graph \(G=(V,E)\) with nonnegative weights on vertices.<br/>
<strong>Output</strong>: an <code>independent set</code> of maximum total weight.</p>

<p><strong>Background</strong>:<br/>
A <code>path graph</code> is a tree with two nodes of vertex degree 1, and the other \(n-2\) nodes of vertex degree 2. A path graph is therefore a graph that can be drawn so that all of its vertices and edges lie on a single straight line.</p>

<p>A <code>Independent set</code> is a set of vertices in a graph, no two of which are adjacent.</p>

<h3 id="toc_2">Proposed algorithm</h3>

<ul>
<li>Recursively compute \(S_1=\) max-weight independent set of \(G&#39;\)</li>
<li>Recursively compute \(S_2=\) max-weight independent set of \(G&quot;\)</li>
<li>Return \(S_1\) or \(S_2 \cup{v_n}\), whichever is better.</li>
</ul>

<h3 id="toc_3">Implementation</h3>

<pre><code class="language-python">def maximum_weight_independent_set(weights):
    &quot;&quot;&quot;
    Compute Maximum weight independent set for a path graph.
    Weights of vertexes in the path graph are given.
    Return maximum weight independent set.
    &quot;&quot;&quot;
    num = len(weights)
    a = [0] * (num + 1)
    in_set = []  # independent set
    a[0], a[1] = 0, weights[0]

    for i in range(2, num + 1):
        a[i] = max(a[i - 1], a[i - 2] + weights[i - 1])

    while i &gt;= 1:
        if a[i - 1] &gt;= a[i - 2] + weights[i - 1]:
            i -= 1
        else:
            in_set.append(i - 1)
            i -= 2
    in_set.reverse()
    return in_set
</code></pre>

<h2 id="toc_4">Optimal Binary Search Tree</h2>

<h2 id="toc_5">Reference</h2>

<ul>
<li><a href="http://ac.els-cdn.com/S0304397596003209/1-s2.0-S0304397596003209-main.pdf?_tid=1505980e-7cd4-11e7-83de-00000aacb361&amp;acdnat=1502263778_53b76d131a06906e9fe3adfadc778677">Optimal Binary Search Tree</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Huffman Coding]]></title>
    <link href="http://larryim.cc/15020346646852.html"/>
    <updated>2017-08-06T23:51:04+08:00</updated>
    <id>http://larryim.cc/15020346646852.html</id>
    <content type="html"><![CDATA[
<h2 id="toc_0">Implementation</h2>

<pre><code class="language-python">from queue import PriorityQueue

class HuffmanNode:
    def __init__(self, left, right):
        self.left_child = left
        self.right_child = right


def huffman_coding(freqs):
    pq = PriorityQueue()
    for value in freqs:
        pq.put(value)

    while pq.qsize() &gt; 1:
        l, r = pq.get(), pq.get()
        node = HuffmanNode(l, r)
        pq.put((l[0]+r[0], node))
    return pq.get()


def walk_tree(node, prefix=&quot;&quot;, code={}):
    if isinstance(node[1], HuffmanNode):
        walk_tree(node[1].left_child, prefix + &quot;0&quot;, code)
        walk_tree(node[1].right_child, prefix + &quot;1&quot;, code)
    else:
        code[node[1]] = prefix

    return code




freq = [ (8.167, &#39;a&#39;), (1.492, &#39;b&#39;), (2.782, &#39;c&#39;), (4.253, &#39;d&#39;),
    (12.702, &#39;e&#39;), (2.228, &#39;f&#39;), (2.015, &#39;g&#39;), (6.094, &#39;h&#39;),
    (6.966, &#39;i&#39;), (0.153, &#39;j&#39;), (0.747, &#39;k&#39;), (4.025, &#39;l&#39;),
    (2.406, &#39;m&#39;), (6.749, &#39;n&#39;), (7.507, &#39;o&#39;), (1.929, &#39;p&#39;),
    (0.095, &#39;q&#39;), (5.987, &#39;r&#39;), (6.327, &#39;s&#39;), (9.056, &#39;t&#39;),
    (2.758, &#39;u&#39;), (1.037, &#39;v&#39;), (2.365, &#39;w&#39;), (0.150, &#39;x&#39;),
    (1.974, &#39;y&#39;), (0.074, &#39;z&#39;)]

root_node = huffman_coding(freq)
code = walk_tree(root_node)
for i in sorted(freq, reverse=True):
    print(i[1], &#39;{:6.2f}&#39;.format(i[0]), code[i[1]])
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clustering on big graph]]></title>
    <link href="http://larryim.cc/clustering%20on%20big%20graph.html"/>
    <updated>2017-08-05T14:51:39+08:00</updated>
    <id>http://larryim.cc/clustering%20on%20big%20graph.html</id>
    <content type="html"><![CDATA[
<p><strong>Question</strong>: what is the largest value of k such that there is a <code>k-clustering</code> with spacing at least 3?  That is, how many clusters are needed to ensure that no pair of nodes with all but 2 bits in common get split into different clusters?</p>

<p><strong>Input</strong>: <br/>
[first bit of node 1] … [last bit of node 1]<br/>
[first bit of node 2] … [last bit of node 2]</p>

<p>For example, the third line of the file “0 1 1 0 0 1 1 0 0 1 0 1 1 1 1 1 1 0 1 0 1 1 0 1″ denotes the 24 bits associated with node #2.</p>

<p><strong>Background</strong>:<br/>
The distance between two nodes \(u\) and \(v\) in this problem is defined as the <code>Hamming distance</code>--- the number of differing bits --- between the two nodes&#39; labels. </p>

<p><strong>Note</strong>: NOTE: The graph implicitly defined by the data file is so big that you probably can&#39;t write it out explicitly, let alone sort the edges by cost. So you will have to be a little creative to complete this part of the question. For example, is there some way you can identify the smallest distances without explicitly looking at every pair of nodes?</p>

<h2 id="toc_0">METHOD</h2>

<ul>
<li>We put all the nodes into a hash table, which of size is \(2^n\), where \(n=24\) is the length of input bits. </li>
</ul>

<p><strong>Detail</strong>: We use <code>list</code> to represent the hash table in python, of which index will be the numerical value of the input, and value will be the node number index. The node number index also denotes where each node is own cluster (i.e index of cluster).</p>

<ul>
<li>In order to find a \(k\)-clustering with spacing at least 3, we just need to find neighbors that the distance between neighbors and nodes are 1 or 2.</li>
</ul>

<p><strong>Detail</strong>: We use bit manipulation to find potential   neighbors of a node. According to <code>Hamming distance</code>, the distance means the number of differing bits. Since the distance should be 1 or 2, neighbor of node are such points that differ  from node in no more than 2 bits. Total number of potential neighbor is \(C^2_{24}+C^1_{24} = 300\) . The property of XOR is used to compute its neighbors directly: </p>

<pre><code class="language-python">if x ^ y == z: 
    x ^ z = y 
</code></pre>

<p>Hence, In order to find neighbors \(y\), we just compute <code>x^z</code>, where \(z\) is no more than 3 1s in the 24-bit binary integer.</p>

<ul>
<li>In order to keep track of connected clusters, the <code>disjoint-set</code> data structure is used here.</li>
</ul>

<h2 id="toc_1">Procedure</h2>

<pre><code class="language-python">for each node in Graph (200K iterations):
    for each code that is 0 or 1 or 2 units apart from this vertex:
        Add these 2 vertexes to a cluster.
</code></pre>

<h2 id="toc_2">Implementation</h2>

<pre><code class="language-python">class HashTable:
    def __init__(self, size):
        self.size = size
        self.slots = [None for i in range(self.size)]

    def add(self, key, value):
        if self.slots[key]:
            self.slots[key].append(value)
        else:
            self.slots[key] = [value]

    def values(self):
        key = 1
        for val in self.slots:
            if val:
                yield (key, val)
        key += 1


class BigClustring:

    def __init__(self):
        self.hash_table = None
        self.num = None
        self.len_bit = None
        self.disjoint_set = DisjointSet()
        self.val = []

    def read_from_file(self, file_name):
        with open(file_name) as infile:
            line = infile.readline()
            line = line.strip(&#39;\n&#39;)
            self.num, self.len_bit = [int(num) for num in line.split()]
            self.hash_table = HashTable(2 ** self.len_bit)

            node = 1
            for line in infile.readlines():
                line = line.strip(&#39;\n&#39;)
                line = line.replace(&#39; &#39;, &#39;&#39;)
                val = int(line, 2)
                self.hash_table.add(val, node)
                self.disjoint_set.make_set(node)
                self.val.append(val)
                node += 1

        if self.num + 1 != node:
            raise ValueError

    def hamming(self):
        &quot;&quot;&quot;
        return binary integer at hamming distance 1 or 2
        &quot;&quot;&quot;
        self.hamm = []
        for i in range(self.len_bit):
            for j in range(self.len_bit):
                self.hamm.append(1 &lt;&lt; i | 1 &lt;&lt; j)

    def neighbors(self, val):
        &quot;&quot;&quot;
        return node_index of neighbors for val
        &quot;&quot;&quot;
        for key in self.hamm:
            if self.hash_table.slots[key ^ val] is not None:
                yield self.hash_table.slots[key ^ val][0]

    def cluster(self):
        &quot;&quot;&quot;
        cluster nodes with 0-1-2 distances
        &quot;&quot;&quot;

        # first cluster the 0 distance nodes
        for key, val in self.hash_table.values():
            if len(val) &gt; 1:
                # union
                for val1 in val:
                    for val2 in val:
                        if val1 != val2:
                            self.disjoint_set.union(val1, val2)

        # second cluster the 1-2 distance nodes
        node = 1
        for val in self.val:
            neighbors = self.neighbors(val)
            for neighbor in neighbors:
                self.disjoint_set.union(node, neighbor)
            node += 1
        return len(self.disjoint_set)
</code></pre>

<h2 id="toc_3">Reference</h2>

<ol>
<li><a href="https://rstudio-pubs-static.s3.amazonaws.com/72033_dcd43db591574873aac22be4cde29af6.html">Clustering on big graph, python</a></li>
<li><a href="https://en.wikipedia.org/wiki/Hamming_distance">Hamming Distance WIKIPEDIA</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bitwise Operation]]></title>
    <link href="http://larryim.cc/bitwise%20operator%20in%20python.html"/>
    <updated>2017-08-05T10:16:10+08:00</updated>
    <id>http://larryim.cc/bitwise%20operator%20in%20python.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">The method of complements</a>
<ul>
<li>
<a href="#toc_1">One&#39;s complement (反码)</a>
</li>
<li>
<a href="#toc_2">Two&#39;s complement (补码)</a>
<ul>
<li>
<a href="#toc_3">Implementation</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">One or Two</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">Reference</a>
</li>
</ul>


<p>There are 6 <code>Bitwise Operators</code>(位操作符) in Python:</p>

<ul>
<li><code>x&lt;&lt;y</code>: Returns \(x\) with the bits shifted to the left by y places (and new bits on the right-hand-side are zeros). This is the same as multiplying x by \(2^y\).</li>
<li><code>x&gt;&gt;y</code>: Returns \(x\) with the bits shifted to the right by y places. This is the same as //&#39;ing \(x\) by \(2^y\).</li>
<li><code>x&amp;y</code>(bitwise AND): Each bit of the output is 1 if the corresponding bit of \(x\) AND of \(y\) is 1, otherwise it&#39;s 0.</li>
<li><code>x|y</code> (bitwise OR): Each bit of the output is 0 if the corresponding bit of \(x\) AND of \(y\) is 0, otherwise it&#39;s 1.</li>
<li><code>~ x</code> ( bitwise NOT, or complement): Returns the complement of \(x\) - the number you get by switching each 1 for a 0 and each 0 for a 1. This is the same as \(-x-1\).</li>
<li><code>^</code> (bitwise Exclusive OR): outputs true only when inputs differ (one is 1, the other is 0).</li>
</ul>

<p><code>Bitwise Operators</code> operate on numbers, but instead of treating that number as if it were a single value, they treat it as if it were a string of bits, written  in <code>two&#39;s-complement</code> binary.</p>

<h2 id="toc_0">The method of complements</h2>

<p>The <code>method of complements</code> is a technique used to subtract one number from another using only addition of positive numbers.</p>

<p>Many early computers, use <code>one&#39;s complement</code> notation. The IBM 700/7000 series used to use <code>sign/magnitude</code> notation. Almost all subsequent minicomputers and microcomputers use <code>two&#39;s complement</code>  in the computer industry.</p>

<h3 id="toc_1">One&#39;s complement (反码)</h3>

<p>The one&#39;s complement of a <code>binary number</code> is defined as the value obtained by inverting all the bits in the binary representation of the number (swapping 0s for 1s and vice versa). </p>

<p>Positive numbers are the same simple, binary system used by <code>two&#39;s complement</code> and <code>sign-magnitude</code>. Negative values are the bit complement of the corresponding positive value. </p>

<p>The table below shows all possible values in a 4-bit system, from −7 to +7.</p>

<pre><code>      +      −
 0   0000   1111   — Note that both +0 and −0 return TRUE when tested for zero
 1   0001   1110   — and FALSE when tested for non-zero. 
 2   0010   1101
 3   0011   1100
 4   0100   1011
 5   0101   1010
 6   0110   1001
 7   0111   1000
</code></pre>

<p><strong>Negative zero</strong> is the condition where all bits in a signed word are 1. </p>

<pre><code>1111 1111
</code></pre>

<h3 id="toc_2">Two&#39;s complement (补码)</h3>

<p>A <code>two&#39;s complement</code> number system encodes positive and negative numbers in a binary number representation. The weight of each bit is a power of two, except for the <code>most significant bit</code>(最高有效位), whose weight is the negative of corresponding power of two.</p>

<p>The method to convert a negative integer into a two&#39;s complement is implemented as follows:</p>

<pre><code>eg. -3
Start with positive 0000 0011
flip bits 1111 1100
add one 1111 1101
</code></pre>

<h4 id="toc_3">Implementation</h4>

<p>The naive implementation of <code>Two&#39;s complement</code> in Python is as follows:</p>

<pre><code class="language-python">def int_to_two_complement(val, num_bits):

    if val &lt; 0:
        # major procedure as follows:
        # 1. take the absolute
        # 2. flip
        # 3. add one

        # absolute of val: use int to transform str to int
        val = bin(val)[3:].rjust(num_bits, &#39;0&#39;)

        # flip it: bitwise complement
        flip_val = &#39;&#39;
        flip_bit = {&#39;0&#39;: &#39;1&#39;, &#39;1&#39;: &#39;0&#39;}
        for bit in val:
            flip_val += flip_bit[bit]
        val = flip_val

        # add one
        val = list(val)
        if val[-1] == &#39;0&#39;:
            val[-1] = &#39;1&#39;
        else:
            index = -1
            while val[index] == &#39;1&#39;:
                index -= 1
            val[-1] = &#39;0&#39;
            val[index - 1] = &#39;1&#39;
        val = &#39;&#39;.join(val)
        val = int(val)

    else:

        # fill zeros before the binary number converted by bin, the result = bin(val)
        val = bin(val)[2:].rjust(num_bits, &#39;0&#39;)
    return val
</code></pre>

<h3 id="toc_4">One or Two</h3>

<p>A <code>two&#39;s complement</code> integer equals its <code>one&#39;s complement</code> integer plus one.</p>

<p>\[X_{two} = 2^n-x = x_{one}+1\]</p>

<h2 id="toc_5">Reference</h2>

<p>1.<a href="https://en.wikipedia.org/wiki/Most_significant_bit">Most Significant Bit</a><br/>
2.<a href="https://wiki.python.org/moin/BitwiseOperators">wiki-python</a><br/>
3.<a href="https://stackoverflow.com/questions/1604464/twos-complement-in-python">two&#39;s complement in python -Stackoverflow</a><br/>
4. <a href="https://en.wikipedia.org/wiki/Two&#x27;s_complement#Subtraction_from_2N">Two&#39;s complement WIKIPEDIA</a></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Minimum Spanning Tree: Prim's, Kruskal's Algorithm and Clustering]]></title>
    <link href="http://larryim.cc/minimum_spanning_tree_prim_kruskal.html"/>
    <updated>2017-08-01T15:09:17+08:00</updated>
    <id>http://larryim.cc/minimum_spanning_tree_prim_kruskal.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Concepts</a>
</li>
<li>
<a href="#toc_1">Prim&#39;s algorithm</a>
<ul>
<li>
<a href="#toc_2">Implementation</a>
</li>
<li>
<a href="#toc_3">Prim&#39;s v.s. Dijkstra&#39;s</a>
</li>
</ul>
</li>
<li>
<a href="#toc_4">Kruskal&#39;s Algorithm</a>
<ul>
<li>
<a href="#toc_5">Implementation</a>
</li>
</ul>
</li>
</ul>
</li>
<li>
<a href="#toc_6">Clustering</a>
<ul>
<li>
<a href="#toc_7">Implementation</a>
</li>
</ul>


<p>Let \(G=(V, E)\) be a connected, undirected graph with a real-valued weight function \(w\) defined on \(E\). If an acyclic subset \(T\in E\) that connects all of the vertices and whose total weight \(w(T)=\sum_{(u,v)\in T}w(u,v)\) is minimized, \(T\) forms a <code>Minimum Spanning Tree</code>.</p>

<h2 id="toc_0">Concepts</h2>

<ul>
<li><code>safe edge</code>: An edge that may be added to \(A\) without violating the invariant that \(A\) is a subset of some <code>minimum spanning tree</code>.</li>
<li><code>cut</code>: A <code>cut</code> \((S, V-S)\) of an undirected graph \(G=(V,E)\) is a partition of \(V\).</li>
<li><code>cross</code>: We say that an edge \((u,v)\in E\) <code>crosses</code> the cut \((S,V-S)\) if one of its endpoints is in \(S\) and the other is in \(V-S\).</li>
<li><code>respect</code>: If no edge in \(A\) (a subset of some <code>minimum spanning tree</code>) <code>crosses</code> the cut, the cut <code>respects</code> a set \(A\) of edges.</li>
<li><code>light edge</code>: An edge is a <code>light edge</code> crossing a cut if its weight is the minimum of any edge crossing the cut. </li>
</ul>

<h2 id="toc_1">Prim&#39;s algorithm</h2>

<p>In <code>Prim&#39;s algorithm</code>, each step adds a light edge to minimum spanning tree. The running time of the Prim&#39;s algorithm is \(O(E \log(V))\)</p>

<h3 id="toc_2">Implementation</h3>

<pre><code class="language-python">def prim(agraph, start):
    &quot;&quot;&quot;
    Prim&#39;s algorithm for minimum spanning tree
    Using min-heap data structure

    return a minimum spanning tree
    &quot;&quot;&quot;
    # vertex of minimun spanning tree
    mst_vertex = []
    pq = PriorityQueue()
    for v in agraph:
        v.setDistance(sys.maxsize)
        v.setPred(None)
    start.setDistance(0)
    pq.buildHeap([(v.getDistance(), v) for v in agraph])
    while not pq.isEmpty():
        u = pq.delMin()
        mst_vertex.append(u)
        for adjacent in u.getConnections():
            newcost = u.getWeight(adjacent)
            if adjacent in pq and newcost &lt; adjacent.getDistance():
                adjacent.setPred(u)
                adjacent.setDistance(newcost)
                pq.decreaseKey(adjacent, newcost)

    # edges of minimum spanning tree
    mst = []
    for i in range(1, len(mst_vertex)):
        # u, v, cost
        mst.append((mst_vertex[i-1], mst_vertex[i],  mst_vertex[i].getDistance()))

    return mst
</code></pre>

<h3 id="toc_3">Prim&#39;s v.s. Dijkstra&#39;s</h3>

<p><code>Prim&#39;s algorithm</code> are similar to <code>Dijkstra&#39;s algorithm</code>, both of which use a <code>priority queue</code>. And  each of them belongs to <code>greedy algorithm</code>. There is trivial difference when implementing:</p>

<p>\[\text{Prim&#39;s} p(v) = \min_{(u,v): u\in S} w(u,v)\]<br/>
\[\text{Dijkstra&#39;s} s(v) = \min_{(u,v): u\in S} \text{dist(su,u)} w(u,v)\]</p>

<h2 id="toc_4">Kruskal&#39;s Algorithm</h2>

<p>In <code>Kruskal&#39;s algorithm</code>, always add edges in increasing weight, skipping those whose addition would create a cycle.</p>

<p>In order to keep track of the connected components of a minimum spanning tree when implementing Kruskal&#39;s algorithm, a disjoint-set data structure should be used. The pseudo code for <code>MST-KRUSKAL</code>:</p>

<pre><code class="language-python">mst = []
for each vertex in G:
    make-set(vertex)
sort the edges of G into nondecreasing order by weight of edges
for each edge (u,v) in G:
    if find-set(u) != find_set(v):
        mst = mst + (u,v)
        union(u,v)
return mst
</code></pre>

<p>If we use <code>union-by-rank</code> and <code>path-compression</code> heuristics in <code>disjoint-set</code> data structure, the running time of <code>Kruskal&#39;s algorithm</code> is \(O(E\lg V)\).</p>

<h3 id="toc_5">Implementation</h3>

<pre><code class="language-python">def kruskal_mst(agraph):
    &quot;&quot;&quot;
    Return a minimum spanning tree using kruskal&#39;s algorithm
    &quot;&quot;&quot;
    # minimum spanning tree
    mst = []

    # disjoint set
    disjoint_set = DisjointSet()

    # make set
    for vertex in agraph.Vertices():
        disjoint_set.make_set(vertex)

    # edges of the graph
    edges = agraph.edges()
    edges.sort(key=lambda tup: tup[2])

    for u, v, cost in edges:
        if disjoint_set.find_set(u) != disjoint_set.find_set(v):
            mst.append((u, v, cost))
            disjoint_set.union(u, v)
    return mst
</code></pre>

<h1 id="toc_6">Clustering</h1>

<p><strong>Max-Spacing k clustering</strong>: Given a set of objects \(p_1, . . . , p_n\), a distance function \(d(p_i,p_j)\) specifies their similarity.  \(d(p_i,p_j)\) may be an actual distance, or some abstract representation of how dissimilar of two things are. </p>

<p><strong>OUR GOAL</strong>: Divide the \(n\) items up into \(k\) groups so that the minimum distance between items in different groups is maximized.</p>

<p><strong>IDEA</strong>: </p>

<ul>
<li>we maintain clusters as a set of connected components of a graph. </li>
<li>And Iteratively combine the clusters containing the two closest items by adding an edge between them.</li>
<li>Stop when there are \(k\) clusters.</li>
</ul>

<p>You&#39;ll find this is exactly <code>Kruskal&#39;s algorithm</code>.</p>

<h3 id="toc_7">Implementation</h3>

<pre><code class="language-python">def clustering(agraph, k):
    &quot;&quot;&quot;
    Max-Spacing k clustering

    Return maximum spacing of a k-clustering
    and corresponding mst.
    &quot;&quot;&quot;
    # minimum spanning tree
    mst = []

    # disjoint set
    disjoint_set = DisjointSet()

    # make set
    for vertex in agraph.Vertices():
        disjoint_set.make_set(vertex)

    # edges of the graph
    edges = agraph.edges()
    edges.sort(key=lambda tup: tup[2])

    for u, v, cost in edges:
        if len(disjoint_set) &gt;= k:

            if disjoint_set.find_set(u) != disjoint_set.find_set(v):
                mst.append((u, v, cost))
                max_cost = cost
                disjoint_set.union(u, v)
        else:
            break


    return max_cost, mst
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash Table (5): Hashable]]></title>
    <link href="http://larryim.cc/hash_table_5_hashable.html"/>
    <updated>2017-08-03T17:06:19+08:00</updated>
    <id>http://larryim.cc/hash_table_5_hashable.html</id>
    <content type="html"><![CDATA[
<p>To make items hashable, you should implement <code>__hash__</code>. You should also implement <code>__eq__</code> in a compatible way -- items that are equivalent should hash the same.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Disjoint-Set Data Structure]]></title>
    <link href="http://larryim.cc/disjoint_set_data_structure.html"/>
    <updated>2017-08-03T15:59:13+08:00</updated>
    <id>http://larryim.cc/disjoint_set_data_structure.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Linked-List Implementation</a>
</li>
<li>
<a href="#toc_1">Forest Implementation of Disjoint-Set</a>
</li>
<li>
<a href="#toc_2">Reference</a>
</li>
</ul>


<p>In order to keep track of the connected components of a minimum spanning tree when implementing <code>Kruskal&#39;s algorithm</code>, a disjoint-set data structure should be used.</p>

<p><code>Disjoint-set</code> data structure, also called <code>union-find</code> data structure, is a data structure that keeps track of a set of elements partitioned into a number of disjoint subsets.</p>

<p>A <code>disjoint-set</code> data structure supports following operations:</p>

<ul>
<li><code>MAKE-SET(x)</code> creates a new set whose only member is \(x\)</li>
<li><code>UNION(x,y)</code> unites the dynamic sets that contains \(x\) and \(y\), into a new set that is the union of these two sets.</li>
<li><code>FIND-SET(x)</code> returns the representative of the set containing \(x\).</li>
</ul>

<h2 id="toc_0">Linked-List Implementation</h2>

<p>Each set is represented by its own <strong>linked list</strong>. The object for each set has attributes <em>head</em>, pointing to the first object in the list, and <em>tail</em>, pointing to the last object. Each object in the linked list contains a set member, a pointer to the next object in the list, and a pointer back to the set object.</p>

<p><img src="media/15017471539381/Screen%20Shot%202017-08-03%20at%209.21.43%20PM.png" alt="Linked List implementaion"/></p>

<p><strong>Weighted-Union Heuristic</strong>: And each linked list also includes the length of the list and we always append the shorter list onto the longer.</p>

<p>Using the linked-list representation of disjoint sets and the weighted-union heuristic, a sequence of \(m\) MAKE-SET, UNION, and FIND-SET, \(n\) of which are MAKE-SET operations, takes \(O(m+n\lg n)\) time.</p>

<pre><code class="language-python">class Node:
    &quot;&quot;&quot;
    class Node for double liked list
    &quot;&quot;&quot;
    def __init__(self, elem):
        self.prev = None
        self.elem = elem
        self.next = None

    def __hash__(self):
        return hash(self.elem)

    def __eq__(self, x, y):
        return x.elem == y.elem


class LinkedList:

    def __init__(self):
        self.head = None
        self.tail = None
        self.length = 0

    def add(self, node):
        &quot;&quot;&quot;
        add element to disjoint set
        &quot;&quot;&quot;
        if self.head:
            node.prev = self
            self.tail.next = node
            self.tail = node
        else:
            self.head = node
            self.tail = node
            node.prev = self
        self.length += 1

    def __len__(self):
        return self.length

    def set_length(self, l):
        self.length = l

    def __iter__(self):
        next_node = self.head
        while next_node:
            yield next_node
            next_node = next_node.next


            

class DisjointSet:

    def __init__(self):
        self.sets = []

    def make_set(self, node):
        &quot;&quot;&quot; 
        creates a new set whose only member (and thus representative) is x.
        &quot;&quot;&quot;
        alist = LinkedList()
        alist.add(node)
        self.sets.append(alist)
        return alist

    def union(self, nodex, nodey):
        &quot;&quot;&quot;
        unites the dynamic sets that contain x and y, into a new set that is the union of these two sets.
        &quot;&quot;&quot;
        listx = self.find_set(nodex)
        listy = self.find_set(nodey)
        
        # append the shorter list onto the longer.
        if len(listx) &gt; len(listy):
            listx.tail.next = listy.head
            for y in listy:
                y.prev = listx
            listx.tail = listy.tail
            listx.set_length = len(listx) + len(listy)
            self.sets.remove(listy)
        else:
            listy.tail.next = listx.head
            for x in listx:
                x.prev = listy
            listy.tail = listx.tail
            listy.setlength = len(listx) + len(listy)
            self.sets.remove(listx)



    def find_set(self, node):
        &quot;&quot;&quot;
        returns the representative of the set containing x
        &quot;&quot;&quot;
        return node.prev

    def connected_components(self):
        for link_list in self.sets:
            print(&#39;( &#39;, end=&#39;&#39;)
            for node in link_list:
                print(node.elem, end=&#39; &#39;)
            print(&#39;) &#39;, end=&#39;&#39;)

    def __len__(self):
        return len(self.sets)

</code></pre>

<h2 id="toc_1">Forest Implementation of Disjoint-Set</h2>

<p><code>Disjoint-set forest</code>, a faster implementation of disjoint sets, uses rooted trees represent sets, with each node containing one member and each tree representing one set. In a <code>disjoint-set forest</code>, each member points only to its parents. The root of each tree contains the representative and is its own parent.</p>

<p><img src="media/15017471539381/15017663990040.png" alt="disjoint set forest"/></p>

<p><strong>Union by Rank</strong>: For each node, we maintain a <code>rank</code>, which is an upper bound on the hight of the node. We make the root with smaller rank point to the root with larger rank during a <code>Union</code> operation.</p>

<p><strong>Path Compression</strong>: When we call <code>find_set</code>, we traverse the path from a node up to its root. Instead of just returning root, we will link all the nodes in this path directly to root. </p>

<p><img src="media/15017471539381/15017663772888.png" alt="path compression"/></p>

<pre><code class="language-python">class DisjointSet:
    &quot;&quot;&quot;
    Disjoint set data structure
    &quot;&quot;&quot;

    def __init__(self):
        self.sets = []
        self.parent = {}
        self.rank = {}

    def make_set(self, node):
        &quot;&quot;&quot;
        creates a new set whose only member (and thus representative) is x.
        &quot;&quot;&quot;
        self.parent[node] = node
        self.sets.append(node)
        self.rank[node] = 0

    def union(self, x, y):
        &quot;&quot;&quot;
        unites the dynamic sets that contain x and y, into a new set that is the union of these two sets.
        &quot;&quot;&quot;
        x_root = self.find_set(x)
        y_root = self.find_set(y)
        if x_root == y_root:
            return

        if self.rank[x_root] &gt; self.rank[y_root]:
            self.parent[y_root] = x_root
        else:
            self.parent[x_root] = y_root
            if self.rank[x_root] == self.rank[y_root]:
                self.rank[y_root] = self.rank[y_root] + 1

    def find_set(self, x):
        &quot;&quot;&quot;
        returns the representative of the set containing x
        &quot;&quot;&quot;
        if self.parent[x] != x:
            self.parent[x] = self.find_set(self.parent[x])
        return self.parent[x]

</code></pre>

<h2 id="toc_2">Reference</h2>

<ol>
<li>Cormen, Leiserson, Rivest, and Stein. 2009. Introduction to Algorithms (3rd edition)</li>
<li><a href="https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-046j-design-and-analysis-of-algorithms-spring-2012/lecture-notes/MIT6_046JS12_lec16.pdf">Disjoint-set Data Structure MIT</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Character encoding]]></title>
    <link href="http://larryim.cc/character%20encoding.html"/>
    <updated>2017-08-03T12:03:47+08:00</updated>
    <id>http://larryim.cc/character%20encoding.html</id>
    <content type="html"><![CDATA[
<p>A <code>character encoding</code> (字符编码) is used to represent a repertoire of characters by some kind of encoding system.</p>

<h2 id="toc_0">Terminology</h2>

<ul>
<li><code>character</code>: a minimal unit of text that has semantic value.</li>
<li><code>character set</code>: a collection of characters that might be used by multiple languages.</li>
<li><code>coded character set</code>: a character set in which each character corresponds to a unique number.</li>
<li><code>code unit</code>: a bit sequence used to encode each character of a repertoire within a given encoding form.</li>
<li><code>code point</code>(码位): any legal value in the character set.</li>
<li><code>character repertoire</code>(字符集): an abstract list of more than one million characters found in a wide variety of scripts including <em>Latin</em>, <em>Cyrillic</em>, <em>Chinese</em>, <em>Korean</em>, <em>Japanese</em>, <em>Hebrew</em>, and <em>Aramaic</em>.</li>
</ul>

<h2 id="toc_1">Unicode</h2>

<p><code>unicode</code> is a computing industry standard for the consistent encoding, representation, and handling of text expressed in most of the world&#39;s writing systems. The Unicode standard defines <code>UTF-8</code>, <code>UTF-16</code>, and <code>UTF-32</code>, and several other encodings are in use.</p>

<h3 id="toc_2">UTF-8</h3>

<p><code>UTF-8</code>, the most widely used by websites. The encoding is variable-length and uses 8-bit code units. UTF-8 encodes each of the 1,112,064 valid code points in Unicode using 1 to 4 8 bit bytes.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MySQL]]></title>
    <link href="http://larryim.cc/mysql_introduction.html"/>
    <updated>2017-08-02T10:26:19+08:00</updated>
    <id>http://larryim.cc/mysql_introduction.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">client and server</a>
</li>
<li>
<a href="#toc_1">basic command</a>
</li>
<li>
<a href="#toc_2">GUI</a>
</li>
<li>
<a href="#toc_3">Starting to Explore Databases</a>
</li>
<li>
<a href="#toc_4">Python</a>
</li>
</ul>


<p>MySQL is an open source, multithread, relational database management system.</p>

<h2 id="toc_0">client and server</h2>

<p>The <code>server</code> maintains, controls and protects your data, storing it in files on the computer where the server is running in various formats. It listens for requests from <code>client</code>.</p>

<p>For MySQL, <code>mysqld</code>(the <em>d</em> stands for <em>daemon</em>) is the server. <code>mysql</code> is a standard MySQL client. With its text-based interface, a user can log in and execute SQL queries.</p>

<h2 id="toc_1">basic command</h2>

<ul>
<li>The <code>mysql_safe</code> script is the most common way to start <code>mysqld</code>, because this script can restart the daemon if it crashes.</li>
<li>The <code>mysqlaccess</code> tool creates user accounts and sets their privileges.</li>
<li>The<code>mysqladmin</code> utility can be used to manage the database server itself from the command-line. </li>
<li>The <code>mysqlshow</code> tool may be used to examine a server’s status, as well as information about databases and tables.</li>
<li>The <code>mysqldump</code> utility is the most popular one for exporting data and table structures to a plain-text file, known as a <code>dump</code> file. </li>
<li>The command <code>mysql -u root -p</code> is usually used to start the client <code>mysql</code>, after which the passport should be filled.</li>
<li>The command <code>mysql -u root -p -e &quot;SELECT User,Host FROM mysql.user;&quot;</code> gives a list of username and host combination on the server.</li>
</ul>

<h2 id="toc_2">GUI</h2>

<p><a href="https://sequelpro.com">Sequel Pro</a> is a fast, easy-to-use Mac database management application for working with MySQL databases. see <a href="https://segmentfault.com/a/1190000006255923">detail in Chinese</a></p>

<p><a href="https://www.mysql.com/products/workbench">WorkBench</a> provides data modeling, SQL development, and comprehensive administration tools for server configuration, user administration, backup, and much more.</p>

<p>Although GUIs are easy-to-use, in the long run they&#39;re not useful. The text-based <code>mysql</code> client causes you to think and remember more, and it&#39;s not that difficult to use or confusing. And the command-line method of using <code>mysql</code> allows you to interact with the server without much overhead.</p>

<h2 id="toc_3">Starting to Explore Databases</h2>

<p>For each of SQL statements, we heave to specify the database name. If you will be working mainly in one database, you can set the default database so that you don&#39;t have to specify the database each time:</p>

<pre><code class="language-SQL">USE database_name
</code></pre>

<h2 id="toc_4">Python</h2>

<p>To use Python with MySQL, you can use the MySQL Connector/Python (<a href="https://dev.mysql.com/downloads/connector/python/">Download Here</a>). For those with anaconda, just install with <code>conda</code>:</p>

<pre><code>conda install -c anaconda mysql-connector-python 
</code></pre>

<p>MySQL Connector/Python includes support for:</p>

<ul>
<li>Almost all features provided by MySQL Server.</li>
<li>Converting parameter values back and forth between Python and MySQL data types.</li>
<li>All MySQL extensions to standard SQL syntax.</li>
</ul>

<pre><code class="language-python">import re
import mysql.connector

# establishes the connection to MySQL.
cnx = mysql.connector.connect(user=&#39;root&#39;, password=&#39;8032804254qq&#39;,
                              host=&#39;127.0.0.1&#39;, database=&#39;rookery&#39;, port=&#39;3306&#39;)

# creates a cursor object (cur) to use for executing queries on the database.


cur = cnx.cursor(buffered=True)

# query mysql database for list of user accounts
sql_stmnt =  &quot;SELECT DISTINCT User, Host FROM mysql.db &quot;
sql_stmnt += &quot;WHERE Db IN(&#39;rookery&#39;,&#39;birdwatchers&#39;) &quot;
sql_stmnt += &quot;ORDER BY User, Host&quot;
cur.execute(sql_stmnt)

# loop through list of user accounts
for user_accounts in cur.fetchall() :
    user_name = user_accounts[0]
    host_address = user_accounts[1]
    user_account = &quot;&#39;&quot; + user_name + &quot;&#39;@&#39;&quot; + host_address + &quot;&#39;&quot;

# display user account heading
print (&#39;User Account:&#39;,(user_name, host_address))
print (&quot;------------------------------------------&quot;)

# query mysql for grants for user account
sql_stmnt = &quot;show grants for&quot; + str(user_account)
cur.execute(sql_stmnt)

# loop through grant entries for user account
for grants in cur.fetchall():
     # skip &#39;usage&#39; entry
    if re.search(&#39;USAGE&#39;, grants[0]) :
        continue
    # extract name of database and table
    dbtb = re.search(&#39;ON\s(.*)\.+?(.+?)\sTO&#39;, grants[0])
    db = dbtb.group(1)
    tb = dbtb.group(2)

    # change wildcard for tables to &#39;all&#39;
    if re.search(&#39;\*&#39;, tb) : tb = &quot;all&quot;

    # display database and table name for privileges
    print &quot;database: %s; table: %s&quot; % (db,tb)

    # extract and display privileges for user account # for database and table
    privs = re.search(&#39;GRANT\s(.+?)\sON&#39;, grants[0])
    print(&#39;privileges: &#39;, privs.group(1))

cur.close()
cnx.close()
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greedy algorithm (2): A Scheduling Application]]></title>
    <link href="http://larryim.cc/greedy_algorithm_a_scheduling_problem.html"/>
    <updated>2017-08-01T16:03:04+08:00</updated>
    <id>http://larryim.cc/greedy_algorithm_a_scheduling_problem.html</id>
    <content type="html"><![CDATA[
<p><strong>Problem Statement</strong>: You want to schedule jobs (processes) on a processor. Each job has properties:</p>

<ul>
<li>weight \(w_j\) (“priority”) </li>
<li>length \(l_j\)</li>
</ul>

<p>The <code>completion time</code> \(C_j\) of job \(j\) is Sum of job lengths up to and including job \(j\).</p>

<p>The goal is to <strong>Minimize weighted sum of completion times</strong>, i.e.</p>

<p>\[\sum_{j=1}^n w_j*C_j\]</p>

<h2 id="toc_0">Algorithm</h2>

<p>Order jobs by decreasing value of \(\frac{w_j}{l_j}\), i.e. jobs have larger weight and shorter length execute earlier.</p>

<h3 id="toc_1">Greedy Exchange</h3>

<p><code>Greedy Exchange</code> is one of the techniques used in proving the correctness of greedy algorithms. The idea of a greedy exchange proof is to morph a solution produced by an optimal algorithm into the solution produced by your greedy algorithm. This shows that any optimal solution is no better than the greedy solution, which proves that greedy does in fact return an optimal solution.</p>

<h3 id="toc_2">Proof</h3>

<h4 id="toc_3">Step1: label algorithm&#39;s solution and an optimal solution</h4>

<p>Let \(\sigma\) be greedy schedule, and \(\sigma^*\) be optimal schedule. </p>

<h4 id="toc_4">Step2: Compare greedy with optimal</h4>

<p>Greedy schedule \(\sigma\) is just \(1,2,3,...,n\). And if optimal schedule \(\sigma^* \ne \sigma \), then \(\exists\) consecutive jobs \(i,j\), which \(i&gt;j\).</p>

<h4 id="toc_5">Step3: Exchange</h4>

<p>Suppose we exchange order of \(i,j\) in \(\sigma\):</p>

<ul>
<li>the cost of exchange \(w_jl_j\)</li>
<li>the benefit of exchange is \(w_jl_i\)</li>
</ul>

<p>Note: <br/>
\[i &gt;j \rightarrow w_i/l_i \le wj/lj \rightarrow w_il_j \le w_jl_i \]<br/>
Exchanging \(i,j\) in \(\sigma^*\) has net benefit of \(w_jl_i-w_il_j \ge0\).</p>

<p>\(\rightarrow\) After at most \(C_n^2\) such exchanges, \(\sigma^*\) can transform into \(\sigma\)<br/>
\(\rightarrow \sigma \) at least as good as \(\sigma^*\)<br/>
 \(\rightarrow \) Greedy is optimal.</p>

<h2 id="toc_6">Implemenation</h2>

<pre><code class="language-python">import numpy as np
import unittest

class JobSchedule:
    &quot;&quot;&quot;
    greedy algorithm that schedules jobs in decreasing order of ratio (weight/length)
    &quot;&quot;&quot;
    def __init__(self):
        self.job_num = 0 # the number of jobs
        self.job_weight = []
        self.job_length = []
        self.schedule_time = None
        self.order = None # the ordering of jobs

    def buildjobs(self, textfile):
        &quot;&quot;&quot;
        build jobs from a text file

        The file describes a set of jobs with positive and integral weights and lengths.
        It has the format
        [number_of_jobs]
        [job_1_weight] [job_1_length]

        &quot;&quot;&quot;
        count = 0
        with open(textfile) as infile:
            for line in infile.readlines():
                line = line.strip(&#39;\n&#39;)
                if count == 0:
                    self.job_num = int(line)
                else:
                    job_weight, job_length = (int(num) for num in line.split())
                    self.job_weight.append(job_weight)
                    self.job_length.append(job_length)
                count += 1

        if count-1 != self.job_num:
            raise ValueError

    def scheduling(self):
        &quot;&quot;&quot;
        return the sum of weighted completion times of the resulting schedule
        &quot;&quot;&quot;
        # ratios of weight and length for every job
        ratios = [self.job_weight[i]/self.job_length[i] for i in range(self.job_num)]
        self.order = np.lexsort((self.job_length, ratios))
        self.order=self.order[::-1]
        print([ (self.job_weight[i], self.job_length[i],self.job_weight[i]/self.job_length[i]) for i in self.order])
        # calculating the sum of weighted completion times of the resulting schedule
        count = 0
        job_length = 0
        for job_ind in self.order:
            job_length = job_length + self.job_length[job_ind]
            count += self.job_weight[job_ind]*job_length
        self.schedule_time = count
        return self.schedule_time


class TestJobSchedule(unittest.TestCase):

    def testcase1(self):
        jobs_to_schedule = JobSchedule()
        jobs_to_schedule.buildjobs(&#39;testcase1.txt&#39;)
        assert jobs_to_schedule.scheduling() == 16

    def testcase2(self):
        jobs_to_schedule = JobSchedule()
        jobs_to_schedule.buildjobs(&#39;testcase2.txt&#39;)
        assert jobs_to_schedule.scheduling() == 67247


if __name__ == &quot;__main__&quot;:
    unittest.main()
</code></pre>

<h2 id="toc_7">References</h2>

<ol>
<li><a href="http://www.cs.cornell.edu/courses/cs482/2003su/handouts/greedy_exchange.pdf">Greedy exchange</a></li>
<li><a href="https://www.coursera.org/learn/algorithms-greedy/">Algorithms Specialization</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Greedy algorithm (1): Introduction]]></title>
    <link href="http://larryim.cc/greedy_algorithm_introduction.html"/>
    <updated>2017-07-31T15:34:06+08:00</updated>
    <id>http://larryim.cc/greedy_algorithm_introduction.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">Definition</a>
</li>
<li>
<a href="#toc_1">Contrast with Divide &amp; Conquer</a>
</li>
</ul>
</li>
<li>
<a href="#toc_2">Examples</a>
<ul>
<li>
<a href="#toc_3">The Optimal Caching Algorithm</a>
</li>
<li>
<a href="#toc_4">A Scheduling Problem</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">Reference</a>


<h3 id="toc_0">Definition</h3>

<p>A <code>greedy algorithm</code> always makes the choice that looks best at the moment. That is, it makes a locally optimal choice in the hope that this choice will lead to a globally optimal solution. (Cormen et al., 2009)</p>

<h3 id="toc_1">Contrast with Divide &amp; Conquer</h3>

<ol>
<li>Easy to propose multiple greedy algorithms for many problems. </li>
<li>Easy running time analysis. (Contrast with Master method etc.)</li>
<li>Hard to establish correctness.
(Contrast with straightforward inductive correctness proofs.)</li>
</ol>

<p><strong>DANGER: Most greedy algorithms are NOT correct. (Even if your intuition says otherwise!)</strong></p>

<h2 id="toc_2">Examples</h2>

<h3 id="toc_3">The Optimal Caching Algorithm</h3>

<p>Theorem: [Bélády&#39;s 1960s] <code>Farthest-in-Future</code> is the optimal algorithm that minimizes the number of cache misses.</p>

<p><code>Bélády&#39;s Algorithm</code>:</p>

<p>When \(d_i\) is requested but not in the cache,<br/>
evict the cache item that will next be used farthest into the future.</p>

<h3 id="toc_4">A Scheduling Problem</h3>

<p>Assume: Each job has a:</p>

<ul>
<li>weight \(w_j\) (“priority”) </li>
<li>length \(l_j\)</li>
</ul>

<p>The completion time \(C_j\) of job \(j\) = Sum of job lengths up to and including \(j\).</p>

<p>Goal: Minimize the weighted sum of completion times: \(\min \sum ^n_j= w_jC_j\)</p>

<h2 id="toc_5">Reference</h2>

<ol>
<li>Cormen, Leiserson, Rivest, and Stein. 2009. Introduction to Algorithms (3rd edition)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Generator]]></title>
    <link href="http://larryim.cc/python_generator.html"/>
    <updated>2017-07-23T18:24:09+08:00</updated>
    <id>http://larryim.cc/python_generator.html</id>
    <content type="html"><![CDATA[
<p>Any function that contains a <code>yield</code> statement is called a <code>generator</code>.</p>

<h3 id="toc_0">yield statement</h3>

<p>Each time a value is yielded (with <code>yield</code>), the function freezes; that is, it stops its execution at exactly that point and waits to be reawakened.</p>

<h3 id="toc_1">generator comprehension</h3>

<p><code>Generator comprehension</code> works in the same way as <code>list comprehension</code>, except that a list isn&#39;t constructed. Instead, a <code>generator</code> is returned.</p>

<pre><code class="language-python">&gt;&gt;&gt; h = (i for i in range(10))
&gt;&gt;&gt; h
&lt;generator object &lt;genexpr&gt; at 0x104d76ba0&gt;
&gt;&gt;&gt; list(h)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre>

<p>When using <code>generator comprehension</code>, if there already exists parentheses, you don&#39;t need to add another pair.</p>

<pre><code class="language-python">&gt;&gt;&gt; sorted(100-i for i in range(10))
[91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
</code></pre>

<h3 id="toc_2">Recursive generator</h3>

<p><code>generators</code> are ideal for complex recursive algorithms that gradually build a result. </p>

<p>A <code>recursive generator</code> could be used to flatten a nested list.</p>

<pre><code class="language-python">def flatten(nested):
    &quot;&quot;&quot;
    When flatten is called, you have two possibilites: the base case and the recursive case.

    In the base case, the function is told to flatten a single element.
    In the recursive case, flatten it.

    &gt;&gt;&gt; list(flatten([[[1], 2], 3, 4, [5, [6, 7]], 8]))
    [1, 2, 3, 4, 5, 6, 7, 8]
    &gt;&gt;&gt; list(flatten([&#39;foo&#39;, [&#39;bar&#39;, [&#39;baz&#39;]]]))
    [&#39;foo&#39;, &#39;bar&#39;, &#39;baz&#39;]
    &quot;&quot;&quot;
    try:
        try:
            nested + &#39; &#39;
        except TypeError:
            pass
        else:
            raise TypeError
        
        for sublist in nested:
            for element in flatten(sublist):
                yield element

    except TypeError:
        yield nested


if __name__ == &quot;__main__&quot;:
    import doctest
    doctest.testmod(verbose=True)
</code></pre>

<p>An <code>inorder traversal</code> (also <code>postoder traversal</code> and <code>preorder traversal</code>) of a <code>binary search tree</code> might use the <code>recursive generator</code>, detailed code here <a href="http://larryim.cc/binary_search_tree.html">Binary Search Tree</a></p>

<h3 id="toc_3">Generator methods</h3>

<p>We may supply generators with values after they have started running, by using a communications channel between the <code>generator</code> and the “outside world,” with the following two end points:</p>

<ul>
<li><p>The outside world has access to a method on the generator called <code>send</code>, which works just like <code>next</code>, except that it takes a single argument (the “message” to send—an arbitrary object).</p></li>
<li><p>Inside the suspended generator, <strong><code>yield</code> may now be used as an <code>expression</code>, rather than a <code>statement</code></strong>. In other words, when the generator is resumed, yield returns a value—the value sent from the outside through <code>send</code>. If <code>next</code> was used, <code>yield</code> returns <code>None</code>.</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Iterators]]></title>
    <link href="http://larryim.cc/python_iterator.html"/>
    <updated>2017-07-23T18:06:25+08:00</updated>
    <id>http://larryim.cc/python_iterator.html</id>
    <content type="html"><![CDATA[
<p>An object that implements the <code>__iter__</code> method is <code>iterable</code>, and the object implementing <code>next</code> is the <code>iterator</code>.</p>

<p>Why Iterator?<br/>
<strong>not overkill, and more general, simpler, elegant</strong></p>

<p>It is recommended that iterators implement an <code>__iter__</code>method of their own in addition (returning self), so they themselves can be used directly in <code>for</code> loops.</p>

<p>Here an example of Fibonacci numbers.</p>

<pre><code class="language-python">
class Fibs:
    &quot;&quot;&quot;
    Fibonacci numbers
    &quot;&quot;&quot;

    def __init__(self):
        self.a = 0
        self.b = 1

    def __next__(self):
        self.a, self.b = self.b, self.a + self.b
        if self.a &gt; 1000:
            raise StopIteration
        return self.a

    def __iter__(self):
        return self

if __name__ == &quot;__main__&quot;:
    fibs = Fibs()
    for f in fibs:
        print(f)
</code></pre>

<h3 id="toc_0">iterable to iterator</h3>

<p>The built-in function <code>iter</code> can be used to get an iterator from an <code>iterable</code> object.</p>

<pre><code class="language-python">&gt;&gt;&gt; iterable = [1,2,3]
&gt;&gt;&gt; iterator = iter(iterable)
&gt;&gt;&gt; next(iterator)
1
</code></pre>

<h3 id="toc_1">iterator to sequence</h3>

<p>Using the <code>list</code> constructor, an iterator can be easily converted to a sequence.</p>

<hr/>

<pre><code class="language-python">&gt;&gt;&gt; h = Fibs
&gt;&gt;&gt; h = Fibs()
&gt;&gt;&gt; list(h)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987]
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash Table (4): Universal Hashing]]></title>
    <link href="http://larryim.cc/Hash_Table_4_Universal_Hashing.html"/>
    <updated>2017-07-23T11:07:33+08:00</updated>
    <id>http://larryim.cc/Hash_Table_4_Universal_Hashing.html</id>
    <content type="html"><![CDATA[
<p>Let \(H\) be a finite collection of hash functions that map a given universe \(U\) of keys into the range \(\{0,1,...,m-1\}\). Such a collection is said to be <code>universal</code> if for each pair of distinct keys \(k,l \in U\), the number of <code>hash function</code> \(h \in H\) for which \(h(k) = h(l)\) is at most \(\frac{|H|}{m}\), i.e.</p>

<p>\[ \forall k,l \in U, k\ne l: \Pr_{h\in H }[h(x)=h(y)]\le \frac{1}{m}  \]</p>

<h2 id="toc_0">Why Universal Hashing?</h2>

<p>Some malicious adversary might chooses the keys which all hash to the same slot, yielding an average retrieval time of \(\Theta(n)\). Instead of fixed hash functions, randomly chosen hash functions can yield good performance on average.</p>

<h2 id="toc_1">Designing a universal class of hash functions</h2>

<p>In short, you can generate family of hash functions using following simple equation:</p>

<pre><code class="language-python">h(x,a,b) = ((ax+b) mod p) mod m
</code></pre>

<p>\(x\) is key you want to hash<br/>
\(a\) is any number you can choose between \(1\) to \(p-1\) inclusive.<br/>
\(b\) is any number you can choose between \(0\) to \(p-1\) inclusive.<br/>
\(p\) is a prime number that is greater than max possible value of \(x\)<br/>
\(m\) is a max possible value you want for hash code + 1<br/>
By selecting different values of \(a\) and \(b\) you can generate many hash codes that are independent of each other.</p>

<h2 id="toc_2">Implementation</h2>

<pre><code class="language-python">import random


class UniversalHash:
    &quot;&quot;&quot;
    &gt;&gt;&gt; h=UniversalHash()
    &gt;&gt;&gt; h[54]=&quot;cat&quot;
    &gt;&gt;&gt; h[26]=&quot;dog&quot;
    &gt;&gt;&gt; h[93]=&quot;lion&quot;
    &gt;&gt;&gt; h[77]=&quot;bird&quot;
    &gt;&gt;&gt; h[31]=&quot;cow&quot;
    &gt;&gt;&gt; h[44]=&quot;goat&quot;
    &gt;&gt;&gt; 54 in h
    True
    &quot;&quot;&quot;
    def __init__(self):
        self.size = 100
        self.slots = [None] * self.size
        self.data = [None] * self.size
        (self.p, self.a, self.b) = self.generate_hash_constants()


    def generate_hash_constants(self):
        &quot;&quot;&quot;
        generate a, b, p for universal hashing
        &quot;&quot;&quot;
        p = self._get_prime()  # set p a  random prime number
        a = random.randint(1, p - 1)  # A has a random value between 1 and p - 1.
        b = random.randint(1, p - 1)  # B has a random value between 1 and p - 1
        return p, a, b

    def put(self, key, data):
        hash_value = self.hash_function(key)
        if self.slots[hash_value] is None:
            self.slots[hash_value] = key
            self.data[hash_value] = data
        elif self.slots[hash_value] == key:
            self.data[hash_value] = data
        else:
            # rehash
            next_slot = self.rehash(hash_value, len(self.slots))
            while self.slots[next_slot] is not None and self.slots[next_slot] != key:
                next_slot = self.rehash(hash_value, len(self.slots))

            if self.slots[next_slot] is None:
                self.slots[next_slot] = key
                self.data[hash_value] = data
            else:
                self.data[hash_value] = data

    def hash_function(self, key):
        &quot;&quot;&quot;
        hash_function implements the simple remainder method
        &quot;&quot;&quot;
        return round(self.a * key + self.b) % self.p % self.size

    def rehash(self, old_hash, size):
        &quot;&quot;&quot;
        linear probing with a plus 1
        &quot;&quot;&quot;
        return (old_hash+1) % size

    def get(self, key):
        start_slot = self.hash_function(key)
        data = None
        stop = False
        found = False
        position = start_slot
        while self.slots[position] is not None and \
                not found and not stop:
            if self.slots[position] == key:
                found = True
                data = self.data[position]
            else:
                position = self.rehash(position, len(self.slots))
            if position == start_slot:
                stop = True
        return data

    def _is_prime(self,n):
        if n &lt;= 2 or n%2 == 0:
            return False

        return not any((n%i == 0 for i in range(3, n-1)))

    def _get_prime(self, p=0):
        &quot;&quot;&quot;
        get a prime number
        &quot;&quot;&quot;
        if p == 0:
            p = random.randint(1000000,10000000)
        while not self._is_prime(p):
            p += 1

        return p

    def __getitem__(self, key):
        return self.get(key)

    def __setitem__(self, key, data):
        self.put(key, data)

    def __len__(self):
        &quot;&quot;&quot;
        return length
        &quot;&quot;&quot;
        count = 0
        for item in self.slots:
            if item is not None:
                count += 1

        return count

    def __contains__(self, item):
        &quot;&quot;&quot;
        定义了使用in和not in进行成员测试时类的行为
        &quot;&quot;&quot;
        return self.get(item) is not None

    def __iter__(self):
        &quot;&quot;&quot;
        iterator
        &quot;&quot;&quot;
        for item in self.slots:
            if item is not None:
                yield item

if __name__ == &quot;__main__&quot;:
    import doctest
    doctest.testmod(verbose=True)

</code></pre>

<h2 id="toc_3">Resources</h2>

<ol>
<li><a href="https://www.cse.iitb.ac.in/%7Esri/cs213/lec-Hashing.pdf">Hash Functions and Hash Tables</a></li>
<li>Cormen, Leiserson, Rivest, and Stein, Introduction to Algorithms (3rd edition)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hash Table (3): A variant of 2-Sum Algorithm]]></title>
    <link href="http://larryim.cc/Hash_Table_3_A_variant_of_2_Sum_Algorithm.html"/>
    <updated>2017-07-23T10:52:25+08:00</updated>
    <id>http://larryim.cc/Hash_Table_3_A_variant_of_2_Sum_Algorithm.html</id>
    <content type="html"><![CDATA[
<p>The goal of the arcticle is to implement a variant of the <code>2-SUM algorithm</code>.</p>

<p>The file contains 1 million integers, both positive and negative (repetitions exists!). This is your array of integers, with the \(i\)th row of the file specifying the \(i\)th entry of the array.</p>

<p>The task is to compute the number of target values \(t\) in the interval \([-10000,10000]\)(inclusive) such that there are distinct numbers \(x,y\) in the input file that satisfy \(x+y=t\). </p>

<h2 id="toc_0">Implementation</h2>

<p>The key process lies in the <code>hash function</code>, which might be set to appropriate small value based on the origin value:<br/>
\[\text{hash_function}= \frac{\text{number}}{\text{factor}}\]</p>

<p>The <code>factor</code> is selected based on the number of <code>slots</code> needed in the algorithm. i.e.<br/>
\[\frac{\text{the range of keys}}{\text{factor}}\approx \text{the number of slots} &lt; \text{the number of keys}\]</p>

<p>There, factor is \(\frac{\text{the number of key}}{2}\)</p>

<pre><code class="language-python">class HashTable(object):

    def __init__(self):

        self.size = 5000000
        self.slots = [set() for i in range(self.size)]
        self.data = set()

    def put(self, key, data):

        hash_value = self.hash_function(key)
        self.slots[hash_value].add(data)
        self.data.add(data)

    def hash_function(self, key):

        return key//(self.size//2)

    def get(self, key):
        &quot;&quot;&quot;
        there key == data
        &quot;&quot;&quot;
        slot = self.hash_function(key)
        if key in self.slots[slot]:
            return key
        else:
            return None

    def buildfromfile(self, textfile):

        with open(text_file, &#39;r&#39;) as infile:
            for line in infile.readlines():
                self.put(int(line), int(line))

    def two_sum_count(self):
        &quot;&quot;&quot;
        Compute the number of target values t in the interval[low, high] (inclusive),
        such that there are distinct numbers x, y that satisfy x+y = t
        &quot;&quot;&quot;
        sums = set()

        for key1 in self.data:
            left = self.hash_function(-key1-10000)
            right = self.hash_function(-key1+10000)

            for slot in self.slots[left:right+1]:

                for key2 in slot:

                    if 10000 &gt; key1 + key2 &gt; -10000:
                        sums.add(key1+key2)

        return len(sums)


if __name__ == &quot;__main__&quot;:

    # target files for counting
    text_file = &#39;two_sum.txt&#39;

    hashnumber = HashTable()
    hashnumber.buildfromfile(text_file)
    print(hashnumber.two_sum_count())
</code></pre>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Heap (2): Median Maintenance]]></title>
    <link href="http://larryim.cc/heap_median_maintenance.html"/>
    <updated>2017-07-21T14:58:43+08:00</updated>
    <id>http://larryim.cc/heap_median_maintenance.html</id>
    <content type="html"><![CDATA[
<p><strong>Problem Statement</strong>: The goal of the problem is to implement the <code>Median Maintenance</code> algorithm. The text file contains a list of the integers; you should treat this as a stream of numbers, arriving one by one. Letting \(x_i\) denote the \(i\)th number of the file, the \(k\)th median \(m_k\) is defined as the median of the numbers \(x_1,…,x_k\). (So, if \(k\) is odd, then \(m_k\) is \(((k+1)/2)\)th smallest number among \(x_1,…,x_k\); if \(k\) is even, then \(m_k\) is the \((k/2)\)th smallest number among \(x_1,…,x_k\).)</p>

<h1 id="toc_0">Solution</h1>

<p>We might use a max heap to represent elements that are less than the median, and a min heap to represent elements that are greater than the median.</p>

<p>After balancing the heaps, the number of elements in two heaps differs at most by 1. </p>

<pre><code class="language-python">Step 1: Add next item to one of the heaps

   if next item &lt; maxHeap root:
        add it to maxHeap
   else:
        add it to minHeap

Step 2: Balance the heaps (after this step heaps will be either balanced or
   one of them will contain 1 more item)

   if number of elements in one of the heaps &gt; the other by
   more than 1:
        remove the root element from the one containing more elements 
        and add to the other one

Step 3: Calculate the median:

   if the heaps contain equal amount of elements:
        median = root of maxHeap
   else:
        median = root of the heap with more elements
</code></pre>

<h2 id="toc_1">Implementation</h2>

<pre><code class="language-python">import doctest
import sys

class MinHeap(object):
    &quot;&quot;&quot;
    Min Heap
    &gt;&gt;&gt; bh = MinHeap()
    &gt;&gt;&gt; bh.buildHeap([9,5,14,18,-17,27,33,19,11,21])
    &gt;&gt;&gt; bh.findMin()
    -17
    &gt;&gt;&gt; bh.delMin()
    -17
    &gt;&gt;&gt; bh.list[1:]
    [5, 9, 14, 11, 21, 27, 33, 19, 18]
    &gt;&gt;&gt; bh.insert(-100)
    &gt;&gt;&gt; bh.delMin()
    -100
    &quot;&quot;&quot;

    def __init__(self):
        &quot;&quot;&quot;
        add self.list 0 with initialization in order to divide
        &quot;&quot;&quot;
        self.list = [-sys.maxsize]
        self.size = 0


    def insert(self, k):
        &quot;&quot;&quot;
        Insert element to the MinBinaryHeap
        &quot;&quot;&quot;
        self.list.append(k)
        self.size += 1
        self.perc_up(self.size)


    def findMin(self):
        &quot;&quot;&quot;
        Find the min element and return it
        &quot;&quot;&quot;
        return self.list[1]


    def delMin(self):
        &quot;&quot;&quot;
        Delete the min element
        and return it
        &quot;&quot;&quot;
        retrival = self.list[1]
        self.size -= 1
        self.list[1] = self.list[-1]
        self.list.pop()
        self.perc_down(1)

        return retrival


    def isEmpty(self):
        &quot;&quot;&quot;
        Return if the MinBinaryHeap is empty
        &quot;&quot;&quot;
        return self.size == 0

    def __len__(self):
        &quot;&quot;&quot;
        Magic Method: return the length of MinBinaryHeap
        &quot;&quot;&quot;
        return self.size


    def buildHeap(self, alist):
        &quot;&quot;&quot;
        Build a MinBinaryHeap from alist which is a collection of data
        &quot;&quot;&quot;
        self.list.extend(alist)
        self.size = len(alist)

        i = self.size//2
        while i &gt; 0:
            self.perc_down(i)
            i -= 1

    def perc_up(self, i):
        &quot;&quot;&quot;&quot;
        perc_up i
        &quot;&quot;&quot;
        while i//2&gt;0:
            if self.list[i] &lt; self.list[i // 2]:
                self.list[i], self.list[i // 2] = self.list[i // 2], self.list[i]
            i = i // 2

    def perc_down(self, i):
        &quot;&quot;&quot;
        perc down i
        &quot;&quot;&quot;
        while (i * 2) &lt;= self.size:
            mc = self.minChild(i)
            if self.list[i] &gt; self.list[mc]:
                self.list[i], self.list[mc] = self.list[mc], self.list[i]
            i = mc

    def minChild(self, i):
        &quot;&quot;&quot;
        find the min child
        &quot;&quot;&quot;
        if i * 2 + 1 &gt; self.size:
            return i * 2
        else:
            if self.list[i * 2] &lt; self.list[i * 2 + 1]:
                return i * 2
            else:
                return i * 2 + 1

    def __iter__(self):
        return iter(self.list[1:])


class MaxHeap(object):
    &quot;&quot;&quot;
    Max Heap
    &gt;&gt;&gt; bh = MaxHeap()
    &gt;&gt;&gt; bh.buildHeap([9,5,14,18,-17,27,33,19,11,21])
    &gt;&gt;&gt; bh.delMax()
    33
    &gt;&gt;&gt; bh.insert(100)
    &gt;&gt;&gt; bh.delMax()
    100
    &gt;&gt;&gt; len(bh)
    9
    &quot;&quot;&quot;

    def __init__(self):
        self.heap = MinHeap()

    def insert(self, k):
        self.heap.insert(-k)

    def delMax(self):
        return -self.heap.delMin()

    def buildHeap(self, alist):
        for i in range(len(alist)):
            alist[i] = -alist[i]
        self.heap.buildHeap(alist)

    def findMax(self):
        return -self.heap.findMin()

    def __len__(self):
        return self.heap.size

    def __iter__(self):
        for i in range(1, self.heap.size+1):
            yield -self.heap.list[i]


def median_maintenance(textfile):

    min_heap = MinHeap()  # &gt; medium
    max_heap = MaxHeap()  # &lt; medium

    medians = []
    count = 0

    with open(textfile) as infile:
        for line in infile:
            item = int(line)
            count += 1

            # Step 1: Add next item to one of the hepas
            # special case: initialize
            if count == 1:
                max_heap.insert(item)
            else:
                if item &lt; max_heap.findMax():
                    max_heap.insert(item)
                else:
                    min_heap.insert(item)

            # Step2: Balance the heap
            if abs(len(max_heap) - len(min_heap)) &gt; 1:
                if len(max_heap) &gt; len(min_heap):
                    min_heap.insert(max_heap.delMax())
                else:
                    max_heap.insert(min_heap.delMin())

            # Step3: calculate median
            if len(max_heap) == len(min_heap):
                median = max_heap.findMax()
            else:
                if len(max_heap) &gt; len(min_heap):
                    median = max_heap.findMax()
                else:
                    median = min_heap.findMin()

            medians.append(median)

            # test
            #for element in max_heap:
            #    print(element, end=&#39; &#39;)
            #for element in min_heap:
            #    print(element, end=&#39; &#39;)
            #print(&#39;total elem:&#39;,len(max_heap)+len(min_heap))


    return medians

if __name__ == &#39;__main__&#39;:
    # doctest.testmod(verbose=True)
    #textfile = &#39;SmallTest.txt&#39;
    textfile = &#39;Median.txt&#39;
    medians = median_maintenance(textfile)
    answer = sum(medians)%10000
    print(answer)
</code></pre>

<h2 id="toc_2">Resources</h2>

<ol>
<li><a href="https://stackoverflow.com/questions/14189540/python-topn-max-heap-use-heapq-or-self-implement">max heap implementation</a></li>
<li><a href="https://stackoverflow.com/questions/10657503/find-running-median-from-a-stream-of-integers">median maintenance</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python树(三)：Binary Search Tree]]></title>
    <link href="http://larryim.cc/binary_search_tree.html"/>
    <updated>2017-06-14T16:13:11+08:00</updated>
    <id>http://larryim.cc/binary_search_tree.html</id>
    <content type="html"><![CDATA[
<p>A <code>binary search tree</code>  is a tree that keys that are less than the parent are found in the left subtree, and keys that are greater than the parent are found in the right subtree.</p>

<p>Let \(x\) be a node in a binary search tree. If \(y\) is a node in the left subtree of \(x\), then \(y.key\le x.key\). If \(y\) is a node in the right subtree of \(x\), then \(y.key\le x.key\).</p>

<h2 id="toc_0">Implementation</h2>

<ul>
<li><code>Map()</code> Create a new, empty map.</li>
<li><code>put(key,val)</code> Add a new key-value pair to the map. If the key is already in the map then replace the old value with the new value.</li>
<li><code>get(key)</code> Given a key, return the value stored in the map or <code>None</code> otherwise.</li>
<li><code>del</code> Delete the key-value pair from the map using a statement of the form <code>del map[key]</code>.</li>
<li><code>len()</code> Return the number of key-value pairs stored in the map.</li>
<li><code>in</code> Return <code>True</code> for a statement of the form <code>key in map</code>, if the given key is in the map.</li>
</ul>

<p>To implement the binary search tree,  the method of <code>the nodes and references approached</code> similar to <code>binary tree</code>(<a href="http://larryim.cc/tree_2.html">Link</a>) The <code>BinarySearchTree</code> class has a reference to the <code>TreeNode</code> that is the root of the binary search tree. </p>

<h3 id="toc_1"><code>delete</code> method</h3>

<p>Once we’ve found the node containing the key we want to delete, there are three cases that we must consider:</p>

<ul>
<li>The node to be deleted has no children.</li>
<li>The node to be deleted has only one child.</li>
<li>The node to be deleted has two children.</li>
</ul>

<p>The first case is straightforward. If the current node has no children all we need to do is delete the node and remove the reference to this node in the parent. The code for this case is shown in here.</p>

<p>The second case is only slightly more complicated. If a node has only a single child, then we can simply promote the child to take the place of its parent. The code for this case is shown in the next listing. As you look at this code you will see that there are six cases to consider. Since the cases are symmetric with respect to either having a left or right child we will just discuss the case where the current node has a left child. The decision proceeds as follows:</p>

<ul>
<li>If the current node is a left child then we only need to update the parent reference of the left child to point to the parent of the current node, and then update the left child reference of the parent to point to the current node’s left child.</li>
<li>If the current node is a right child then we only need to update the parent reference of the left child to point to the parent of the current node, and then update the right child reference of the parent to point to the current node’s left child.</li>
<li>If the current node has no parent, it must be the root. In this case we will just replace the key, payload, leftChild, and rightChild data by calling the <code>replaceNodeData</code> method on the root.</li>
</ul>

<p>The third case is the most difficult case to handle. If a node has two children, then it is unlikely that we can simply promote one of them to take the node’s place. We can, however, search the tree for a node that can be used to replace the one scheduled for deletion. What we need is a node that will preserve the binary search tree relationships for both of the existing left and right subtrees. The node that will do this is the node that has the next-largest key in the tree. We call this node the <code>successor</code>, and we will look at a way to find the successor shortly. The successor is guaranteed to have no more than one child, so we know how to remove it using the two cases for deletion that we have already implemented. Once the successor has been removed, we simply put it in the tree in place of the node to be deleted.</p>

<h3 id="toc_2"><code>successor</code> Method</h3>

<p>The code to find the successor is a method of the <code>TreeNode</code> class. This code makes use of the same properties of binary search trees that cause an <code>inorder traversal</code> to print out the nodes in the tree from smallest to largest. There are three cases to consider when looking for the successor:</p>

<ul>
<li>If the node has a right child, then the successor is the smallest key in the right subtree.</li>
<li>If the node has no right child and is the left child of its parent, then the parent is the successor.</li>
<li>If the node is the right child of its parent, and itself has no right child, then the successor to this node is the successor of its parent, excluding this node.</li>
</ul>

<pre><code class="language-python">
class BinarySearchTree(object):

    def __init__(self):
        self.root = None
        self.size = 0

    def put(self, key, val):
        if self.root:
            self._put(key, val, self.root)
        else:
            self.root = TreeNode(key, val)
        self.size = self.size + 1

    def _put(self, key, val, currentNode):
        if key &lt; currentNode.key:
            if currentNode.hasLeftChild():
                self._put(key, val, currentNode.leftChild)
            else:
                currentNode.leftChild = TreeNode(key, val, parent=currentNode)
        else:
            if currentNode.hasRightChild():
                self._put(key, val, currentNode.rightChild)
            else:
                currentNode.rightChild = TreeNode(key, val, parent=currentNode)

    def __setitem__(self, k, v):
        self.put(k, v)

    def get(self, key):
        if self.root:
            res = self._get(key, self.root)
            if res:
                return res.payload
            else:
                return None
        else:
            return None

    def _get(self, key, currentNode):
        if not currentNode:
            return None
        elif currentNode.key == key:
            return currentNode
        elif key &lt; currentNode.key:
            return self._get(key, currentNode.leftChild)
        else:
            return self._get(key, currentNode.rightChild)

    def __getitem__(self, key):
        res = self.get(key)
        if res:
            return res
        else:
            raise KeyError(&#39;Error, key not in tree&#39;)

    def __contains__(self, key):
        if self._get(key, self.root):
            return True
        else:
            return False

    def length(self):
        return self.size

    def __len__(self):
        return self.size

    def __iter__(self):
        return self.root.__iter__()

    def delete(self, key):
        if self.size &gt; 1:
            nodeToRemove = self._get(key, self.root)
            if nodeToRemove:
                self.remove(nodeToRemove)
                self.size = self.size - 1
            else:
                raise KeyError(&#39;Error, key not in tree&#39;)
        elif self.size == 1 and self.root.key == key:
            self.root = None
            self.size = self.size - 1
        else:
            raise KeyError(&#39;Error, key not in tree&#39;)

    def __delitem__(self, key):
        self.delete(key)

    def remove(self, currentNode):
        if currentNode.isLeaf():  # leaf
            if currentNode == currentNode.parent.leftChild:
                currentNode.parent.leftChild = None
            else:
                currentNode.parent.rightChild = None
        elif currentNode.hasBothChildren():  # interior
            succ = currentNode.findSuccessor()
            succ.spliceOut()
            currentNode.key = succ.key
            currentNode.payload = succ.payload
        else:  # this node has one child
            if currentNode.hasLeftChild():
                if currentNode.isLeftChild():
                    currentNode.leftChild.parent = currentNode.parent
                    currentNode.parent.leftChild = currentNode.leftChild
                elif currentNode.isRightChild():
                    currentNode.leftChild.parent = currentNode.parent
                    currentNode.parent.rightChild = currentNode.leftChild
                else:
                    currentNode.replaceNodeData(currentNode.leftChild.key,
                                                currentNode.leftChild.payload,
                                                currentNode.leftChild.leftChild,
                                                currentNode.leftChild.rightChild)
            else:
                if currentNode.isLeftChild():
                    currentNode.rightChild.parent = currentNode.parent
                    currentNode.parent.leftChild = currentNode.rightChild
                elif currentNode.isRightChild():
                    currentNode.rightChild.parent = currentNode.parent
                    currentNode.parent.rightChild = currentNode.rightChild
                else:
                    currentNode.replaceNodeData(currentNode.rightChild.key,
                                                currentNode.rightChild.payload,
                                                currentNode.rightChild.leftChild,
                                                currentNode.rightChild.rightChild)

    def inorder(self):
        self._inorder(self.root)

    def _inorder(self, tree):
        if tree != None:
            self._inorder(tree.leftChild)
            print(tree.key)
            self._inorder(tree.rightChild)

    def postorder(self):
        self._postorder(self.root)

    def _postorder(self, tree):
        if tree:
            self._postorder(tree.rightChild)
            self._postorder(tree.leftChild)
            print(tree.key)

    def preorder(self):
        self._preorder(self, self.root)

    def _preorder(self, tree):
        if tree:
            print(tree.key)
            self._preorder(tree.leftChild)
            self._preorder(tree.rightChild)


class TreeNode:
    def __init__(self, key, val, left=None, right=None, parent=None):
        self.key = key
        self.payload = val
        self.leftChild = left
        self.rightChild = right
        self.parent = parent
        self.balanceFactor = 0

    def hasLeftChild(self):
        return self.leftChild

    def hasRightChild(self):
        return self.rightChild

    def isLeftChild(self):
        return self.parent and self.parent.leftChild == self

    def isRightChild(self):
        return self.parent and self.parent.rightChild == self

    def isRoot(self):
        return not self.parent

    def isLeaf(self):
        return not (self.rightChild or self.leftChild)

    def hasAnyChildren(self):
        return self.rightChild or self.leftChild

    def hasBothChildren(self):
        return self.rightChild and self.leftChild

    def replaceNodeData(self, key, value, lc, rc):
        self.key = key
        self.payload = value
        self.leftChild = lc
        self.rightChild = rc
        if self.hasLeftChild():
            self.leftChild.parent = self
        if self.hasRightChild():
            self.rightChild.parent = self

    def findSuccessor(self):
        succ = None
        if self.hasRightChild():
            succ = self.rightChild.findMin()
        else:
            if self.parent:
                if self.isLeftChild():
                    succ = self.parent
                else:
                    self.parent.rightChild = None
                    succ = self.parent.findSuccessor()
                    self.parent.rightChild = self
        return succ

    def spliceOut(self):
        if self.isLeaf():
            if self.isLeftChild():
                self.parent.leftChild = None
            else:
                self.parent.rightChild = None
        elif self.hasAnyChildren():
            if self.hasLeftChild():
                if self.isLeftChild():
                    self.parent.leftChild = self.leftChild
                else:
                    self.parent.rightChild = self.leftChild
                self.leftChild.parent = self.parent
            else:
                if self.isLeftChild():
                    self.parent.leftChild = self.rightChild
                else:
                    self.parent.rightChild = self.rightChild
                self.rightChild.parent = self.parent

    def findMin(self):
        current = self
        while current.hasLeftChild():
            current = current.leftChild
        return current

    def __iter__(self):
        &quot;&quot;&quot;The standard inorder traversal of a binary tree.&quot;&quot;&quot;
        if self:
            if self.hasLeftChild():
                for elem in self.leftChild:
                    yield elem
            yield self.key
            if self.hasRightChild():
                for elem in self.rightChild:
                    yield elem
</code></pre>

]]></content>
  </entry>
  
</feed>
